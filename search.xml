<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring5_AOP 和事务操作</title>
      <link href="/2022/03/20/Spring5_AOP%E5%92%8C%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/03/20/Spring5_AOP%E5%92%8C%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315103119533.png" alt="image-20220315103119533"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315095850559.png" alt="image-20220315095850559"></p><h3 id="1-AOP底层原理"><a href="#1-AOP底层原理" class="headerlink" title="1.AOP底层原理"></a>1.AOP底层原理</h3><p>底层使用了   动态代理</p><blockquote><p>知识补充:     静态代理，动态代理</p></blockquote><p>代理类和被代理类实现同一个接口</p><p>静态代理</p><ul><li><p>代理类 和 被代理类 编译期间已经确定下来啦</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">ClothFactory</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理类</span><span class="token keyword">class</span> <span class="token class-name">ProxyClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ClothFactory</span> factory<span class="token punctuation">;</span><span class="token comment">//用被代理类进行实例化</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span><span class="token class-name">ClothFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理工厂准备工作代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理工厂后续结尾代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//被代理类对象</span><span class="token keyword">class</span> <span class="token class-name">NikeClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Nike工厂生产衣服"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NikeClothFactory</span> nikeCloth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NikeClothFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ProxyClothFactory</span> proxyClothFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span>nikeCloth<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyClothFactory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理工厂准备工作代码</span>        <span class="token comment">//Nike工厂生产衣服</span>        <span class="token comment">//代理工厂后续结尾代码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态代理</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315170604584.png" alt="image-20220315170604584"></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span>  <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//被代理类</span><span class="token keyword">class</span> <span class="token class-name">SuperMan</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"I believe I can fly!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃"</span><span class="token operator">+</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> proxyFactory<span class="token punctuation">&#123;</span>    <span class="token comment">// obj 就是创建的被代理的对象</span>    <span class="token comment">//调用这个方法解决问题1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MyInvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//匿名内部类也可以</span><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span><span class="token comment">//需要使用被代理类的对象进行赋值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span>obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法: invoke()</span>    <span class="token comment">//里面已经封装好了 比如调eat方法时 会调用下面这个invoke方法</span>    <span class="token comment">//这步很关键，那个参数是接口，接口无法实例化，通过它的实现类来实例化，实现类的对象“替代”了这个参数，多态的思想</span>    <span class="token comment">/**     *     * @param proxy 就是上面那个getProxyInstance返回的对象     * @param method 代理类调的哪个方法 就是哪个方法（应该是被代理类的方法）     * @param args     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span>        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//上述方法的返回值</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SuperMan</span> superMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Human</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Human</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxyInstance<span class="token punctuation">.</span><span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"麻辣烫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态性</span>        <span class="token class-name">ClothFactory</span> proxyInstance1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ClothFactory</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NikeClothFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance1<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315175717274.png" alt="image-20220315175717274"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315201040382.png" alt="image"></p><blockquote><p>知识补充完毕</p></blockquote><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315111053965.png" alt="image-20220315111053965"></p><h4 id="有接口的情况"><a href="#有接口的情况" class="headerlink" title="有接口的情况"></a>有接口的情况</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315201952897.png" alt="image-20220315201952897"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315203922864.png" alt="image-20220315203922864"></p><p>代码参考上面知识补充的即可</p><p>你调的是什么方法 就会增强什么方法</p><h4 id="没有接口的情况"><a href="#没有接口的情况" class="headerlink" title="没有接口的情况"></a>没有接口的情况</h4><p>原始方法，利用子类继承发展功能</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315202836857.png" alt="image-20220315202836857"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315203120575.png" alt="image-20220315203120575"></p><h3 id="2-AOP操作的术语"><a href="#2-AOP操作的术语" class="headerlink" title="2.AOP操作的术语"></a>2.AOP操作的术语</h3><ul><li>连接点：可以被增强的方法；</li><li>切入点：实际被增强的方法</li><li>通知：增强的功能</li><li>切面： 是一个动作 </li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315212925448.png" alt="image-20220315212925448"></p><h3 id="3-AOP操作—准备"><a href="#3-AOP操作—准备" class="headerlink" title="3.AOP操作—准备"></a>3.AOP操作—准备</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315213829611.png" alt="image-20220315213829611"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315213922831.png" alt="image-20220315213922831"></p><p>AOP相关依赖：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315214525279.png" alt="image-20220315214525279"></p><p> maven :  spring-boot-starter-aop</p><h3 id="4-切入点表达式"><a href="#4-切入点表达式" class="headerlink" title="4.切入点表达式"></a>4.切入点表达式</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315220511902.png" alt="image-20220315220511902"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315220801264.png" alt="image-20220315220801264"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220315221245882.png" alt="image-20220315221245882"></p><p><a href="https://blog.csdn.net/qq_32659773/article/details/105679502">语法结构链接点击</a></p><p>修饰符可以以省略，返回值不能省</p><p>*代表 任意返回类型</p><h3 id="5-注解操作"><a href="#5-注解操作" class="headerlink" title="5.注解操作"></a>5.注解操作</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220316093625566.png" alt="image-20220316093625566"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220316094114709.png" alt="image-20220316094114709"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220316164727805.png" alt="image-20220316164727805"></p><p>对应的注解 在配置类上写 @EnableAspectJAutoProxy </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//当前类作为配置类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.company"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//@EnableAspectJAutoProxy注解等同于在xml中配置aspectj-autoproxy，表示开启spring对注解AOP的支持</span><span class="token comment">//ture表示使用cglib代理 默认false表示用jdk代理 没接口应该使用cglib但是我的类测试false也行 可能高版本自己选择了</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220316094846288.png" alt="image-20220316094846288"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.company.Spring5.AOP.Anno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 最终通知 不管有没有异常</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.company.Spring5.AOP.Anno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回通知（后置通知）  afterreturning只有正常返回才会执行， 发生异常不执行</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(* com.company.Spring5.AOP.Anno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterReturning..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//异常通知 发生异常后执行</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(* com.company.Spring5.AOP.Anno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterThrowing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.company.Spring5.AOP.Anno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around前..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发生异常后不执行  Around后</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around后..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//被增强的类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Around前…<br>Before…<br>add…<br>Around后…<br>After…<br>afterReturning…</p><blockquote><p>这里方法里面的..代表适配所有方法，实际上参数是用来区分重载方法的</p></blockquote><h3 id="6-公共切入点提取"><a href="#6-公共切入点提取" class="headerlink" title="6.公共切入点提取"></a>6.公共切入点提取</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//相同切入点抽取</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.company.Spring5.AOP.Anno.User.add(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">pointDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointDemo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-多个增强类对同一个类进行了增强-设置优先级"><a href="#7-多个增强类对同一个类进行了增强-设置优先级" class="headerlink" title="7.多个增强类对同一个类进行了增强 设置优先级"></a>7.多个增强类对同一个类进行了增强 设置优先级</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220316164349203.png" alt="image-20220316164349203"></p><p>0开始</p><p>Before 永远在After前面</p><h3 id="8-xml操作（了解）"><a href="#8-xml操作（了解）" class="headerlink" title="8.xml操作（了解）"></a>8.xml操作（了解）</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220317202039473.png" alt="image-20220317202039473"></p><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220317222609617.png" alt="image-20220317222609617"></p><p>atomicity consistency isolation durability</p><blockquote><ul><li>原子性</li></ul><p>不可分割  要么都成功 要么都失败 </p><ul><li>一致性</li></ul><p>事务提交前后的数据完整性和状态保持一致</p><p>总量守恒</p><ul><li>隔离性</li></ul><p>多事务操作之间不影响</p><p>不考虑隔离性 产生的问题：脏读 幻读 不可重复读</p><ul><li>持久性</li></ul><p>提交之后 表中的数据真正发生变化</p></blockquote><h4 id="脏读-幻读-不可重复读-的理解"><a href="#脏读-幻读-不可重复读-的理解" class="headerlink" title="脏读 幻读 不可重复读 的理解"></a>脏读 幻读 不可重复读 的理解</h4><p>脏读：一个未提交事务读取到另一个未提交事务的数据。</p><blockquote><p>假设事务 A 更新了一行数据的值为 A 值，此时事务 B 去查询了一下这行数据的值，看到的值是 A 值</p><p>事务 B 拿着刚才查询到的 A 值做各种业务处理。但是,事务 A 突然回滚了事务，导致它刚才功能的 A 值没了，此时那行数据的值回滚为 NULL 值。然后事务 B 紧接着此时再次查询那行数据的值，看到的居然是 NULL 值</p><p>说明隔离级别“READ-UNCOMMITTED” 但这个隔离级别太低了，一般数据库不会采用</p></blockquote><p>不可重复读: 一个未提交事务读取到另一个提交事务修改数据。</p><blockquote><p>前提：必须要事务 B 提交之后，它修改的值才能被事务 A 读取到，其实这种情况下，就是我们首先避免了脏读的发生</p><p>假设缓存页里一条数据原来的值是 A 值，此时事务 A 开启之后，第一次查询这条数据，读取到的就是 A 值</p><p>接着事务 B 更新了那行数据的值为 B 值，同时事务 B 立马提交了，然后事务 A 此时还没提交。所以事务 A 是可以读到B</p><p>紧接着事务 C 再次更新数据为 C 值，并且提交事务了，此时事务 A 在还没提交的情况下，第三次查询数据，查到的值为 C 值</p></blockquote><p>幻读: 一个未提交事务读取到另一个提交事务添加数据。</p><blockquote><p>幻读就是你一个事务用一样的 SQL 多次查询，结果每次查询都会发现查到一些之前没看到过的数据</p><p>如 <code>SELECT * FROM table WHERE id &gt; 10</code></p><p>它一开始查询出来了 n 条数据。接着这个时候，别的事务 B往表里插了几条数据，而且事务 B 还提交了，此时多了几行数据。事务 A 此时第二次查询,这次它查询出来了 n+m条数据</p></blockquote><pre><code>    幻读,不可重复读 都是现象，   脏读是问题</code></pre><p>Spring中 解决通过设置事务隔离级别，解决3个问题。在下面（（ioslation:事务隔离级别））</p><h3 id="1-注解使用流程"><a href="#1-注解使用流程" class="headerlink" title="1.注解使用流程"></a>1.注解使用流程</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220318113659525.png" alt="image-20220318113659525"></p><p>Spring支持声明式事务管理，一般使用注解</p><blockquote><p> <strong>在Spring进行声明式事务管理，底层使用AOP原理</strong></p></blockquote><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220318115338539.png" alt="image-20220318115338539"></p><p>platfromTransactionManager</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 组件扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 数据库连接池 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span>          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///user_DB?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- JdbcTemplate对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注入dataSource--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--创建事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注入数据源,对那个数据库进行事务管理--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启事务注解  就是认识事务的注解--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、在spring配置文件配置事务管理器 </p><p>2、在spring配置文件，开启事务注解</p><p>3、在service类上面（或者service类里面方法上面）添加事务注解</p><blockquote><p>1）@Transactional，这个注解添加到类上面，也可以添加方法上面</p></blockquote><blockquote><p>2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务</p></blockquote><blockquote><p>3）如果把这个注解添加方法上面，为这个方法添加事务</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-Transactional-的属性"><a href="#2-Transactional-的属性" class="headerlink" title="2.@Transactional 的属性"></a>2.@Transactional 的属性</h3><blockquote><p>tip:     idea 中ctrl + p 查看属性</p></blockquote><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220320103605424.png" alt="image-20220320103605424"></p><ul><li><p>1、propagation: 事务传播行为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例</p><p>首先这个传播行为是针对于被调用的方法而言的，也就是update方法上设置传播行为</p><p>注意：目前的前提都是update有事务</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220320104741579.png" alt="image-20220320104741579"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220320105138746.png" alt="image-20220320105138746"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220320104538988.png" alt="image-20220320104538988"></p></li><li><p>2、ioslation:事务隔离级别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>REPEATABLE_READ<span class="token punctuation">)</span> <span class="token comment">//MySQL默认就是这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220320114605305.png" alt="image-20220320114605305"></p></li><li><p>3、timeout: 超时时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">//@Transactional(timeout = -1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220320132236518.png" alt="image-20220320132236518"></p></li><li><p>4、readOnly: 是否只读</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220320132352235.png" alt="image-20220320132352235"></p></li><li><p>5、rollbackFor: 回滚</p><p>设置出现哪些异常进行事务回滚。</p></li><li><p>6、noRollbackFor: 不回滚</p><p>设置出现哪些异常不进行事务回滚。</p></li></ul><h3 id="3-纯注解开发"><a href="#3-纯注解开发" class="headerlink" title="3.纯注解开发"></a>3.纯注解开发</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  @Configuration //配置类</span><span class="token comment">//组件扫描  @ComponentScan(basePackages = "com.atguigu")</span><span class="token comment">//  @EnableTransactionManagement 开启事务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TxConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建数据库连接池</span>    <span class="token comment">//@Component：表示这是一个组件。IOC会托管这个类的对象。@bean：方法返回的对象交给IOC管理。</span>    <span class="token comment">//@bean：表示方法返回的是对象，然后对象交给IOC管理。在配置文件中配置对象要写上注解@Bean</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">getDruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///user_db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建JdbcTemplate对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//到ioc容器中根据类型找到dataSource （好比@@Autowired 根据类型做注入）</span>        <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注入dataSource</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建事务管理器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">getDataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot 又进行了进一步封装</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5_IOC</title>
      <link href="/2022/03/20/Spring5_IOC/"/>
      <url>/2022/03/20/Spring5_IOC/</url>
      
        <content type="html"><![CDATA[<p><strong>尚硅谷课堂笔记：</strong></p><p>链接: <a href="https://pan.baidu.com/s/1BPdI_vDWW2M-1A0okF3Pww">https://pan.baidu.com/s/1BPdI_vDWW2M-1A0okF3Pww</a> 提取码: 2333<br>视频的代码笔记和资料。</p><p>老师笔记中的某些内容不再赘叙</p><p><strong>此笔记  针对以上笔记为基础</strong> <strong>添加补充</strong></p><p> 主要目的为针对自己复习学习</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpring5</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.加载spring配置文件</span>        <span class="token comment">/*        在src下 ，写下面这个（类路径）        new FileSystemXmlApplicationContext()不同        写绝对路径 D:\Mozilla Firefox\aa......         */</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取配置创建的对象</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置User对象创建--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一-IOC"><a href="#一-IOC" class="headerlink" title="一.IOC"></a>一.IOC</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220308183759166.png" alt="image-20220308183759166"></p><p>调用过程 也就是在其他类里 去new 一个类，</p><p>虽然省去了new, 但是要到配置文件读取，配置文件中也得说明</p><p>目前还看不出来它的强大</p><h3 id="1-IOC原理理解"><a href="#1-IOC原理理解" class="headerlink" title="1.IOC原理理解"></a>1.IOC原理理解</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220308185159566.png" alt="image-20220308185159566"></p><p>问题：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220308193444373.png" alt="image-20220308193444373"></p><p>dao路径变化了 方法变了 Service 都要变，耦合度高   </p><p>这不满足 迪米特原则（最少知道原则）</p><p>目的：耦合度减低到最低</p><p>解决方法一（最终方法是IOC）：工厂模式</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220308200809070.png" alt="image-20220308200809070"></p><p>这样解耦 还没有到达最低</p><p>解决方法二：IOC(xml+反射)</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220308202634815.png" alt="image-20220308202634815"></p><p>这样只需要改xml的class 就可以改动类，类似于定义变量，修改不用一个一个改</p><h3 id="2-IOC接口"><a href="#2-IOC接口" class="headerlink" title="2.IOC接口"></a>2.IOC接口</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220309210903236.png" alt="image-20220309210903236"></p><p>使用第二种 因为服务器启动时 可以慢，而且第一种是内部使用的接口</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220309212426404.png" alt="image-20220309212426404"></p><h3 id="3-IOC-—Bean管理操作"><a href="#3-IOC-—Bean管理操作" class="headerlink" title="3.IOC —Bean管理操作"></a>3.IOC —Bean管理操作</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220309213400767.png" alt="image-20220309213400767"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220309220544081.png" alt="image-20220309220544081"></p><h2 id="以下是xml-Bean管理操作"><a href="#以下是xml-Bean管理操作" class="headerlink" title="以下是xml Bean管理操作"></a>以下是xml Bean管理操作</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220309222246439.png" alt="image-20220309222246439"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的代码 如果没有无参构造会报错</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220309222645785.png" alt="image-20220309222645785"></p><p>DI ：Dependency Injection</p><p>DI 是IOC的一种具体实现。需要在创建对象的基础上完成</p><p><strong>第一种注入方式：使用</strong> <strong>set</strong> <strong>方法进行注入</strong></p><ul><li>（1）创建类，定义属性和对应的 set 方法</li><li>（2）在 spring 配置文件配置对象创建，配置属性注入</li></ul><p><strong>第二种注入方式：使用有参数构造进行注入</strong></p><ul><li><p>（1）创建类，定义属性，创建属性对应有参数构造方法</p></li><li><p>（2）在 spring 配置文件中进行配置</p></li></ul><p>第三种注入方式：p名称空间</p><blockquote><p>就是 标签的 p属性</p><p>其实底层还是第一种方法</p></blockquote><h3 id="4-注入null和特殊值"><a href="#4-注入null和特殊值" class="headerlink" title="4. 注入null和特殊值"></a>4. 注入null和特殊值</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220310113736533.png" alt="image-20220310113736533"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220310142707384.png" alt="image-20220310142707384"></p><p>xml语法那部分讲过的，cdata纯文本区域，不需要xml解析，自然不会错误识别了</p><h3 id="5-注入属性—外部bean"><a href="#5-注入属性—外部bean" class="headerlink" title="5.注入属性—外部bean"></a>5.注入属性—外部bean</h3><p>解答：创建实例很费时间，通过配置文件的方式可以在服务器运行过程中提高速度，同时好管理好维护，</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dao.update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service.add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-内部bean和级联赋值"><a href="#6-内部bean和级联赋值" class="headerlink" title="6.内部bean和级联赋值"></a>6.内部bean和级联赋值</h3><p>外部bean可以通过ioc获取，内部的获取不到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.company.Spring5.bean.Emp"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"empName"</span> value<span class="token operator">=</span><span class="token string">"ZS"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"man"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>就是属性也是个对象，这个对象有自己的小属性<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.company.Spring5.bean.Dept"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"deptName"</span> value<span class="token operator">=</span><span class="token string">"KF"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> empName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>    <span class="token comment">//部门</span>    <span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span><span class="token class-name">Dept</span> dept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmpName</span><span class="token punctuation">(</span><span class="token class-name">String</span> empName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>empName <span class="token operator">=</span> empName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的效果和上面的外部bean 一样</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220310215954566.png" alt="image-20220310215954566"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220310220931712.png" alt="image-20220310220931712"></p><p>方法二需要生成get方法</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220310220123574.png" alt="image-20220310220123574"></p><h3 id="7-注入集合类属性"><a href="#7-注入集合类属性" class="headerlink" title="7.注入集合类属性"></a>7.注入集合类属性</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--集合类型属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.bean.Stu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--数组类型注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courses<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>java课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>数据库课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--list类型注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>法外狂徒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--map类型注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--set类型注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourses</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> courses<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSet</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>set <span class="token operator">=</span> set<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入值是对象的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>创建多个 course 对象<span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"course1"</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.atguigu.spring5.collectiontype.Course"</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cname"</span> value<span class="token operator">=</span><span class="token string">"Spring5 框架"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"course2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.atguigu.spring5.collectiontype.Course"</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cname"</span> value<span class="token operator">=</span><span class="token string">"MyBatis 框架"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注入 list 集合类型，值是对象<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"courseList"</span><span class="token operator">></span> <span class="token generics"><span class="token punctuation">&lt;</span>list<span class="token punctuation">></span></span>  <span class="token operator">&lt;</span>ref bean<span class="token operator">=</span><span class="token string">"course1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ref<span class="token operator">></span> <span class="token operator">&lt;</span>ref bean<span class="token operator">=</span><span class="token string">"course2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ref<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>集合注入部分提取</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220311214439416.png" alt="image-20220311214439416"></p><p>好像  一个公共类里面的公共方法</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220311215249831.png" alt="image-20220311215249831"></p><h3 id="8-FactoryBean"><a href="#8-FactoryBean" class="headerlink" title="8.FactoryBean"></a>8.FactoryBean</h3><p>FactoryBean 和BeanFactory 没有区别</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312122605435.png" alt="image-20220312122605435"></p><p>工厂bean 就是xml 定义的类型 和 读取xml 后实际创建出来的bean类型不一样</p><h3 id="9-Bean的作用域"><a href="#9-Bean的作用域" class="headerlink" title="9.Bean的作用域"></a>9.Bean的作用域</h3><p>1、在Spring里面，设置创建bean实例是单实例还是多实例。</p><p><strong>默认情况下是单实例</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean6.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.获取配置创建的对象</span>    <span class="token class-name">Book</span> t1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Book</span> t11 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t11<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//com.company.Spring5.Book@72e5a8e</span>    <span class="token comment">//com.company.Spring5.Book@72e5a8e</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置是单实例还是多实例：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312135527392.png" alt="image-20220312135527392"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Book<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean6.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.获取配置创建的对象</span>    <span class="token class-name">Book</span> t1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Book</span> t11 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t11<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//com.company.Spring5.Book@29215f06</span>    <span class="token comment">//com.company.Spring5.Book@59505b48</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312154433465.png" alt="image-20220312154433465"></p><h3 id="10-Bean的生命周期"><a href="#10-Bean的生命周期" class="headerlink" title="10.Bean的生命周期"></a>10.Bean的生命周期</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312155833994.png" alt="image-20220312155833994"></p><p> 1，2 步上面已经演示过了</p><p>第三步 是自己根据需要配置的，</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312160903205.png" alt="image-20220312160903205"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312160931519.png" alt="image-20220312160931519"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312161604259.png" alt="image-20220312161604259"></p><p>同样是自己配置的</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312161746776.png" alt="image-20220312161746776"></p><p>但是 销毁需要手动使用 .close() 才会去调用你配置的销毁方法。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312162053311.png" alt="image-20220312162053311"></p><p><strong>bean的后置处理器，bean生命周期有七步</strong></p><blockquote><p>在实现BeanPostProcessor接口后 还有两步，可以在 <strong>初始化前</strong> 和<strong>初始化后</strong> 调用</p></blockquote><p>1）通过构造器创建 bean 实例（无参数构造）</p><p>2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p>3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization </p><p>4）调用 bean 的初始化的方法（需要进行配置初始化的方法）把bean实例传递bean后置处理器的方法postProcessAfterInitialization</p><p>6）bean 可以使用了（对象获取到了）</p><p>7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法</p><p>实际开发的时候可以在项目启动时就获取到Bean对象，比如希望做一个过滤器链，可以存放到Map中在调用的时候直接从Map中获取，就不用在使用getBean方法了</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312173456032.png" alt="image-20220312173456032"></p><p>配置之后所以的bean 都添加了后置处理器（好像是类似过滤器的那种）</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312173515506.png" alt="image-20220312173515506"></p><h3 id="11-XML管理方式（自动装配）（实际开发直接用注解方式-自动装配）"><a href="#11-XML管理方式（自动装配）（实际开发直接用注解方式-自动装配）" class="headerlink" title="11.XML管理方式（自动装配）（实际开发直接用注解方式 自动装配）"></a>11.XML管理方式（自动装配）（实际开发直接用注解方式 自动装配）</h3><p>上面使用   <property name="A" value="B"></property> 或者外部bean的方法属于手动装配</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  以前的外部bean方式的属性注入&lt;bean id="emp" class="com.company.Spring5.Autowire.Emp2">    &lt;property name="Dept2" ref="dept" >&lt;/property>&lt;/bean>&lt;bean id="dept" class="com.company.Spring5.Autowire.Dept2">&lt;/bean>--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>byName根据属性名称: 就是根据set方法注入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--实现自动装配 bean标签属性autowire,配置自动装配 autowire属性常用两个值: byName根据属性名称注入  注入值bean的id值和类属性名称一样 我类的属性名字是dept2 下面那个标签的id 也是dept2 byType根据属性类型注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Autowire.Emp2<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Autowire.Dept2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220312185145102.png" alt="image-20220312185145102"></p><p>byType根据属性类型注入：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Autowire.Emp2<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Autowire.Dept2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面这种就会报错 ，有两个Dept2类型的bean</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Autowire.Emp2<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Autowire.Dept2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.Autowire.Dept2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-引入外部属性文件"><a href="#12-引入外部属性文件" class="headerlink" title="12.引入外部属性文件"></a>12.引入外部属性文件</h3><p>引入namespace(命名空间）其实就是为了解析那个标签，spring默认引入的只有4个默认的标签</p><p>这个是使用schema技术对这个xml文件进行约束</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>   <span class="token attr-name">&lt;!--引入的命名空间--</span><span class="token punctuation">></span></span>       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">    <span class="token comment">&lt;!--        直接配置连接池    &lt;bean id=" dataSource" class="com.alibaba.druid.pool.DruidDataSource">        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver">&lt;/property>        &lt;property name="url" value="jdbc:mysql://localhost:3306/userDb">&lt;/property>        &lt;property name="username" value="root">&lt;/property>        &lt;property name="password" value="123456">&lt;/property>    &lt;/bean>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.driverClassName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="以下是注解-Bean管理操作"><a href="#以下是注解-Bean管理操作" class="headerlink" title="以下是注解 Bean管理操作"></a>以下是注解 Bean管理操作</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220313120753017.png" alt="image-20220313120753017"></p><h3 id="13-创建对象"><a href="#13-创建对象" class="headerlink" title="13.创建对象"></a>13.创建对象</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220313121220504.png" alt="image-20220313121220504"></p><p>4种功能没有区别 都可以创建对象 命名不同 开发更清晰而已（约定大于配置）</p><p>  <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220313162723596.png" alt="image-20220313162723596"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 开启组件扫描--></span>    <span class="token comment">&lt;!--多个逗号分开--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5.dao,com.company.Spring5.service<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--或者写上层路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.Spring5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//括号中的值可以不写默认首字母小写，就是userService</span><span class="token comment">//等价于bean标签的Id ，上面的其他3种效果也一样</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service.add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14组件扫描细节"><a href="#14组件扫描细节" class="headerlink" title="14组件扫描细节"></a>14组件扫描细节</h3><p>例1：</p><p>在设置的包中只扫描Controller注解</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220313165336192.png" alt="image-20220313165336192"></p><p>user-default-filters=“fasle” 时候 不写 includ-filter  就不会扫描包</p><p>例2：</p><p>在设置的包中除了Controller 其他的都扫描</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220313165621172.png" alt="image-20220313165621172"></p><h3 id="15-属性注入"><a href="#15-属性注入" class="headerlink" title="15.属性注入"></a>15.属性注入</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220314205036572.png" alt="image-20220314205036572"></p><p>autowired根据bytype  quilife根据byname  reources可以根据byname也可以根据bytype</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220314205112044.png" alt="image-20220314205112044"></p><ul><li><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220314210151309.png" alt="image-20220314210151309"></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token comment">//等价于bean标签的Id</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service.add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Repositorypublic class UserImpl implements UserDao&#123;    @Override    public void add() &#123;        System.out.println(&quot;UserDao.add&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果多个实现类可能就要指定名称 上面的例子中只有一个实现类</p><ul><li><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220314215515525.png" alt="image-20220314215515525"></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token comment">//等价于bean标签的Id</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userImpl1"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service.add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userImpl1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao.add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@Resource注解是javax.annotacion包下的，属于java的扩展包，在标准jdk中没有 。需要导入</li><li>就是上面两种 这个都行</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220314215705003.png" alt="image-20220314215705003"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220314224119841.png" alt="image-20220314224119841"></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Value(value &#x3D; &quot;aaa&quot;)private String name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="16-纯注解开发"><a href="#16-纯注解开发" class="headerlink" title="16.纯注解开发"></a>16.纯注解开发</h3><p>了解，实际中使用Springboot开发</p><p>（1）创建配置类 替代xml(中开启组件扫描)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//当前类作为配置类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.company"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）测试类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Testpublic void testSpringConfig() &#123;    ApplicationContext context &#x3D;new AnnotationConfigApplicationContext(SpringConfig.class);    UserService userService &#x3D; context.getBean(&quot;userService&quot;, UserService.class);    userService.add();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb学习笔记—2</title>
      <link href="/2022/03/20/javaWeb%E5%AD%A6%E4%B9%A0%E2%80%942/"/>
      <url>/2022/03/20/javaWeb%E5%AD%A6%E4%B9%A0%E2%80%942/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Y7411K7zz">学习视频地址 Java Web 尚硅谷</a></p><h1 id="JavaWeb—2"><a href="#JavaWeb—2" class="headerlink" title="JavaWeb—2"></a>JavaWeb—2</h1><h2 id="十二-Cookie"><a href="#十二-Cookie" class="headerlink" title="十二.Cookie"></a>十二.Cookie</h2><p>cookie 保存在客户端</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220303193837252.png" alt="image-20220303193837252"></p><h4 id="1-创建cookie"><a href="#1-创建cookie" class="headerlink" title="1.创建cookie"></a>1.创建cookie</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220303204522432.png" alt="image-20220303204522432"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">creatCookie</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"cookie创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220303210015344.png" alt="image-20220303210015344"></p><h4 id="2-服务器获取cookie"><a href="#2-服务器获取cookie" class="headerlink" title="2.服务器获取cookie"></a>2.服务器获取cookie</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220303213432229.png" alt="image-20220303213432229"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Cookie</span> iwantcookie <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//  resp.getWriter().write(cookie.getName()+"="+cookie.getValue()+"&lt;br/>");</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             iwantcookie<span class="token operator">=</span>cookie<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iwantcookie <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>iwantcookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常写一个工具类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Cookie</span> <span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> cookies <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> cookie<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-修改Cookie的值"><a href="#3-修改Cookie的值" class="headerlink" title="3.修改Cookie的值"></a>3.修改Cookie的值</h4><p>方法一：（不常用）</p><p>相当于覆盖了</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304092510070.png" alt="image-20220304092510070"></p><p>方法二：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304092644959.png" alt="image-20220304092644959"></p><h4 id="4-Cookie生命周期控制"><a href="#4-Cookie生命周期控制" class="headerlink" title="4.Cookie生命周期控制"></a>4.Cookie生命周期控制</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304094332714.png" alt="image-20220304094332714"></p><p>cookie.setMaxAge的默认值是-1 , 在控制台显示为Session</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304100527911.png" alt="image-20220304100527911"></p><p>key1.setMaxAge(0);马上删除, 响应里的细节</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304101159118.png" alt="image-20220304101159118"></p><p>这里生命截止时间 是格林时间（格林威治标准时间，GMT),  东八区[GMT+8]</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304103011501.png" alt="image-20220304103011501"></p><h4 id="5-Cookie的path属性"><a href="#5-Cookie的path属性" class="headerlink" title="5.Cookie的path属性"></a>5.Cookie的path属性</h4><p>有效过滤cookie,路径满足条件 resp才会发送cookie</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304104759663.png" alt="image-20220304104759663"></p><p>默认值是当前路径</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304105241790.png" alt="image-20220304105241790"></p><h4 id="以上的测试代码"><a href="#以上的测试代码" class="headerlink" title="以上的测试代码"></a>以上的测试代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pragma<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cache-control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Expires<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieServlet?action=creatCookie<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie的创建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieServlet?action=getCookie<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie的获取<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieServlet?action=updateCookie<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie值的修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Cookie的存活周期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieServlet?action=defaultLife<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie的默认存活时间（会话）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieServlet?action=deleteNow<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie立即删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieServlet?action=lift3600<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie存活3600秒（1小时）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieServlet?action=testPath<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie的路径设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cookie的用户免登录练习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CookieServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/cookieServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cookie</span> iwantcookie <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//  resp.getWriter().write(cookie.getName()+"="+cookie.getValue()+"&lt;br/>");</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                iwantcookie<span class="token operator">=</span>cookie<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iwantcookie <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>iwantcookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">creatCookie</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"cookie创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateCookie</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> key1 <span class="token operator">=</span> <span class="token class-name">CookieUtils</span><span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        key1<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"newValue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通知客户端保存</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">defaultLife</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"keyLife"</span><span class="token punctuation">,</span> <span class="token string">"ValueLift"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cookie 的默认值就是这个，表示浏览器一关cookie就会被删除</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deleteNow</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> key1 <span class="token operator">=</span> <span class="token class-name">CookieUtils</span><span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        key1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//马上删除</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"key1已经删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">lift3600</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lift3600"</span><span class="token punctuation">,</span> <span class="token string">"lift3600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一个小时后删除</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"创建了一个存活时间是1小时的cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">testPath</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"testPath"</span><span class="token punctuation">,</span> <span class="token string">"testPath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getContextPath 获取工程路径</span>        cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"创建了一个有路径的cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> action <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//解决中文乱码问题</span>            resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取action业务鉴别字符串，获取相应的业务 方法反射对象</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(method);</span>            <span class="token comment">// 调用目标业务 方法</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-练习——免用户名登入"><a href="#6-练习——免用户名登入" class="headerlink" title="6.练习——免用户名登入"></a>6.练习——免用户名登入</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304191714515.png" alt="image-20220304191714515"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>cookie_session<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Cookie</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"LoginServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/loginServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//登录 成功</span>            <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前Cookie一周内有效</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录 成功11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//            登录 失败</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;cookie_session&#x2F;loginServlet&quot; method&#x3D;&quot;get&quot;&gt;        用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;cookie.username.value&#125;&quot;&gt; &lt;br&gt;        密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt; &lt;br&gt;        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三-Session"><a href="#十三-Session" class="headerlink" title="十三.Session"></a>十三.Session</h2><p>cookie 保存在客户端  session保存在服务器</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304170154969.png" alt="image-20220304170154969"></p><h4 id="1-获取和创建"><a href="#1-获取和创建" class="headerlink" title="1.获取和创建"></a>1.获取和创建</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304170838475.png" alt="image-20220304170838475"></p><h4 id="2-session域数据存取"><a href="#2-session域数据存取" class="headerlink" title="2.session域数据存取"></a>2.session域数据存取</h4><h4 id="3-session生命周期控制"><a href="#3-session生命周期控制" class="headerlink" title="3.session生命周期控制"></a>3.session生命周期控制</h4><p>session的默认生命周期在tomcat的web.xml 文件中配置过了。一般是30分钟。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304181039348.png" alt="image-20220304181039348"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304181123583.png" alt="image-20220304181123583"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304181208774.png" alt="image-20220304181208774"></p><p>修改单独session:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 先获取Session对象</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置当前Session3秒后超时</span>session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304181839998.png" alt="image-20220304181839998"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304181940337.png" alt="image-20220304181940337"></p><p>相当于 cookie的0，马上删除。</p><ul><li>一直点，一直创建新的Session</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304181746804.png" alt="image-20220304181746804"></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class SessionServlet extends BaseServlet &#123;    &#x2F;**     * 往Session中保存数据     * @param req     * @param resp     * @throws ServletException     * @throws IOException     *&#x2F;    protected void setAttribute(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        req.getSession().setAttribute(&quot;key1&quot;, &quot;value1&quot;);        resp.getWriter().write(&quot;已经往Session中保存了数据&quot;);    &#125;    protected void defaultLife(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        &#x2F;&#x2F; 获取了Session的默认超时时长        int maxInactiveInterval &#x3D; req.getSession().getMaxInactiveInterval();        resp.getWriter().write(&quot;Session的默认超时时长为：&quot; + maxInactiveInterval + &quot; 秒 &quot;);    &#125;    protected void life3(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        &#x2F;&#x2F; 先获取Session对象        HttpSession session &#x3D; req.getSession();        &#x2F;&#x2F; 设置当前Session3秒后超时        session.setMaxInactiveInterval(3);        resp.getWriter().write(&quot;当前Session已经设置为3秒后超时&quot;);    &#125;    protected void deleteNow(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        &#x2F;&#x2F; 先获取Session对象        HttpSession session &#x3D; req.getSession();        &#x2F;&#x2F; 让Session会话马上超时        session.invalidate();        resp.getWriter().write(&quot;Session已经设置为超时（无效）&quot;);    &#125;    &#x2F;**     * 获取Session域中的数据     * @param req     * @param resp     * @throws ServletException     * @throws IOException     *&#x2F;    protected void getAttribute(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        Object attribute &#x3D; req.getSession().getAttribute(&quot;key1&quot;);        resp.getWriter().write(&quot;从Session中获取出key1的数据是：&quot; + attribute);    &#125;    protected void createOrGetSession(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        &#x2F;&#x2F; 创建和获取Session会话对象        HttpSession session &#x3D; req.getSession();        &#x2F;&#x2F; 判断 当前Session会话，是否是新创建出来的        boolean isNew &#x3D; session.isNew();        &#x2F;&#x2F; 获取Session会话的唯一标识 id        String id &#x3D; session.getId();        resp.getWriter().write(&quot;得到的Session，它的id是：&quot; + id + &quot; &lt;br &#x2F;&gt; &quot;);        resp.getWriter().write(&quot;这个Session是否是新创建的：&quot; + isNew + &quot; &lt;br &#x2F;&gt; &quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-浏览器和Session之间关联的技术"><a href="#4-浏览器和Session之间关联的技术" class="headerlink" title="4.浏览器和Session之间关联的技术"></a>4.浏览器和Session之间关联的技术</h4><p>Session技术，底层其实是基于Cookie技术来实现的。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304192649228.png" alt="image-20220304192649228"></p><p>所以浏览器关闭后这个session就找不到了，因为这个session对应的cookie已经删除，cookie默认在浏览器关闭后删除。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220304214853919.png" alt="image-20220304214853919"></p><p>Tomcat内存中还有上次session 的id对应的session内容 但是新的的请求本身没有id值（cookie中JSESSION）,所以Tomcat重新创建  所有session要有超时时间。</p><p>cookie用来自动登录，session用来保持登录状态</p><p>因为http是无状态的，没法保存信息，但每次浏览器请求数据时，可能需要携带大量重复信息</p><p>所以就需要cookie和session来存储这些信息【比如登陆的用户信息等】</p><p>其中cookie是客户端用于记录，session用于服务端记录</p><h2 id="十四-Filter"><a href="#十四-Filter" class="headerlink" title="十四.Filter"></a>十四.Filter</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305160643394.png" alt="image-20220305160643394"></p><h4 id="1-使用"><a href="#1-使用" class="headerlink" title="1.使用"></a>1.使用</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305161011925.png" alt="image-20220305161011925"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305163127065.png" alt="image-20220305163127065"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>donggei<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * doFilter方法，专门用于拦截请求。可以做权限检查     * @param request     * @param response     * @param chain     * @throws IOException     * @throws ServletException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>        <span class="token class-name">Object</span> user <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//说明没有登入</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//这行代码很重要 没有得话将不会继续访问应该访问的页面</span>            <span class="token comment">//让程序继续往下访问用户的目标资源</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.donggei.servlet.AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/a.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>规定那些路径要检查，检查的Filter类是那个。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305165411440.png" alt="image-20220305165411440"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305165808793.png" alt="image-20220305165808793"></p><h4 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2.生命周期"></a>2.生命周期</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305171029225.png" alt="image-20220305171029225"></p><h4 id="3-FilterConfig类"><a href="#3-FilterConfig类" class="headerlink" title="3.FilterConfig类"></a>3.FilterConfig类</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305171456217.png" alt="image-20220305171456217"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305171821496.png" alt="image-20220305171821496"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305171639399.png" alt="image-20220305171639399"></p><h4 id="4-FilteChain类"><a href="#4-FilteChain类" class="headerlink" title="4.FilteChain类"></a>4.FilteChain类</h4><p>chain：链   过滤器链（多个过滤器如何工作）</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305172356199.png" alt="image-20220305172356199"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305172924710.png" alt="image-20220305172924710"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305173124931.png" alt="image-20220305173124931"></p><h4 id="6-Filter的拦截路径"><a href="#6-Filter的拦截路径" class="headerlink" title="6.Filter的拦截路径"></a>6.Filter的拦截路径</h4><p>精确匹配</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305174017603.png" alt="image-20220305174017603"></p><p>目录匹配</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305174024550.png" alt="image-20220305174024550"></p><p>后缀名匹配</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305174638965.png" alt="image-20220305174638965"></p><p>例:</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305174308257.png" alt="image-20220305174308257"></p><h2 id="十五-事务管理"><a href="#十五-事务管理" class="headerlink" title="十五.事务管理"></a>十五.事务管理</h2><h3 id="1-知识储备"><a href="#1-知识储备" class="headerlink" title="1.知识储备"></a>1.知识储备</h3><p>如果忘记了事务的操作 点击：<a href="https://www.cnblogs.com/zzzzw/p/4869334.html">java中的数据库事务处理</a></p><p>事务管理遇到的问题：</p><p>【图是Controller 就是Servlet】 </p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220306151920252.png" alt="image-20220306151920252"></p><p>解决方法：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220306152554571.png" alt="image-20220306152554571"></p><p>过滤器的典型应用：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220306153108096.png" alt="image-20220306153108096"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220306153553607.png" alt="image-20220306153553607"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220306154323753.png" alt="image-20220306154323753"></p><h3 id="2-Threadlocal"><a href="#2-Threadlocal" class="headerlink" title="2.Threadlocal"></a>2.Threadlocal</h3><p>一个线程绑定了一个值，单独线程内不管怎么操作不会影响这个线程的数据传递</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220305190321498.png" alt="image-20220305190321498"></p><h3 id="3-例子："><a href="#3-例子：" class="headerlink" title="3.例子："></a>3.例子：</h3><p>服务层出错，抛到了web（Servlet）层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用DbUtils操作数据库</span>    <span class="token keyword">private</span> <span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * update() 方法用来执行：Insert\Update\Delete语句     *     * @return 如果返回-1,说明执行失败&lt;br/>返回其他表示影响的行数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查询返回一个javaBean的sql语句     *     * @param type 返回的对象类型     * @param sql  执行的sql语句     * @param args sql对应的参数值     * @param &lt;T>  返回的类型的泛型     * @return     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">queryForOne</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查询返回多个javaBean的sql语句     *     * @param type 返回的对象类型     * @param sql  执行的sql语句     * @param args sql对应的参数值     * @param &lt;T>  返回的类型的泛型     * @return     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 执行返回一行一列的sql语句     * @param sql   执行的sql语句     * @param args  sql对应的参数值     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryForSingleValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           orderId <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>cart<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">commitAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">rollbackAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是对dao层的Base进行了修改，继承了BaseDao的DaoImpl类，执行数据库操作时如果发生了异常，就会先高层Service抛出</p><p>RuntimeException（运行时异常一般是不用捕捉的，我们这里对这个Service进行了捕捉）,发生异常时就回滚，整个Service结束后才提交事务。</p><p>Runtime异常会自己先上抛出；需要我们手动捕捉</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220306212914360.png" alt="image-20220306212914360"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DruidDataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">></span></span> conns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 读取 jdbc.properties属性配置文件</span>            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从流中加载数据</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建 数据库连接 池</span>            dataSource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DruidDataSource</span><span class="token punctuation">)</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取数据库连接池中的连接     * @return 如果返回null,说明获取连接失败&lt;br/>有值就是获取连接成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> conns<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数据库连接池中获取连接</span>                conns<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存到ThreadLocal对象中，供后面的jdbc操作使用</span>                conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置为手动管理事务</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提交事务，并关闭释放连接     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">commitAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> conns<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果不等于null，说明 之前使用过连接，操作过数据库</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 提交 事务</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭连接，资源资源</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 一定要执行remove操作，否则就会出错。（因为Tomcat服务器底层使用了线程池技术）</span>        conns<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 回滚事务，并关闭释放连接     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rollbackAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> conns<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果不等于null，说明 之前使用过连接，操作过数据库</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回滚事务</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭连接，资源资源</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 一定要执行remove操作，否则就会出错。（因为Tomcat服务器底层使用了线程池技术）</span>        conns<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实际项目中的应用"><a href="#4-实际项目中的应用" class="headerlink" title="4.实际项目中的应用"></a>4.实际项目中的应用</h3><p>例子中的方法 很笨拙，每次用Service都需要异常处理</p><p>使用Filter过滤器统一给所有的Service方法都加上try-catch。来进行实现的管理。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307141550021.png" alt="image-20220307141550021"></p><p>创建事务过滤器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">commitAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 提交事务</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">rollbackAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回滚事务</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//把异常抛给Tomcat管理展示友好的错误页面</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有请求都加上了事务管理</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>TransactionFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.donggei.filter.TransactionFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>TransactionFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- /* 表示当前工程下所有请求 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特别注意的是</strong>：如果 从 BaseDao 一层一层向外抛的过程中 有try..catch..的地方 还要再向外抛出</p><p>eg:BaseServlet中 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> action <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取action业务鉴别字符串，获取相应的业务 方法反射对象</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(method);</span>            <span class="token comment">// 调用目标业务 方法</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//  ！！增加的部分！！</span>            <span class="token comment">// 向上抛给filter</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">commitAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 提交事务</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">rollbackAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回滚事务</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//把异常抛给Tomcat管理展示友好的错误页面</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再在web.xml配置中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--error-page标签配置，服务器出错之后，自动跳转的页面--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--error-code表示错误类型  是固定的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--location标签表示。要跳转去的页面路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/pages/error/error500.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--error-page标签配置，服务器出错之后，自动跳转的页面--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--error-code是错误类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--location标签表示。要跳转去的页面路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/pages/error/error404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十六-监听器—Listener"><a href="#十六-监听器—Listener" class="headerlink" title="十六.监听器—Listener"></a>十六.监听器—Listener</h2><p><a href="https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/">相关教程地址</a></p><p><img src="C:\Users\DONG\AppData\Roaming\Typora\typora-user-images\image-20220308110815997.png" alt="image-20220308110815997"></p><blockquote><p>①ServletContextListener<br>作用：监听ServletContext对象的创建与销毁</p><pre><code>tomcat容器启动时 就会创建Servlet上下文对象tomcat关闭时销毁</code></pre><p>②HttpSessionListener<br>作用：监听HttpSession对象的创建与销毁<br>③ServletRequestListener<br>作用：监听ServletRequest对象的创建与销毁</p></blockquote><blockquote><p>④ServletContextAttributeListener<br>作用：监听ServletContext中属性的创建、修改和销毁<br>⑤HttpSessionAttributeListener<br>作用：监听HttpSession中属性的创建、修改和销毁<br>⑥ServletRequestAttributeListener<br>作用：监听ServletRequest中属性的创建、修改和销毁</p></blockquote><blockquote><p>⑦HttpSessionBindingListener<br>作用：监听某个对象在Session域中的创建与移除<br>⑧HttpSessionActivationListener<br>作用：监听某个对象在Session中的序列化与反序列化。</p><p>序列化:钝化到磁盘时              反序列化:活化到内存时</p></blockquote><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220308125526434.png" alt="image-20220308125526434"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220308125614662.png" alt="image-20220308125614662"></p><h2 id="十七-JSON"><a href="#十七-JSON" class="headerlink" title="十七.JSON"></a>十七.JSON</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307183305401.png" alt="image-20220307183305401"></p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307184407356.png" alt="image-20220307184407356"></p><h3 id="2-访问"><a href="#2-访问" class="headerlink" title="2.访问"></a>2.访问</h3><p>alert(typeof(jsonObj));// object  json就是一个对象</p><blockquote><p>json本身是一个对象。<br>json中的key我们可以理解为是对象中的一个属性。<br>json中的key访问就跟访问对象的属性一样: json 对象.key</p></blockquote><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307185438584.png" alt="image-20220307185438584"></p><p>下面例子中和上面定义时是相同的</p><p>json中的数组 和 arr 是一样的，也有相同的操作</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307185542229.png" alt="image-20220307185542229"></p><p>值是数组的取法</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307185746273.png" alt="image-20220307185746273"></p><p>值是 一个json的取法</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307221811919.png" alt="image-20220307221811919"></p><p>值是一个 json数组的情况</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307222456942.png" alt="image-20220307222456942"></p><h3 id="3-json的两个常用方法"><a href="#3-json的两个常用方法" class="headerlink" title="3.json的两个常用方法"></a>3.json的两个常用方法</h3><p> json的存在有两种形式。</p><ul><li>一种是:对象的形式存在，我们叫它json对象。</li><li>一种是:字符串的形式存在，我们叫它json字符串。</li></ul><blockquote><p>一般我们要操作json中的数据的时候，需要json对象的格式。<br>一般我们要 在客户端和服务器之间进行数据交换的时候，使用json字符串。</p><p>JSON.stringify()把json对象转换成为json字符串<br>JSON.parse()把json字符串转换成为json对象</p></blockquote><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307225731756.png" alt="image-20220307225731756"></p><p>就是没有格式的 没有换行的 直接输出 原本的内容</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307230443502.png" alt="image-20220307230443502"></p><h3 id="4-JSON在java中的使用"><a href="#4-JSON在java中的使用" class="headerlink" title="4.JSON在java中的使用"></a>4.JSON在java中的使用</h3><p>   使用了google的Gson<img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220307231106153.png" alt="image-20220307231106153"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>javaBean 和json的互转</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"好帅!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建Gson对象实例</span>       <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// toJson方法可以把java对象转换成为json字符串</span>       <span class="token class-name">String</span> personJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;"id":1,"name":"好帅!"&#125;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// fromJson把json字符串转换回Java对象</span>       <span class="token comment">// 第一个参数是json字符串</span>       <span class="token comment">// 第二个参数是转换回去原来的Java对象类型</span>       <span class="token class-name">Person</span> person1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>List 和json的互转</p><p>先写一个空的类 需要基础com.google.gson.reflect.TypeToken，并且传入确定的参数 ，后面转化时的type需要用到（这个方法可以）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>json</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">TypeToken</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonListType</span> <span class="token keyword">extends</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把List转换为json字符串</span>        <span class="token class-name">String</span> personListJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name": "AA"&#125;,&#123;"id":2,"name":"BB"&#125;]</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PersonListType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>map和json的互转</p><p>也可以写成 匿名内部类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>json</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">TypeToken</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonMapType</span> <span class="token keyword">extends</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"A好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"B也好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把 map 集合转换成为 json字符串</span>        <span class="token class-name">String</span> personMapJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personMap<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMapJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;"1":&#123;"id":1,"name":"国哥好帅"&#125;,"2":&#123;"id":2,"name":"康师傅也好帅"&#125;&#125;</span><span class="token comment">//        Map&lt;Integer,Person> personMap2 = gson.fromJson(personMapJsonString, new PersonMapType().getType());</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personMap2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personMapJsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMap2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> personMap2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214103144423.png" alt="image-20220214103144423"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214112643221.png" alt="image-20220214112643221"></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;  &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;servlet_demo01&#x2F;uploadServlet&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;    用户名: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;      头像:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;photo&quot;&gt;&lt;br&gt;      &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;  &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"UploadServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/uploadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214133131469.png" alt="image-20220214133131469"></p><p>提交表单后：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"UploadServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/uploadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//multipart把多个类型的标签数据都合到一起了，都是二进制流传输的</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletInputStream</span> inputStream <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取的就是请求头  </span>        <span class="token comment">//-----------------------------372510948234374483034027680384</span>        <span class="token comment">//Content-Disposition: form-data; name="username"</span>        <span class="token comment">//</span>        <span class="token comment">//das</span>        <span class="token comment">//-----------------------------372510948234374483034027680384</span>        <span class="token comment">//Content-Disposition: form-data; name="photo"; filename="20210803085403.png"</span>        <span class="token comment">//Content-Type: image/png</span>        <span class="token comment">//</span>        <span class="token comment">//�PNG</span>        <span class="token comment">//</span>        <span class="token comment">//IHDR  r     K�H�    IDATx��Y�Ǖ&amp;x�c���3$�� A�%Q�K��T��ں�a����L��z�1˙�9�R3g��K�]��,I��*�I��w 3������]wO�DI@��</span>        <span class="token comment">//D�/�\�f��>�ׂ��?GQ��P�P�X�R�B�(�V�M�v���&#123;�VVVh&#125;&#125;�i``�*�</span>        <span class="token comment">//i���bU|v����Y(�r=����'�/ԁ�tccC��z�NCCCv��������������������xT����8��@F0�!</span>        <span class="token comment">//%�3�O�|�ľ�.l,�d�a��8!Q_�%��6�%�^;�M?�>.//���cccT)W�@�z���*P�&#125;v�a�~�7��@]�W�����w�2H��7�~Z�$p�Kz��S�^S�ݦ_��]z�ͷ��w���^�:M��-bE�m��]j57iqqQ��h4�om�֯6��>��WO�9�r��>!�]rي,�[���</span>        <span class="token comment">//��9����&amp;�G�����i��͡�C$������Xi�>@�z�:&#125;Ȍ���hE��w�M; 6:%����"w� �߁�U��=c3ҿ@�;��9��R;�����U�Nm��mA��G�L&#125;3��DpH�P^��!�0��C���!:��ie1���  �n2J��'�Y������F(D�L�0Y��g</span>        <span class="token comment">//bO�������!$�C*q�S�C��ũ�b�Hz�L*��L#�LY�=1��.A�QxJ�%O�� �RID�DJ9Ԥ̤�.i�2v�'�k�DVtJ�p �&#123;ւ���A��c�F�.D7��w� @��T��hlb�������@�J�C�f�F�eܳdvR�K���;����z��;u|lˣ&#123;֙� zD5m&#123;���&#123;�繭R�&lt;���������2B�]14Pd&#123;���Y�^��3���A�|>���¨�q"G��;U�J��*6�mW[��a��!Eǎ&lt;���������s���Ƚ3NE 3c��yD�$GΝa�X�%[ǳ�?�</span>        <span class="token comment">//A/)�嚒   On#��!�tb��a*�'RE���������� N���Yο잀�cRe��mp�t��YR�U�BN�O�Ѓk�䫹 �� �����p�#�vۀ&#123;t�˾&#125;���#7�WM�+�t�</span>        <span class="token comment">//�e�l6�>�Iw��M�Cڧ��v�M��rO��$�>׺v�* ��J����������w�HD�H�muؾ8W.�Ѩ�X޻i�V�L�l�j</span>        <span class="token comment">//�n�c�(���VWd^�k�z</span>        <span class="token comment">//ݍ��Y��$�A�����c��ї�ۂ�l�+�\ޑ ���x���%i����%FJ-���m\Rʼ�4�2q�J��#��KD�?�Ff��H�  ��� ޹&#123;%�;�|�K��������򾧜��%?3��/aݏ�P4i�����-$�=���V�Kss�2F�'U^4QH�A�L1�E��zDRL#E���rr�wxP!g�bOF ��=B�F�U�>҈��E�l�bz&lt;OvK&#123;���j��>����@�O���  ��ǎ[N��U�����</span>        <span class="token comment">//`AZ��D����#����&#125;wm�؂�ߍ�����+���u ��m�MW�9�L��ۡ8>>!bg?����]�aٷ�c����o.����9���9yW��_�Gy$����[K�</span>        <span class="token comment">//Sw�1����b��$*(�nr6�0</span>        <span class="token comment">//���qY]����v�u������G�Uu�*�N�!R"ݝ;&amp;u� d궾��������S�>�*?�Z^E����p�5&#125; �))���+�n�Xv���ǷU�WO</span>        <span class="token comment">//&lt;��s��x���F\�k��C\�W*�d�b�D�r���cw�q(q'E�v6�@*�Ɓ��F�@ȉzj�i���>]�3vǊ6gŵ^1��ǣ�:���F�P�j5J�/��3��ܟ��F�d�\qb�ay�mu?蕞�>�n�2�]&lt;���֧��;Vۋ��е(�D����B����������������OL�����`g&#123;�x|�Ȏ�+�&lt;~$X^�,�Q;��i�����'a7v�ҬjM���V�"���� ����H��������F����>�R��0�l��&#123;Q6�����=�Oj�]�ot�do��&lt;�Bj�I��`��M��bG��U����?�󮉷��=�6P�T�����F&#123;xxxxxxxxxxxxxx&lt;��4��I�B���O2�q&lt;�����#&lt;>^d����MI�q�-/��ݟ����vJP�b�&#123;+�T��@�J5��ʤ�K��D\^D]D�t#</span>        <span class="token comment">//</span>        <span class="token comment">//%>U�I�y��8�у�7Aأ� �~��4��h�gD��GLU�G�jB����4w�O��_�4��&amp;E`��:BN��u�&amp;�O�f�l�^��wb���o_C::A�+�m�&amp;t����_�G:�0g��~��r瑇���������������OD��RiB���qދǹ�Y!�a��aڵ��EYQ������#HD�8</span>        <span class="token comment">// �h*����m�&lt;</span>        <span class="token comment">//��H�l�����=>�t׫ldN�\�|N�&#125;`����&amp;����_�X�TT+��,"����&lt;t�O�  ����]�&#123;kF��2��+]!'/�aVl����إ6Hg|����s�S��a�G���5&#125;�~�&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;/|b��Fv&#125;���o���yl��>=�t�pR*�$-�&#123;�N���|X(��p��û�+�&#123;4=�v&#125;�kQ����ASC���K����k�H�   �Ѳ)���miw�</span>        <span class="token comment">//�6!u����->Վ�>qHQЕ(�B1�ՍUZ_��z�K��</span>        <span class="token comment">//��`��u:|����)&#125;��G����żs��,���oympm</span>        <span class="token comment">//��/����4����3W����hrl��kpGƽ����t��%��7��D&lt;���y���Ȯ��C�|w�ɖ�u���ޣ��9�?�y=�9�J��������(yg������ۮl���m��!</span>        <span class="token comment">//���7� �m�Q�i��N����0���;"@��-Ps�T�FFF���&#125;T���  |iehĦl�U�̆m!�hd    l��q�</span>        <span class="token comment">//DD# �l��h�xqa������jS���@�G=�N[�����CIݮ���ʕ�"�@�2)�L91E����9���ZnV&lt;H�i��@�d__[������H���ѱ��i��'-W$�΅��鎏;����\�;O�L�)� &#125;�IR���"��ܦ�+�Ҏ���ٍ�&amp;�/l��lp�� d_n���2�V[��z���&#123;���w��%�WW.ߠՕ6�� �E&#123;��H�C�419&amp;�H�.�72"+4�?�.�?��:t��E&#123;�E�Y��Y�15y�F�fX۰���(�ʕ+��_�J"���E��[�pV&lt;q9�/U��4�x�rΞ��ח�v��m۔.��V:*h�&amp;����o�z��u�T�N�C�&lt;�_�_EH�ڷ_�l�|�_E</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对流的处理：</p><p>导包：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214134805002.png" alt="image-20220214134805002"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214135141449.png" alt="image-20220214135141449"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214135305519.png" alt="image-20220214135305519"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span></span><span class="token class-name">FileItem</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span></span><span class="token class-name">FileItemFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>disk<span class="token punctuation">.</span></span><span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletFileUpload</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"UploadServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/uploadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1 判断上传的数据是否是多段的，多段的应该是上传文件的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ServletFileUpload</span><span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//创建fileItemFactory工厂实现类</span>            <span class="token class-name">FileItemFactory</span> fileItemFactory <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建用于解析上传数据的工具类servletFileUpload</span>            <span class="token class-name">ServletFileUpload</span> servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>fileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//解析上传的数据，得到每一个表单项FileItem</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileItem</span><span class="token punctuation">></span></span> fileItems <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//循环判断，每一个表单项，是普通类型，还是上传的文件</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> fileItem <span class="token operator">:</span> fileItems<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//普通</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的name属性值:"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//参数防止乱码</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的value属性值:"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的name属性值:"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名:"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214150017071.png" alt="image-20220214150017071"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220214154644527.png" alt="image-20220214154644527"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"DownloadServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/downloadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownloadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HelloServlet</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、获取要下载的文件名</span>        <span class="token class-name">String</span> downloadFileName <span class="token operator">=</span> <span class="token string">"abc.png"</span><span class="token punctuation">;</span>        <span class="token comment">//2、 读取要下载的文件内容</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/file/"</span><span class="token operator">+</span>downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取要下载文件的类型</span>        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4、 在回传前，通过响应头告诉客户端返回的数据类型</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5、 还要告诉客户端收到的数据是用于下载使用(还是使用响应头)</span>        <span class="token comment">//filename表示指定下载的文件名  下载的文件名是在响应头里设置的</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename= "</span><span class="token operator">+</span>downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、 把下载的文件内容回传给客户端</span>        <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">,</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url编码 解决中文下载名乱码：</p><p>http协议没有支持中文</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220224110210639.png" alt="image-20220224110210639"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220224110408753.png" alt="image-20220224110408753"></p><p>以前火狐需要使用下面的方法（现在URLEncoder也行）</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220224113859341.png" alt="image-20220224113859341"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb学习笔记—1</title>
      <link href="/2022/02/14/javaWeb%E5%AD%A6%E4%B9%A0%E2%80%941/"/>
      <url>/2022/02/14/javaWeb%E5%AD%A6%E4%B9%A0%E2%80%941/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Y7411K7zz">学习视频地址 Java Web 尚硅谷</a></p><h1 id="JavaWeb—1"><a href="#JavaWeb—1" class="headerlink" title="JavaWeb—1"></a>JavaWeb—1</h1><h2 id="一-html"><a href="#一-html" class="headerlink" title="一.html"></a>一.html</h2><p>基本规范</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220126204658884.png" alt="image-20220126204658884"></p><p>注释：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- --></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器查看源码可见</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220126205223304.png"></p><ul><li>单标签</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220126205848457.png" alt="image-20220126205848457"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span> 水平线<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>双标签</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220126205908009.png" alt="image-20220126205908009"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大佬'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#faebd7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 基本属性和事件属性--></span>    hello    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大佬'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">></span></span> hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性必须有值 必须加双引号</p><p>浏览器会帮你解释 当时还是要保证语法正确</p><h3 id="1-字体标签"><a href="#1-字体标签" class="headerlink" title="1.字体标签"></a>1.字体标签</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220126212211789.png" alt="image-20220126212211789"></p><h3 id="2-字符实体"><a href="#2-字符实体" class="headerlink" title="2. 字符实体"></a>2. 字符实体</h3><p>常用的特殊字符集</p><p>类似于转义字符</p><ul><li><p>在html 空白连续空格 只会显示一个</p><p>那么就需要用多个 <code>&amp;nbsp; </code>表示多个空格</p></li></ul><h3 id="3-标题标签"><a href="#3-标题标签" class="headerlink" title="3.标题标签"></a>3.标题标签</h3><p>h1 到 h6</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 默认左对齐--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>标题4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>标题5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>标题6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-超链接"><a href="#4-超链接" class="headerlink" title="4.超链接"></a>4.超链接</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--当前页面跳转 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--新页面跳转 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>必须加https://</p><p>错误：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220127171928670.png" alt="image-20220127171928670"></p><h3 id="5-列表标签"><a href="#5-列表标签" class="headerlink" title="5.列表标签"></a>5.列表标签</h3><ul><li><p>有序列表</p></li><li><p>无序列表</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">有序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> abc <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-img标签"><a href="#6-img标签" class="headerlink" title="6. img标签"></a>6. img标签</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">heigth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src属性设置路径</p><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><p>在web中路径两种分为 </p><ul><li><p>相对路径</p><p>.    表示当前文件所在的目录</p><p>..  表示当前文件所在的上一级目录</p><p>文件名  表示当前文件所在的目录的文件 相当于./文件名 省略了./</p></li><li><p>绝对路径</p><p>格式：<a href="http://ip:port/工程名/资源路径">http://ip:port/工程名/资源路径</a></p></li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220127174410965.png" alt="image-20220127174410965"></p><p>在javaSE也分为这两种</p><ul><li><p>相对路径</p><p>从工程名开始算</p></li><li><p>绝对路径</p><p>盘符+文件名</p></li></ul><p><code>&lt;img src=&quot;../img/img.png&quot; width=&quot;500&quot; heigth=&quot;500&quot; border=&quot;1&quot; alt=&quot;找不到图片&quot;&gt;</code></p><p>alt属性：找不到路径图片时的代替显示的文本</p><p>border属性：边框大小 默认0</p><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h3><pre class="line-numbers language-htm" data-language="htm"><code class="language-htm">&lt;table align&#x3D;&quot;center&quot; border&#x3D;&quot;1&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;300&quot; cellspacing&#x3D;&quot;0&quot;&gt;    &lt;tr&gt;        &lt;td align&#x3D;&quot;center&quot;&gt;&lt;b&gt;1.1&lt;&#x2F;b&gt;&lt;&#x2F;td&gt;        &lt;th&gt;1.2&lt;&#x2F;th&gt;        &lt;th&gt;1.3&lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;    &lt;tr&gt;        &lt;td&gt;3.1&lt;&#x2F;td&gt;        &lt;td&gt;2.2&lt;&#x2F;td&gt;        &lt;td&gt;2.3&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;    &lt;tr&gt;        &lt;td&gt;3.1&lt;&#x2F;td&gt;        &lt;td&gt;3.2&lt;&#x2F;td&gt;        &lt;td&gt;3.3&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;    &lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-<th></th>```表头相当于```" data-language="<th></th>```表头相当于```"><div class="caption"><span><td align</span></div><code class="language-<th></th>```表头相当于```">&#96;&#96;&#96;cellspacing&#x3D;&quot;0&quot;&#96;&#96;&#96;单元格间距为0 &#96;&#96;&#96;html &lt;body&gt; &lt;table align&#x3D;&quot;center&quot; border&#x3D;&quot;1&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;300&quot; cellspacing&#x3D;&quot;0&quot;&gt;     &lt;tr &gt;         &lt;th colspan&#x3D;&quot;2&quot;&gt;1.1&lt;&#x2F;th&gt;         &lt;th&gt;1.2&lt;&#x2F;th&gt;      &lt;&#x2F;tr&gt;     &lt;tr&gt;         &lt;td colspan&#x3D;&quot;2&quot;&gt;3.1&lt;&#x2F;td&gt;         &lt;td&gt;2.2&lt;&#x2F;td&gt;      &lt;&#x2F;tr&gt;     &lt;tr&gt;         &lt;td rowspan&#x3D;&quot;2&quot;&gt;3.1&lt;&#x2F;td&gt;         &lt;td&gt;3.2&lt;&#x2F;td&gt;         &lt;td&gt;3.3&lt;&#x2F;td&gt;     &lt;&#x2F;tr&gt;     &lt;tr&gt;         &lt;td&gt;4.2&lt;&#x2F;td&gt;         &lt;td&gt;4.3&lt;&#x2F;td&gt;     &lt;&#x2F;tr&gt;     &lt;&#x2F;table&gt; &lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跨行  和 跨列 可以对同一个td使用。</p><h3 id="8-iframe框架标签（内嵌窗口）"><a href="#8-iframe框架标签（内嵌窗口）" class="headerlink" title="8.iframe框架标签（内嵌窗口）"></a>8.iframe框架标签（内嵌窗口）</h3><p>在页面开辟一个小区域  比如b站pc端选集位置</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    我是一个单独的完整的页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo标题.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220127195900925.png" alt="image-20220127195900925"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo标题.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo列表.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>demo列表.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo标题.html<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>demo标题.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表格.html<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>表格.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220127205127797.png" alt="image-20220127205127797"></p><p>使用 name和target 联合， 改变iframe内容  </p><h3 id="9-表单"><a href="#9-表单" class="headerlink" title="9.表单"></a>9.表单</h3><p>收集信息 发送给服务器</p><p> 1.文本框<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;默认值&quot;&gt;&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> 2.密码框（掩码）<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;password&quot; value&#x3D;&quot;默认值&quot;&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> 3.单选按钮<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; &gt; &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot;&gt;&lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br> 4.下拉选择<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;select&gt;  &lt;option&gt;abc&lt;&#x2F;option&gt;  &lt;option&gt;abc&lt;&#x2F;option&gt;  &lt;option&gt;abc&lt;&#x2F;option&gt;  &lt;&#x2F;select&gt;&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br> 5.复选框<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;checkbox&quot;&gt;abc   (abc 为举例)&lt;input type&#x3D;&quot;checkbox&quot;&gt;abc  &lt;input type&#x3D;&quot;checkbox&quot;&gt;abc&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br> 6.文本域<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;textarea row&#x3D;&quot;5&quot; cols&#x3D;&quot;50&quot;&gt;  abc  &lt;&#x2F;textarea&gt;&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br> 7.文件上传<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;file&quot;&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> 8.提交按钮<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;abc&quot;&gt;&lt;!--acb会呈现在按钮上 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> 9.重置按钮<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;abc&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> 10.如何跳转网页<br> <pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;form action&#x3D;&quot;receive.html&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;注册&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128092132365.png" alt="image-20220128092132365"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128092723260.png" alt="image-20220128092723260"></p><ol start="11"><li>提交</li></ol><ul><li>get</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128094217694.png"></p><p>注意：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128094251663.png"></p><p>区别：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128094731598.png"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128094627599.png"></p><h3 id="10其他"><a href="#10其他" class="headerlink" title="10其他"></a>10其他</h3><pre><code>        &lt;p&gt;这是一个段落&lt;/p&gt;        &lt;div&gt;这是一个块&lt;/div&gt;        &lt;span&gt;密码必须是6位&lt;/span&gt;        &lt;span&gt;用户名不为空&lt;/span&gt;        &lt;label&gt;这个是标签 &lt;/label&gt;</code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128095104991.png"></p><h2 id="二-CSS"><a href="#二-CSS" class="headerlink" title="二.CSS"></a>二.CSS</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128101128556.png" alt="image-20220128101128556"></p><ul><li>行内样式：放在标记的style属性里，行内样式优先级最高</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span> div标签1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span> div标签2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span> span标签1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> span标签2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>页内样式：放在head之间，用style标记</p><p>style 里的属于css 注释使用<code>/* 注释 */</code></p></li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128100731831.png" alt="image"></p><ul><li>外部样式：放在独立的.css文件中，在网页上用link标签引入</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128102639261.png" alt="image-20220128102639261"></p><ul><li>CSS选择器（*****）</li></ul><ol><li>标记（标签）选择器 如上</li><li>id选择器</li></ol><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128103747597.png" alt="image-20220128103747597">3. class选择器</p><p>一个标签只能使用一个id选择器，但是可以使用多个class</p><p>ID和class的优先级不同，当你同时使用两个时，ID优先作用</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128104547374.png" alt="image-20220128104547374"></p><ol start="4"><li>组合选择器</li></ol><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128112029056.png" alt="image-20220128112029056"></p><p>下图是 是这个类 然后  后代必须a标签， a的后代必须有span标签，满足所有条件的使用这个样式。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203174903212.png" alt="image-20220203174903212"></p><h2 id="三-JavaScript"><a href="#三-JavaScript" class="headerlink" title="三.JavaScript"></a>三.JavaScript</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128112856807.png"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128113005349.png"></p><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><p>1.交互性(它可以做的就是信息的动态交互)<br>2.安全性 (不允许直接访问本地硬盘)<br>3.跨平台性(只要是可以解释JS的浏览器都可以执行，和操作系统无关)</p><h3 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2.使用方式"></a>2.使用方式</h3><ul><li>使用script标签<pre class="line-numbers language-none"><code class="language-none">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;alert(&quot;hello javaScript&quot;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>使用script标签 单独引入js代码文件 与css类似</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128114844337.png" alt="image-20220128114844337"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128115018913.png" alt="注意"></p><p>可以再写一个script标签（先执行前面的）</p><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h3><p>​        <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128142315864.png" alt="image-20220128142315864"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128142530473.png" alt="image-20220128142530473"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>变量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token keyword">var</span> i<span class="token punctuation">;</span>        i<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">=</span><span class="token string">"asd"</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128143903142.png" alt="image-20220128143903142"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128144110912.png" alt="image-20220128144110912"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">;</span>       <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128144402575.png" alt="image-20220128144402575"></p><p>NaN 是非数字 非数值。</p><h3 id="4-关系运算"><a href="#4-关系运算" class="headerlink" title="4.关系运算"></a>4.关系运算</h3><p>基本与Java一样</p><p>不一样的：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128144626934.png" alt="image-20220128144626934"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128144811810.png"></p><h3 id="5-逻辑运算"><a href="#5-逻辑运算" class="headerlink" title="5.逻辑运算"></a>5.逻辑运算</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128145318803.png" alt="image-20220128145318803"></p><p>nan也是</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128145355855.png" alt="image-20220128145355855"></p><p>进行布尔值的且和或的运算。当运算到某一个变量就得出最终结果之后，就返回哪个变量</p><h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6.数组"></a>6.数组</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128164722170.png" alt="image-20220128164722170"></p><p>元素类型可以不一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span>        <span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读操作辉自动扩容，读的时候越界不会扩容（undefined）</p><h3 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128170144666.png" alt="image-20220128170144666"></p><p>返回值 直接retun 不需要说明类型，形参直接写名字， 不需要说明类型</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无参函数调用"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// fun();</span>    <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"有参函数调用 a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// fun2(1,5);</span>    <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//130</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128170958633.png" alt="image-20220128170958633"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128171158561.png" alt="image-20220128171158561"></p><ul><li><p>java 函数可以重载 <strong>js不可以函数重载</strong>，会覆盖前面的函数</p></li><li><p>隐形参数</p><p>就是在function函数中不需要定义,但却可以直接用来获取所有参数的变量。操作类似数组<br>像java中的可变长参数</p></li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128171713176.png" alt="image-20220128171713176"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Arguments]  0</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Arguments] 3</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就算是fun(a,b,c);有参数 也不会影响arguments使用。a 就是arguments[0];</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128172911862.png" alt="image-20220128172911862"></p><p>如果 数值和字符串相加  和java一样，就是拼接 </p><h3 id="8-js的自定义对象"><a href="#8-js的自定义对象" class="headerlink" title="8. js的自定义对象"></a>8. js的自定义对象</h3><ul><li>object形式的自定义对象</li></ul><p>对象的定义：</p><p>​    var 变量名 = new Object(); //对象实例（）</p><p>​    变量名.属性名 =值；//定义一个属性</p><p>​    变量名.函数名 = function（）{}//定义一个函数</p><p>对象的访问：</p><p>​    变量名.属性名 </p><p>​    变量名.函数名</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128174917894.png" alt="image-20220128174917894"></p><ul><li>{}花括号形式的自定义对象</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128195639187.png" alt="image-20220128195639187"></p><p>属性和方法之间，属性和属性之间 用逗号隔开 最后一个不用。</p><p>对象的访问：</p><p>​    变量名.属性名 </p><p>​    变量名.函数名</p><h3 id="9-js的事件"><a href="#9-js的事件" class="headerlink" title="9.js的事件"></a>9.js的事件</h3><p>电脑输入设备和页面进行的交互的响应叫事件。点击，双击，划过 键盘点击等等</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128200534256.png" alt="image-20220128200534256"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220128200920821.png" alt="image-20220128200920821"></p><ul><li><p>onload</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--静态注册onload--></span><span class="token comment">&lt;!--tip:最外层是双引号那么里面就得用单引号不然解析不了--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'静态注册onload事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>&lt;/html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">onloadFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'静态注册onload事件,大量代码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--静态注册onload--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">onloadFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//固定格式</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'动态注册onload事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>onclick</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">onclickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态注册按钮1onclick"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//动态注册onclick事件</span>        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">/*            * document js语言提供的对象（文档） 表示整个页面            * Element 元素 就是标签            * 通过id属性获取标签            */</span>            <span class="token comment">//获取标签对象</span>            <span class="token keyword">var</span> btnObj <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn02"</span><span class="token punctuation">)</span>            <span class="token comment">//通过标签对象.事件名 =function()&#123;&#125;</span>            btnObj<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态注册的onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--静态注册onclick事件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">onclickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>onblur</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">onblurFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"静态注册onblur"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//类似sount</span>            <span class="token comment">//console 是js提高的向浏览器的控制台打印输出，用于调试</span>        <span class="token punctuation">&#125;</span>        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> obj<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"psw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function-variable function">onblur</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"动态注册onblur"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">onblurFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>psw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>onchange</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">           <span class="token keyword">function</span> <span class="token function">onchangeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态注册onchange,男神已经改变了"</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>          window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">var</span> nanshengobj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"nansheng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              nanshengobj<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态注册onchange,男神已经改变了"</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      选择你心中的男神      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token special-attr"><span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">onchangeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--d--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--o--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--n--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--g--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>      选择你心中的男神2      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nansheng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--z--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--i--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--z--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>--h--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>+ onsubmit  ```html  <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">          <span class="token keyword">function</span> <span class="token function">onsubmitFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//验证所有表单信息是否合法，如果有不合适的就提醒并阻止提交</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态注册表单提交事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">var</span> subObj <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              subObj<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动注册表单提交事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--  return false 可以阻止表单提交  &lt;form action="http://localhost:8080" method="get" onsubmit="return false">    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">onsubmitFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>静态注册<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>动态注册<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="10-DOM模型-重点"><a href="#10-DOM模型-重点" class="headerlink" title="10.DOM模型(重点)"></a>10.DOM模型(重点)</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220129152407853.png" alt="image-20220129152407853"><br>html就是html文档</p><h4 id="（1）-document对象"><a href="#（1）-document对象" class="headerlink" title="（1）.document对象"></a>（1）.document对象</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220129152838930.png" alt="image-20220129152838930"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220129153024272.png" alt="image-20220129153024272"></p><p>document对象方法介绍：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220129153338511.png" alt="image-20220129153338511"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220129153656150.png" alt="image-20220129153656150"></p><p>id使用需要唯一</p><h4 id="（2）-验证用户名输入合法"><a href="#（2）-验证用户名输入合法" class="headerlink" title="（2）.验证用户名输入合法"></a>（2）.验证用户名输入合法</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">onclickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取这个标签对象 uname就是一个dom对象</span>        <span class="token keyword">var</span> uname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        alert(uname.id); //uname        alert(uname.type) //text        */</span>        <span class="token comment">//可以读输入框的值</span>        <span class="token comment">//alert(uname.value)</span>        <span class="token keyword">var</span> unameText <span class="token operator">=</span> uname<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">//正则表达式验证 字母 下划线 数字 组成5到12位</span>        <span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\w&#123;5,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">// alert(typeof (patt));//object</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>patt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>unameText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"输入合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"输入不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">onclickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>校验<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进版： </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">onclickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> uname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> unameText <span class="token operator">=</span> uname<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">//正则表达式验证 字母 下划线 数字 组成5到12位</span>        <span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\w&#123;5,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">var</span> unameSpanObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"userSpan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//innerText 表示起始标签和结束标签的内容</span>         <span class="token comment">// alert(unameSpanObj.innerHTML);</span>         <span class="token comment">// alert(typeof (patt));//object</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>patt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>unameText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            unameSpanObj<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;img src=\"right.png\" width=\"15\" height=\"15\"/>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            unameSpanObj<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;img src=\"wrong.png\" width=\"15\" height=\"15\"/>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入用户名<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">onclickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userSpan<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- &lt;img src="right.png" width="15" height="15"/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- &lt;button onclick="onclickFun()">校验&lt;/button>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）-正则表达式"><a href="#（3）-正则表达式" class="headerlink" title="（3）.正则表达式"></a>（3）.正则表达式</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token comment">//是否包含字母e</span>       <span class="token keyword">var</span> patt <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">e</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//一样与上面</span>       <span class="token comment">//要求是否包含a或b或c</span>       <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//要求是否包含a或b或d或e............</span>       <span class="token keyword">var</span> b <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//是否包含任意数字</span>       <span class="token keyword">var</span> c <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">// \w元字符用于查找单词字符。</span>       <span class="token comment">//单词字符包括:a-z.A-Z.0-9, 以及下划线,包含_ (下划线)字符。</span>       <span class="token keyword">var</span> d<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//是否包含至少一个a</span>       <span class="token keyword">var</span> e<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//是否包含0个或多个a</span>       <span class="token keyword">var</span> f <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//是否包含0个或1个a 他们都是检索到符合条件就会停止</span>       <span class="token keyword">var</span> <span class="token constant">G</span> <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 123654aaaa78 返回t</span>       <span class="token comment">//是否包含连续3个a x个n</span>       <span class="token keyword">var</span> h <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a&#123;3&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//是否包含 至少3个连续的a 最多5个连续的a</span>       <span class="token keyword">var</span> i <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a&#123;3,5&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//"aaaaaaaaaa" 也会返回t，看var h</span>       <span class="token comment">//必须以a结尾</span>       <span class="token keyword">var</span> j<span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//必须以a开头</span>       <span class="token keyword">var</span> j<span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>       <span class="token comment">//从头到尾都必须完全匹配 至少3个连续的a 最多5个连续的a</span>       <span class="token keyword">var</span> h <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a&#123;3,5&#125;$</span><span class="token regex-delimiter">/</span></span>      <span class="token comment">// alert(h.test("1aa2aa"))</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）getElementsByName"><a href="#（4）getElementsByName" class="headerlink" title="（4）getElementsByName"></a>（4）getElementsByName</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130101759601.png" alt="image-20220130101759601"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130101737976.png" alt="image-20220130101737976"></p><p>是有序的 是从上到下的顺序</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130102238308.png" alt="image-20220130102238308"></p><p>与ById的区别就是 获得的是一个对象数组，然后对数组里的对象的属性进行操作</p><h4 id="（5）getElementsByTagName"><a href="#（5）getElementsByTagName" class="headerlink" title="（5）getElementsByTagName"></a>（5）getElementsByTagName</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130103207246.png" alt="image-20220130103207246"></p><p>3个查询方法</p><ul><li>优先级：</li></ul><p>id&gt;name&gt;tagname</p><ul><li><p>加载完成后才可以查询</p><p>代码从前到后执行，如果不在点击方法里，在外面查到是null. 如下：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130105229445.png" alt="image-20220130105229445"></p><p>解决方法：</p><p>页面加载完 会执行这个方法</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130105354163.png" alt="image-20220130105354163"></p></li></ul><h4 id="（6）节点的常用属性和方法"><a href="#（6）节点的常用属性和方法" class="headerlink" title="（6）节点的常用属性和方法"></a>（6）节点的常用属性和方法</h4><pre><code> ![image-20220130105908354](https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130105908354.png)</code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130105954855.png" alt="image-20220130105954855"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130110006378.png" alt="image-20220130110006378"></p><p>理解：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130111930521.png" alt="image-20220130111930521"></p><p>city 有9个孩子节点</p><p>空格算成了单独的文本节点，属性和文本都算在标签节点里面了</p><p>只要获取孩子节点，具体的文字包括li的属性都是孙节点了</p><h4 id="（7）-添加子节点"><a href="#（7）-添加子节点" class="headerlink" title="（7）. 添加子节点"></a>（7）. 添加子节点</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//使用js代码来创建html标签 并展示在页面上</span>            <span class="token keyword">var</span> divObj <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在内存中</span>            divObj<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"donggei"</span><span class="token punctuation">;</span> <span class="token comment">//在内存中 没放在body</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>divObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-jQuery"><a href="#三-jQuery" class="headerlink" title="三.jQuery"></a>三.jQuery</h2><h3 id="1-helloWorld"><a href="#1-helloWorld" class="headerlink" title="1. helloWorld"></a>1. helloWorld</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130115137686.png" alt="image-20220130115137686"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">         <span class="token comment">// alert($); 有值 说明引入成功</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//页面加载完成后.... ，相当于 window.onload =function ()&#123;</span>             <span class="token keyword">var</span> $btnObj <span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//表示 按id查询 jQ对象 命名前面加一个$</span>             $btnObj<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"JQuery 的单击事件"</span><span class="token punctuation">)</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-函数核心介绍"><a href="#2-函数核心介绍" class="headerlink" title="2.函数核心介绍"></a>2.函数核心介绍</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130143548374.png" alt="image-20220130143548374"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130144042677.png" alt="image-20220130144042677"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130144019707.png" alt="image-20220130144019707">如下：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130143904199.png" alt="image-20220130143904199"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130145128728.png" alt="image-20220130145128728"></p><p>按<strong>标签名</strong>查：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130145517373.png" alt="image-20220130145517373"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130145402534.png" alt="image-20220130145402534"></p><h3 id="3-区分dom对象和JQurey对象"><a href="#3-区分dom对象和JQurey对象" class="headerlink" title="3.区分dom对象和JQurey对象"></a>3.区分dom对象和JQurey对象</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130162254797.png" alt="image-20220130162254797"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130162352894.png" alt="image-20220130162352894"></p><ul><li><p><strong>jQuery对象是dom对象的数组+ jQuery提供的一系列功能函数。</strong> </p><pre class="line-numbers language-$a[0]" data-language="$a[0]"><div class="caption"><span>其实是一个dom对象```（命名默认前面有$，是jq对象）</span></div><code class="language-$a[0]">+ ![image-20220130163447548](https:&#x2F;&#x2F;gitee.com&#x2F;dong2645981073&#x2F;picture-summary&#x2F;raw&#x2F;master&#x2F;&#x2F;image&#x2F;image-20220130163447548.png)+ 相互转化  ![image-20220130163613510](https:&#x2F;&#x2F;gitee.com&#x2F;dong2645981073&#x2F;picture-summary&#x2F;raw&#x2F;master&#x2F;&#x2F;image&#x2F;image-20220130163613510.png)  ### 4.Jquery选择器#### （1）.基本选择器  ![image-20220130172549984](https:&#x2F;&#x2F;gitee.com&#x2F;dong2645981073&#x2F;picture-summary&#x2F;raw&#x2F;master&#x2F;&#x2F;image&#x2F;image-20220130172549984.png)  &#96;&#96;&#96;html  $(&quot;p.myClass&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130174227463.png" alt="image-20220130174227463"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130174353134.png" alt="image-20220130174353134"></p><p>顺序和页面标签的顺序有关 </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Untitled Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div, span, p</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #aaa<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> #000 1px solid<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 17px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.mini</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 55px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 55px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #aaa<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.hide</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../script/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//1.选择 id 为 one 的元素 "background-color","#bbffaa"</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//css 方法设置和获取样式</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#one"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//2.选择 class 为 mini 的所有元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//css 方法设置和获取样式</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".mini"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//3.选择 元素名是 div 的所有元素 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//css 方法设置和获取样式</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//4.选择所有的元素 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//5.选择所有的 span 元素和id为two的元素   </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span,#two"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- &lt;div>&lt;h1>基本选择器&lt;/h1>&lt;/div> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 id 为 one 的元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 class 为 mini 的所有元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 元素名是 div 的所有元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 所有的元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 所有的 span 元素和id为two的元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id 为 one,class 为 one 的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id为two,class为one,title为test的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini,title为other<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini,title为test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tesst<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini,title为tesst<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>style的display为"none"的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为"hide"的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>包含input的type为"hidden"的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>^^span元素^^<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）-层级选择器"><a href="#（2）-层级选择器" class="headerlink" title="（2）.层级选择器"></a>（2）.层级选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Untitled Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div, span, p</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #aaa<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> #000 1px solid<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 17px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.mini</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 55px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 55px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #aaa<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.hide</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../script/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//以前的是简写</span><span class="token comment">//1.选择 body 内的所有 div 元素 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span> <span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.在 body 内, 选择div子元素  </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body>div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span> <span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.选择 id 为 one 的下一个 div 元素 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#one+div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span> <span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.选择 id 为 two 的元素后面的所有 div 兄弟元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#two~div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span> <span class="token string">"#bbffaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- &lt;div>&lt;h1>层级选择器:根据元素的层级关系选择元素&lt;/h1>ancestor descendant  ：parent > child    ：prev + next    ：prev ~ siblings    ：&lt;/div> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 body 内的所有 div 元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在 body 内, 选择div子元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 id 为 one 的下一个 div 元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择 id 为 two 的元素后面的所有 div 兄弟元素<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id 为 one,class 为 one 的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id为two,class为one,title为test的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini,title为other<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini,title为test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tesst<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为mini,title为tesst<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>style的display为"none"的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>class为"hide"的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>包含input的type为"hidden"的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>^^span元素^^<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）-基本的过滤选择器"><a href="#（3）-基本的过滤选择器" class="headerlink" title="（3）.基本的过滤选择器"></a>（3）.基本的过滤选择器</h4><p>使用时查看CHM。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130204243670.png" alt="image-20220130204243670"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220130213136542.png" alt="image-20220130213136542"></p><h4 id="（4）-内容过滤选择器"><a href="#（4）-内容过滤选择器" class="headerlink" title="（4）.内容过滤选择器"></a>（4）.内容过滤选择器</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220131101131134.png" alt="image-20220131101131134"></p><h4 id="（5）-属性过滤选择器"><a href="#（5）-属性过滤选择器" class="headerlink" title="（5）.属性过滤选择器"></a>（5）.属性过滤选择器</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220131102522651.png" alt="image-20220131102522651"></p><h4 id="（6）-表单过滤选择器"><a href="#（6）-表单过滤选择器" class="headerlink" title="（6）.表单过滤选择器"></a>（6）.表单过滤选择器</h4><p>注意点： </p><ul><li><p>可用和不可用属性</p></li><li><p>相当于dom对象的value属性 （！！表单项中的）</p></li></ul><p>​        不传参数是获取，传参是赋值。val(“xxxx”)</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220201192645781.png" alt="image-20220201192645781"></p><ul><li><p>遍历方法</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220201194028121.png" alt="image-20220201194028121"></p></li></ul><h4 id="（7）-表单对象属性过滤选择器"><a href="#（7）-表单对象属性过滤选择器" class="headerlink" title="（7）.表单对象属性过滤选择器"></a>（7）.表单对象属性过滤选择器</h4><h3 id="5-JQuery元素筛选"><a href="#5-JQuery元素筛选" class="headerlink" title="5.JQuery元素筛选"></a>5.JQuery元素筛选</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220201195447000.png" alt="image-20220201195447000"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220202103352069.png" alt="image-20220202103352069"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220202103021189.png" alt="image-20220202103021189"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220202103107404.png" alt="image-20220202103107404"></p><h3 id="6-jquery的属性操作"><a href="#6-jquery的属性操作" class="headerlink" title="6.jquery的属性操作"></a>6.jquery的属性操作</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220202110443707.png" alt="image-20220202110443707"></p><ul><li><p>text()文本 包括后代节点中的文本</p></li><li><p>注意：val 是设置获取表单项的value 。div,span……不是表单项。</p></li><li><p>val方法还可以同时设置多个表单项的选中状态: 加【】</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220202113358417.png" alt="image-20220202113358417"></p></li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220202120141401.png" alt="image-20220202120141401"></p><p><strong>prop解决了  attr（checked） 可能 返回undefined的问题</strong></p><p>下图是attr获取和设置普通属性，</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220202114711921.png"></p><h3 id="7-DOM的增删改"><a href="#7-DOM的增删改" class="headerlink" title="7.DOM的增删改"></a>7.DOM的增删改</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203092457546.png" alt="image-20220203092457546"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203092548869.png" alt="image-20220203092548869"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203092827204.png" alt="image-20220203092827204"></p><p>创建一个h1插入到两个div中</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203095356151.png" alt="image-20220203095356151"></p><h3 id="8-css样式操作"><a href="#8-css样式操作" class="headerlink" title="8.css样式操作"></a>8.css样式操作</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203134500883.png" alt="image-20220203134500883"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>260px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*div 表示限制只能div使用 .border表示给border类使用*/</span><span class="token selector">div.border</span><span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> 2px white solid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.redDiv</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.blackDiv</span><span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> 5px blue solid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*CSScss(name|pro|[,val|fn])       读写匹配元素的样式属性。 a.css('color')取出a元素的colora.css('color',"red")设置a元素的color为redCSS 类addClass(class|fn) 为元素添加一个class值;&lt;div class="mini big">removeClass([class|fn]) 删除元素的class值；传递一个具体的class值，就会删除具体的某个classa.removeClass()：移除所有的class值**/</span><span class="token keyword">var</span> $divEle <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//addClass() - 向被选元素添加一个或多个类</span>$divEle<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"redDiv blackDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn02'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//removeClass() - 从被选元素删除一个或多个类 </span>$divEle<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn03'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//toggleClass() - 对被选元素进行添加/删除类的切换操作 </span><span class="token comment">//切换就是如果具有该类那么删除，如果没有那么添加上</span>$divEle<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"redDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn04'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//offset() - 返回第一个匹配元素相对于文档的位置。</span><span class="token keyword">var</span> os <span class="token operator">=</span> $divEle<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意通过offset获取到的是一个对象，这个对象有两个属性top表示顶边距，left表示左边距</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"顶边距："</span><span class="token operator">+</span>os<span class="token punctuation">.</span>top<span class="token operator">+</span><span class="token string">" 左边距："</span><span class="token operator">+</span>os<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用offset设置元素位置时，也需要传递一个js对象，对象有两个属性top和left</span><span class="token comment">//offset(&#123; top: 10, left: 30 &#125;);</span> $divEle<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> top<span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span> left<span class="token operator">:</span><span class="token number">60</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addClass()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeClass()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggleClass()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn03<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>offset()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn04<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-JQuery动画"><a href="#9-JQuery动画" class="headerlink" title="9.JQuery动画"></a>9.JQuery动画</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203161643202.png" alt="image-20220203161643202"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203162057844.png" alt="image-20220203162057844"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203161350905.png" alt="image-20220203161350905"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203162157325.png" alt="image-20220203162157325"></p><p>透明度：0~1；</p><h3 id="10-原生js和jQuery页面加载完成之后的区别"><a href="#10-原生js和jQuery页面加载完成之后的区别" class="headerlink" title="10.原生js和jQuery页面加载完成之后的区别"></a>10.原生js和jQuery页面加载完成之后的区别</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203192214264.png" alt="image-20220203192214264"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203193015331.png" alt="image-20220203193015331"></p><p>如下，原生js会等img 和iframe 都加载完</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203192112076.png" alt="image-20220203192112076"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203192822307.png" alt="image-20220203192822307"></p><h3 id="11-JQuery中常用事件处理方法"><a href="#11-JQuery中常用事件处理方法" class="headerlink" title="11.JQuery中常用事件处理方法"></a>11.JQuery中常用事件处理方法</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203211523359.png" alt="image-20220203211523359"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203213448210.png" alt="image-20220203213448210"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206203858898.png" alt="image-20220206203858898"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203212058270.png" alt="image-20220203212058270"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203213034586.png" alt="image-20220203213034586"></p><p>无参数就是全部解除绑定</p><h3 id="12-事件的冒泡"><a href="#12-事件的冒泡" class="headerlink" title="12.事件的冒泡"></a>12.事件的冒泡</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203214215701.png" alt="image-20220203214215701"></p><p>比如 div 里面 有个span ，span和div都有点击事件， 你点击了span，那么span和div会先后触发点击事件</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203214413862.png" alt="image-20220203214413862"></p><p>span事件里加return false解决。</p><h3 id="13-事件对象"><a href="#13-事件对象" class="headerlink" title="13.事件对象"></a>13.事件对象</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203215011567.png" alt="image-20220203215011567"></p><p>下图就是这个js对象里的信息:</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203215218569.png" alt="image-20220203215218569"></p><p>使用举例：</p><p>可以实现丰富的功能</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220203215638321.png" alt="image-20220203215638321"></p><h3 id="14-练习—图片跟随"><a href="#14-练习—图片跟随" class="headerlink" title="14.练习—图片跟随"></a>14.练习—图片跟随</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204105230645.png" alt="image-20220204105230645"></p><p>左上到右下会闪，因为进入了大图片，页面以为出去了小图片，大图片hide，然后页面又以为进入了小图片。解决：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204110208820.png" alt="image-20220204110208820"></p><h1 id="四-XML"><a href="#四-XML" class="headerlink" title="四.XML"></a>四.XML</h1><p> <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204152311330.png" alt="image-20220204152311330"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204153116345.png" alt="image-20220204153116345"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204153511237.png" alt="image-20220204153511237"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204153721972.png" alt="image-20220204153721972"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204154146385.png" alt="image-20220204154146385"></p><h3 id="1-dom4j解析技术"><a href="#1-dom4j解析技术" class="headerlink" title="1.dom4j解析技术"></a>1.dom4j解析技术</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204161104864.png" alt="image-20220204161104864"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204161201817.png" alt="image-20220204161201817"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>donggei<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Document</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">DocumentException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Element</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">SAXReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @className: Dom4jTest * @description: TODO 类描述 * @author: Dong * @date: 2022/2/4 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dom4jTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DocumentException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个SaxReader输入流，去读取xml配置文件，生成bocument对象</span>        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"src/books.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DocumentException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"src/books.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过根元素获取book标签对象</span>        <span class="token class-name">Element</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// System.out.println(rootElement);</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> books <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> book <span class="token operator">:</span> books<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//asXML 把标签对象，转化成标签字符串</span>            <span class="token comment">//System.out.println(book.asXML());</span>            <span class="token class-name">Element</span> nameElement <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(nameElement.asXML());</span>            <span class="token comment">//&lt;name>java编程思想&lt;/name></span>            <span class="token comment">//&lt;name>葵花宝典&lt;/name></span>            <span class="token comment">// getText();可T以获取标签中的文本内容</span>            <span class="token class-name">String</span> nameElementText <span class="token operator">=</span> nameElement<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(nameElementText);</span>            <span class="token comment">//java编程思想</span>            <span class="token comment">//葵花宝典</span>            <span class="token comment">//直接获取指定标签名的文本内容</span>            <span class="token class-name">String</span> price <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> author <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取属性值</span>            <span class="token class-name">String</span> sn <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"sn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Book</span> book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>sn<span class="token punctuation">,</span> nameElementText<span class="token punctuation">,</span> author<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Book&#123;sn='null', name='java编程思想', author='华仔', price=9.9&#125;</span>            <span class="token comment">//Book&#123;sn='null', name='葵花宝典', author='班长', price=5.5&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204170732499.png" alt="image-20220204170732499"></p><p>tip:使用了junit单元测试框架，<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304048154181666">教程</a></p><h1 id="五-Tomcat"><a href="#五-Tomcat" class="headerlink" title="五.Tomcat"></a>五.Tomcat</h1><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204170254147.png" alt="image-20220204170254147"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204170359211.png" alt="image-20220204170359211"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204170520502.png" alt="image-20220204170520502"></p><h3 id="2-web资源分类"><a href="#2-web资源分类" class="headerlink" title="2.web资源分类"></a>2.web资源分类</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204170846555.png" alt="image-20220204170846555"></p><h3 id="3-常用的web服务器"><a href="#3-常用的web服务器" class="headerlink" title="3.常用的web服务器"></a>3.常用的web服务器</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204170931597.png" alt="image-20220204170931597"></p><h3 id="4-Tomcat服务器和Servlet版本的对应关系"><a href="#4-Tomcat服务器和Servlet版本的对应关系" class="headerlink" title="4.Tomcat服务器和Servlet版本的对应关系"></a>4.Tomcat服务器和Servlet版本的对应关系</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204171232371.png" alt="image-20220204171232371"></p><h3 id="5-tomcat安装和使用"><a href="#5-tomcat安装和使用" class="headerlink" title="5.tomcat安装和使用"></a>5.tomcat安装和使用</h3><p>找到你需要用的Tomcat版本对应的zip压缩包,解压到需要安装的目录即可。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204172714555.png" alt="image-20220204172714555"></p><p>webapps里 一个目录 就是一个工程</p><p>tip：钝化理解为序列化，把对象写在磁盘上。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204173206779.png" alt="image-20220204173206779"></p><p>方法二：这个方法好处是启动时发生错误 可以查看错误提示</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204174356817.png" alt="image-20220204174356817"></p><p>ctrl+c 或者<strong>bin下的shutdown.bat</strong> 或者直接关cmd窗口退出</p><h3 id="6-修改端口号"><a href="#6-修改端口号" class="headerlink" title="6.修改端口号"></a>6.修改端口号</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204175121767.png" alt="image-20220204175121767"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204174838240.png" alt="image-20220204174838240"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204175445325.png" alt="image-20220204175445325"></p><h3 id="7-部署web工程到Tomcat"><a href="#7-部署web工程到Tomcat" class="headerlink" title="7.部署web工程到Tomcat"></a>7.部署web工程到Tomcat</h3><p>方法一：</p><p>直接把文件拷贝到webapps里，一个目录就是一个工程（项目）</p><p>方法二：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220204195550579.png" alt="image-20220204195550579"></p><p>相当于 映射过去的</p><p>手拖页面文件到浏览器，和输入地址访问的区别：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205094413878.png" alt="image-20220205094413878"></p><p>tomcat（服务器）中还有其他工程，上图中省略了。</p><p> <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205102729516.png" alt="image-20220205102729516"></p><p>这是因为在tomcat中的conf下的web.xml中配置了，一直下拉到最后可以看到<code>&lt;welcome-file-list&gt;</code>标签内容</p><h3 id="8-idea配置tomcat"><a href="#8-idea配置tomcat" class="headerlink" title="8.idea配置tomcat"></a>8.idea配置tomcat</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205104750390.png" alt="image-20220205104750390"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205104623870.png" alt="image-20220205104623870"></p><p>new 工程：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205190405524.png" alt="image-20220205190405524"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205190421285.png" alt="image-20220205190421285"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205190430659.png" alt="image-20220205190430659"></p><p>在WEB-INF下创建lib 目录</p><p>目录介绍：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205191157076.png" alt="image-20220205191157076"></p><p>热部署：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205203128702.png" alt="image-20220205203128702"></p><h4 id="快速生成servlet"><a href="#快速生成servlet" class="headerlink" title="快速生成servlet"></a>快速生成servlet</h4><p>帮你快速写：</p><p>如果没有这个选项，到Project Structure中的Facets,选择中对应的web，把最下面的Source Roots打勾。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206115614790.png" alt="image-20220206115614790"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206115816142.png" alt="image-20220206115816142"></p><h4 id="控制台乱码："><a href="#控制台乱码：" class="headerlink" title="控制台乱码："></a>控制台乱码：</h4><h4 id="添加这句话"><a href="#添加这句话" class="headerlink" title="添加这句话"></a>添加这句话</h4><pre class="line-numbers language-none"><code class="language-none">-Dfile.encoding&#x3D;UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220207220456204.png" alt="image-20220207220456204"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220207220343125.png" alt="image-20220207220343125"></p><h3 id="9-使用maven配置"><a href="#9-使用maven配置" class="headerlink" title="9.使用maven配置"></a>9.使用maven配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span>         <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用maven配置后</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206104201723.png" alt="image-20220206104201723"></p><h2 id="六-servlet"><a href="#六-servlet" class="headerlink" title="六 .servlet"></a>六 .servlet</h2><p><a href="https://www.cnblogs.com/judy198/p/15008553.html">狂神讲的maven配置和Servlet可以作为补充</a></p>  <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205203538856.png" alt="image-20220205203538856"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205204159613.png" alt="image-20220205204159613"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205205000791.png" alt="image-20220205205000791"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205205349853.png" alt="image-20220205205349853"></p><p>继承servlet后 重写的方法后关注的生命周期，一般继承Httpservlet主要写service方法。</p><h3 id="1-servlet继承体系"><a href="#1-servlet继承体系" class="headerlink" title="1.servlet继承体系"></a>1.servlet继承体系</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205212311644.png" alt="image-20220205212311644"></p><h3 id="2-ServletConfig类-3个作用"><a href="#2-ServletConfig类-3个作用" class="headerlink" title="2.ServletConfig类 3个作用"></a>2.ServletConfig类 3个作用</h3><p>在init方法中使用：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205214238041.png" alt="image-20220205214238041"></p><p>获取web.xml中的对应的参数</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205214506705.png" alt="image-20220205214506705"></p><p>注意：如下：只在单独的helloServlet2 中可以获取，因为web.xml中就写在了单独的某个Servlet。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205221151897.png" alt="image-20220205221151897"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205214619080.png" alt="image-20220205214619080"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205214740200.png" alt="image-20220205214740200"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205220817991.png" alt="image-20220205220817991"></p><p>也可以在其他方法中使用</p><h3 id="3-ServletContext类4个作用"><a href="#3-ServletContext类4个作用" class="headerlink" title="3.ServletContext类4个作用"></a>3.ServletContext类4个作用</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206124133993.png" alt="image-20220206124133993"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205222336227.png" alt="image-20220205222336227"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205222517627.png" alt="image-20220205222517627"></p><p>ServletContext只能获取context-prarm, 上一节提到的init-param是ServletConfig才能获取的。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220205223723593.png" alt="image-20220205223723593"></p><p>idea发布的 对应工程的web目录 就是把源码 web目录下的内容+字节码部署到这个路径下了</p><p>这个路径是编译完后的字节文件路 径，是下面out文件的输出路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>context对象的作用就是 每一个Servlet是共用的，相互之间都可以拿到配置的信息。</p><h3 id="4-HttpServletRequest"><a href="#4-HttpServletRequest" class="headerlink" title="4.HttpServletRequest"></a>4.HttpServletRequest</h3><p>每次请求进来就会创建一个  </p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206172231306.png" alt="image-20220206172231306"></p><p>注意：URL = 协议 + 主机 + 端口号 + URI <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206172523967.png" alt="image-20220206172523967"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"RequestAPIServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/RequestAPIServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestAPIServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端IP地址："</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getRemoteHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> requestHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">///servlet_demo01/RequestAPIServlet</span>        <span class="token comment">//http://localhost:8080/servlet_demo01/RequestAPIServlet</span>        <span class="token comment">//客户端IP地址：127.0.0.1</span>        <span class="token comment">//Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0</span>        <span class="token comment">//GET</span>                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数处理：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206181205539.png" alt="image-20220206181205539"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206181254806.png" alt="image-20220206181254806"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206181546292.png" alt="image-20220206181546292"></p><p>乱码问题：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206181927523.png" alt="image-20220206181927523"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206182053611.png" alt="image-20220206182053611"></p><p>注意：<strong>设置字符集必须要放在最前面。先获取参数，后设置，无效。</strong></p><h3 id="5-请求转发"><a href="#5-请求转发" class="headerlink" title="5.请求转发"></a>5.请求转发</h3><ul><li><p>浏览器地址没有变</p></li><li><p>他们是一次请求</p></li><li><p>他们共享request域中的数据</p></li><li><p>可以转发web-inf目录下（web-inf目录是不可以浏览器地址直接访问的）</p></li><li><p>不可访问工程以外的地址</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206184701554.png" alt="image-20220206184701554"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206184718822.png" alt="image-20220206184718822"></p></li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206182615238.png" alt="image-20220206182615238"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206183144539.png" alt="image-20220206183144539"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取请求的参数（办事的材料）查看</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Servlet1（柜台1）中查看参数（材料）："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给材料 盖一个章，并传递到Servlet2（柜台 2）去查看</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"柜台1的章"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 问路：Servlet2（柜台 2）怎么走</span>        <span class="token comment">/**         * 请求转发必须要以斜杠打头，/ 斜杠表示地址为：http://ip:port/工程名/ , 映射到IDEA代码的web目录&lt;br/>         *         */</span>        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/servlet2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        RequestDispatcher requestDispatcher = req.getRequestDispatcher("http://www.baidu.com");</span>        <span class="token comment">// 走向Sevlet2（柜台 2）</span>        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求转发必须要以斜杠打头，/ 斜杠表示地址为：<a href="http://ip:port/工程名/">http://ip:port/工程名/</a> , 映射到IDEA代码的web目录</p><p>请求转发必须要以斜杠打头，/ 斜杠表示地址为：<a href="http://ip:port/工程名/">http://ip:port/工程名/</a> , 映射到IDEA代码的web目录</p><p>请求转发必须要以斜杠打头，/ 斜杠表示地址为：<a href="http://ip:port/工程名/">http://ip:port/工程名/</a> , 映射到IDEA代码的web目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取请求的参数（办事的材料）查看</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Servlet2（柜台2）中查看参数（材料）："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查看 柜台1 是否有盖章</span>        <span class="token class-name">Object</span> key1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"柜台1是否有章："</span> <span class="token operator">+</span> key1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理自己的业务</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servlet2 处理自己的业务 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-base标签的作用"><a href="#6-base标签的作用" class="headerlink" title="6.base标签的作用"></a>6.base标签的作用</h3><p>解决的问题就是</p><p>正常使用的a标签跳转，跳转后地址栏改变，然后点击回到上一页面，正常运行。</p><p>如果是<strong>请求转发</strong>过来的，点击回到上一页，因为地址栏没有改动到当前页面，所以会发生错误。</p><p>页面有base标签时，点击回到上一页，先参考设置的地址，作为当前地址，而不是地址栏的地址。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206194438790.png" alt="image-20220206194438790"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206194542293.png" alt="image-20220206194542293"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206194812745.png" alt="image-20220206194812745"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206195021767.png" alt="image-20220206195021767"></p><h3 id="7-Web中-的意义（路径）"><a href="#7-Web中-的意义（路径）" class="headerlink" title="7.Web中 / 的意义（路径）"></a>7.Web中 / 的意义（路径）</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206200451653.png" alt="image-20220206200451653"></p><h3 id="8-HttpServletResponse"><a href="#8-HttpServletResponse" class="headerlink" title="8.HttpServletResponse"></a>8.HttpServletResponse</h3><p> <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206211002521.png" alt="image-20220206211002521"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206211653469.png" alt="image-20220206211653469"></p><p>不能同时使用，控制台会报错。</p><p>解决乱码：</p><p>设置响应头的内容都需要在获取流对象之前才可以</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// System.out.println(response.getCharacterEncoding());//ISO-8859-1</span>       response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//浏览器使用的GBK</span>       <span class="token comment">//让浏览器也使用utf-8</span>       response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset = utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//resp.setContentType("text/html;charset=utf-8") 用这一句也能解决 他相当于上面两句</span>       <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206221829422.png" alt="image-20220206221829422"></p><h3 id="9-请求重定向"><a href="#9-请求重定向" class="headerlink" title="9.请求重定向"></a>9.请求重定向</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206222349863.png" alt="image-20220206222349863"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206222937812.png" alt="image-20220206222937812"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206223148328.png" alt="image-20220206223148328"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220207000242544.png" alt="image-20220207000242544"></p><p>这里的req.setAttribute和getServletContext().setAttribute 不一样，重定向 Context()的Attribute是可以获取到的</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220207000358541.png" alt="image-20220207000358541"></p><p>推荐使用的方法：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220207102548369.png" alt="image-20220207102548369"></p><h2 id="七-HTTP协议"><a href="#七-HTTP协议" class="headerlink" title="七.HTTP协议"></a>七.HTTP协议</h2><p> <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206124546119.png" alt="image-20220206124546119"></p><h3 id="1-请求："><a href="#1-请求：" class="headerlink" title="1.请求："></a>1.请求：</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206164642813.png" alt="image-20220206164642813"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206164555326.png" alt="image-20220206164555326"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206131820879.png" alt="image-20220206131820879"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206164428184.png" alt="image-20220206164428184"></p><p>两种请求的区分：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206165401704.png" alt="image-20220206165401704"></p><h3 id="2-响应"><a href="#2-响应" class="headerlink" title="2.响应"></a>2.响应</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206165638434.png" alt="image-20220206165638434"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206170022566.png" alt="image-20220206170022566"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206170231764.png" alt="image-20220206170231764"></p><h3 id="3-MIME"><a href="#3-MIME" class="headerlink" title="3.MIME"></a>3.MIME</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220206170358216.png" alt="image-20220206170358216"></p><h2 id="八-IDEA中Debug调试的使用"><a href="#八-IDEA中Debug调试的使用" class="headerlink" title="八.IDEA中Debug调试的使用"></a>八.IDEA中Debug调试的使用</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208105208445.png" alt="image-20220208105208445"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208111341617.png" alt="image-20220208111341617"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208112332086.png" alt="image-20220208112332086"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208114242271.png" alt="image-20220208114242271"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208114309566.png" alt="image-20220208114309566"></p><h2 id="九-JSP"><a href="#九-JSP" class="headerlink" title="九.JSP"></a>九.JSP</h2><p>使用Servlet回传HTML页面，编码比较麻烦。</p><p>疑问：不太明白为什么不直接请求转发？难到是因为不能加自己的可变数据？</p><p>弹幕：因为这是请求和回传的差别吧，请求是用servlet接受，回传（响应）需要servlet程序根据请求来回传（动态），老师写的那个就是为了模仿回传的流程。不要纠结可以直接1.html跳转（只是我的想法）</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208144417374.png" alt="image-20220208144417374"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208144717975.png" alt="image-20220208144717975"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208145210207.png" alt="image-20220208145210207"></h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208191545292.png" alt="image-20220208191545292"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208192353278.png" alt="image-20220208192353278"></p><p>观察翻译出来的Servlet程序的源代码，不难发现。其底层实现，也是通过输出流。把html页面数据回传<br>给客户端。</p><h3 id="1-jsp头部的page指令2"><a href="#1-jsp头部的page指令2" class="headerlink" title="1.jsp头部的page指令2"></a>1.jsp头部的page指令2</h3><p>大部分都不需要改</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208194001354.png" alt="image-20220208194001354"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208195145673.png" alt="image-20220208195145673"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208195134851.png" alt="image-20220208195134851"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208195716572.png" alt="image-20220208195716572"></p><h3 id="2-jsp常用脚本"><a href="#2-jsp常用脚本" class="headerlink" title="2.jsp常用脚本"></a>2.jsp常用脚本</h3><h4 id="（1）说明脚本-极少用"><a href="#（1）说明脚本-极少用" class="headerlink" title="（1）说明脚本-极少用"></a>（1）说明脚本-极少用</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208202829181.png" alt="image-20220208202829181"></p><p>.java文件一般的地址：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208202625853.png" alt="image-20220208202625853"></p><h4 id="（2）表达式脚本-常用"><a href="#（2）表达式脚本-常用" class="headerlink" title="（2）表达式脚本-常用"></a>（2）表达式脚本-常用</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208203405772.png" alt="image-20220208203405772"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208210027445.png" alt="image-20220208210027445"></p><p>特点3：eg:</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208210210529.png" alt="image-20220208210210529"></p><h4 id="（3）代码脚本"><a href="#（3）代码脚本" class="headerlink" title="（3）代码脚本"></a>（3）代码脚本</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208210821352.png" alt="image-20220208210821352"></p><p>也是翻译在_jspService方法中。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208213332238.png" alt="image-20220208213332238"></p><p>特点3例：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208213226442.png" alt="image-20220208213226442"></p><p>特点4例：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208213500184.png" alt="image-20220208213500184"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220208213726296.png" alt="image-20220208213726296"></p><p>没&lt;% %&gt;包起来的直接out.write了。</p><h4 id="测试源码及自动生成的-java文件。"><a href="#测试源码及自动生成的-java文件。" class="headerlink" title="测试源码及自动生成的.java文件。"></a>测试源码及自动生成的.java文件。</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page import="java.util.Map" %>&lt;%@ page import="java.util.HashMap" %>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;%--练习：--%>&lt;%--1、声明类属性--%>    &lt;%!        private Integer id;        private String name;        private static Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">></span></span> map;    %>&lt;%--2、声明static静态代码块--%>    &lt;%!        static &#123;            map = new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">></span></span>();            map.put("key1", "value1");            map.put("key2", "value2");            map.put("key3", "value3");        &#125;    %>&lt;%--3、声明类方法--%>    &lt;%!        public int abc()&#123;            return 12;        &#125;    %>&lt;%--4、声明内部类--%>    &lt;%!        public static class A &#123;            private Integer id = 12;            private String abc = "abc";        &#125;    %>&lt;%--练习：1.输出整型2.输出浮点型3.输出字符串4.输出对象    --%>    &lt;%=12 %> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    &lt;%=12.12 %> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    &lt;%="我是字符串" %> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    &lt;%=map%> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    &lt;%=request.getParameter("username")%>&lt;%--练习：--%>&lt;%--1.代码脚本----if 语句--%>    &lt;%        int i = 13 ;        if (i == 12) &#123;    %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>国哥好帅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    &lt;%        &#125; else &#123;    %>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>国哥又骗人了！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    &lt;%        &#125;    %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>&lt;%--2.代码脚本----for 循环语句--%>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;%        for (int j = 0; j &lt; 10; j++) &#123;    %>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第 &lt;%=j + 1%>行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    &lt;%        &#125;    %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>&lt;%--3.翻译后java文件中_jspService方法内的代码都可以写--%>    &lt;%        String username = request.getParameter("username");        System.out.println("用户名的请求参数值是：" + username);    %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * Generated by the Jasper component of Apache Tomcat * Version: Apache Tomcat/9.0.53 * Generated at: 2022-02-08 12:20:00 UTC * Note: The last modified time of this file was set to *       the last modified time of the source file after *       generation to assist with modification tracking. */</span><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jsp</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> a_jsp <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>HttpJspBase</span>    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>JspSourceDependent</span><span class="token punctuation">,</span>                 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>JspSourceImports</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> abc <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>JspFactory</span> _jspxFactory <span class="token operator">=</span>          <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>JspFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">></span></span> _jspx_dependants<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">></span></span> _jspx_imports_packages<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">></span></span> _jspx_imports_classes<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    _jspx_imports_packages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _jspx_imports_packages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"javax.servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _jspx_imports_packages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _jspx_imports_packages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _jspx_imports_classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _jspx_imports_classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java.util.Map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _jspx_imports_classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java.util.HashMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>el<span class="token punctuation">.</span></span>ExpressionFactory</span> _el_expressionfactory<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span></span>InstanceManager</span> _jsp_instancemanager<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">></span></span> <span class="token function">getDependants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _jspx_dependants<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">></span></span> <span class="token function">getPackageImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _jspx_imports_packages<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">></span></span> <span class="token function">getClassImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _jspx_imports_classes<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>el<span class="token punctuation">.</span></span>ExpressionFactory</span> <span class="token function">_jsp_getExpressionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_el_expressionfactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_el_expressionfactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          _el_expressionfactory <span class="token operator">=</span> _jspxFactory<span class="token punctuation">.</span><span class="token function">getJspApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpressionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> _el_expressionfactory<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span></span>InstanceManager</span> <span class="token function">_jsp_getInstanceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_jsp_instancemanager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_jsp_instancemanager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          _jsp_instancemanager <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>InstanceManagerFactory</span><span class="token punctuation">.</span><span class="token function">getInstanceManager</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> _jsp_instancemanager<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherType</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getDispatcherType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> _jspx_method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Allow"</span><span class="token punctuation">,</span><span class="token string">"GET, HEAD, POST, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Allow"</span><span class="token punctuation">,</span><span class="token string">"GET, HEAD, POST, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_METHOD_NOT_ALLOWED<span class="token punctuation">,</span> <span class="token string">"JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>PageContext</span> pageContext<span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpSession</span> session <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContext</span> application<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletConfig</span> config<span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>JspWriter</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>JspWriter</span> _jspx_out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>PageContext</span> _jspx_page_context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pageContext <span class="token operator">=</span> _jspxFactory<span class="token punctuation">.</span><span class="token function">getPageContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span>      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _jspx_page_context <span class="token operator">=</span> pageContext<span class="token punctuation">;</span>      application <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      config <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      session <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _jspx_out <span class="token operator">=</span> out<span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;html>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;head>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"    &lt;title>Title&lt;/title>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/head>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;body>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;br>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">12.12</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;br>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我是字符串"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;br>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;br>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">13</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>国哥好帅&lt;/h1>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>国哥又骗人了！&lt;/h1>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;table border=\"1\" cellspacing=\"0\">\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"    &lt;tr>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"        &lt;td>第 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"行&lt;/td>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"    &lt;/tr>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>          out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/table>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名的请求参数值是："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>SkipPageException</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        out <span class="token operator">=</span> _jspx_out<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> out<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              out<span class="token punctuation">.</span><span class="token function">clearBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_jspx_page_context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _jspx_page_context<span class="token punctuation">.</span><span class="token function">handlePageException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      _jspxFactory<span class="token punctuation">.</span><span class="token function">releasePageContext</span><span class="token punctuation">(</span>_jspx_page_context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）JSP的三种注释"><a href="#（4）JSP的三种注释" class="headerlink" title="（4）JSP的三种注释"></a>（4）JSP的三种注释</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209163808447.png" alt="image-20220209163808447"></p><h3 id="3-JSP中的九大内置对象"><a href="#3-JSP中的九大内置对象" class="headerlink" title="3.JSP中的九大内置对象"></a>3.JSP中的九大内置对象</h3><p>jsp中的内置对象，是指Tomcat在翻译jsp 页面成为Servlet源代码后，内部提供的九大对象。叫内置对象。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209170117129.png" alt="image-20220209170117129"></p><p>第九个需要这样：默认是flase</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209170151556.png" alt="image-20220209170151556"></p><h3 id="4-jsp四大域对象"><a href="#4-jsp四大域对象" class="headerlink" title="4.jsp四大域对象"></a>4.jsp四大域对象</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209170902014.png" alt="image-20220209170902014"></p><p>例一：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209171625282.png" alt="image-20220209171625282"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209172109379.png" alt="image-20220209172109379"></p><p>例二：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209173745603.png" alt="image-20220209173745603"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209173827339.png" alt="image-20220209173827339"></p><p> 例三：</p><p>单独访问2</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209174938507.png" alt="image-20220209174938507"></p><p>例四：</p><p>关闭浏览器后 再打开单独访问2</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209175200725.png" alt="image-20220209175200725"></p><p>例五：</p><p>重启服务器后 再单独访问2</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209175231636.png" alt="image-20220209175231636"></p><p>能用小的 就不用大的。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209180022958.png" alt="image-20220209180022958"></p><h3 id="5-jsp中的out输出和response-getWriter输出的区别"><a href="#5-jsp中的out输出和response-getWriter输出的区别" class="headerlink" title="5.jsp中的out输出和response.getWriter输出的区别"></a>5.jsp中的out输出和response.getWriter输出的区别</h3><p>先后区别</p><p>一般的HTML是out，就是空白区域写的。</p><p>默认out是会写在最后的。</p><p>你可以 手动执行out.flush() ，在resp输出代码前,加out.flush() ，输入页面就是你的代码顺序了。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209181518298.png" alt="image-20220209181518298"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209182211059.png" alt="image-20220209182211059"></p><h3 id="6-out的两种输出，print源码是调用的write-String-valueOf-。"><a href="#6-out的两种输出，print源码是调用的write-String-valueOf-。" class="headerlink" title="6.out的两种输出，print源码是调用的write(String.valueOf)。"></a>6.out的两种输出，print源码是调用的write(String.valueOf)。</h3><p>如果out.write(‘1’) 会直接输出。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220209183807443.png" alt="image-20220209183807443"></p><p>深入源码，浅出结论:在jsp页面中，可以统一使用out.print()来进行输出。</p><h3 id="7-jsp常用标签"><a href="#7-jsp常用标签" class="headerlink" title="7.jsp常用标签"></a>7.jsp常用标签</h3><h4 id="（1）静态包含（目前-一般都使用静态）"><a href="#（1）静态包含（目前-一般都使用静态）" class="headerlink" title="（1）静态包含（目前 一般都使用静态）"></a>（1）静态包含（目前 一般都使用静态）</h4><p>一个项目里不同的页面会有很多相同的地方。同一管理，使用到了包含。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210103520107.png" alt="image-20220210103520107"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210103658816.png" alt="image-20220210103658816"></p><p>使用：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210104502966.png" alt="image-20220210104502966"></p><p>footer.jsp:</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210104540224.png" alt="image-20220210104540224"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210104621205.png" alt="image-20220210104621205"></p><p>本质：在.java文件中</p><p>原来的内容 拷贝到静态包含的位置，不会把被包含的jsp翻译成_jsp.java</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210104808825.png" alt="image-20220210104808825"></p><h4 id="（2）动态包含"><a href="#（2）动态包含" class="headerlink" title="（2）动态包含"></a>（2）动态包含</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210105159272.png" alt="image-20220210105159272"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210111617326.png" alt="image-20220210111617326"></p><p>传递参数：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210111656503.png" alt="image-20220210111656503"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210111753251.png" alt="image-20220210111753251"></p><p>本质：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210110314633.png" alt="image-20220210110314633"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210111356838.png" alt="image-20220210111356838"></p><p>调用的同一个对象 所有out缓冲区一样，输出顺序也就和代码一样。</p><h4 id="（3）转发"><a href="#（3）转发" class="headerlink" title="（3）转发"></a>（3）转发</h4><p>和之前的 一样。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210112429756.png" alt="image-20220210112429756"></p><h3 id="8-jsp的使用"><a href="#8-jsp的使用" class="headerlink" title="8.jsp的使用"></a>8.jsp的使用</h3><p>jsp方便了数据的展示，使用Servlet回传数据麻烦。</p><p>把JSP理解成一个servlet程序就行了，jsp页面也是翻译成servlet程序的，记住jsp页面的作用：回传 html 页面的数据，代码可读性和可维护性比servlet程序更好</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210151030008.png" alt="image-20220210151030008"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213180425254.png" alt="image-20220213180425254"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213180511636.png" alt="image-20220213180511636"></p><p><strong>写完后访问这个Servlet</strong></p><h3 id="9-listener监听器"><a href="#9-listener监听器" class="headerlink" title="9.listener监听器"></a>9.listener监听器</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210152931363.png" alt="image-20220210152931363"></p><p>一共8个，只有这个还有用。</p><h4 id="ServletContextL-istener监听器"><a href="#ServletContextL-istener监听器" class="headerlink" title="ServletContextL istener监听器"></a>ServletContextL istener监听器</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210153329893.png" alt="image-20220210153329893"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210153554491.png" alt="image-20220210153554491"></p><p>步骤：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210153707556.png" alt="image-20220210153707556"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210153850175.png" alt="image-20220210153850175"></p><p>注解 @WebListener </p><p>学习Spring时会用到</p><h2 id="十-EL表达式"><a href="#十-EL表达式" class="headerlink" title="十.EL表达式"></a>十.EL表达式</h2><p><strong>el替换了jsp的&lt;%= %&gt;</strong></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210154437341.png" alt="image-20220210154437341"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210154817560.png" alt="image-20220210154817560"></p><p>如果key是没有set的：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210154923399.png" alt="image-20220210154923399">v</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210155207025.png" alt="image-20220210155207025"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210155253117.png" alt="image-20220210155253117"></p><p>先存在域里（或者传过来），再输出。</p><p>应该使用了jsp-api这个包</p><h3 id="1-EL表达式搜索域数据的顺序"><a href="#1-EL表达式搜索域数据的顺序" class="headerlink" title="1.EL表达式搜索域数据的顺序"></a>1.EL表达式搜索域数据的顺序</h3><p>当四个域中都有相同的key的数据的时候，EL表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</p><p>从小范围到大范围。<strong>pageContext，request，session， application</strong></p><p>后面在第4点时，讲到了相同的key时，也可以指定某个域。</p><p> <img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210164020860.png" alt="image-20220210164020860"></p><h3 id="2-c-EL表达式输出Bean的普通属性，数组属性。List-集合属性-map集合属性"><a href="#2-c-EL表达式输出Bean的普通属性，数组属性。List-集合属性-map集合属性" class="headerlink" title="2.c)EL表达式输出Bean的普通属性，数组属性。List 集合属性,map集合属性"></a>2.c)EL表达式输出Bean的普通属性，数组属性。List 集合属性,map集合属性</h3><p>EL表达式会根据name去User类里寻找这个name的get方法，此时会自动把name首字母大写并加上get前缀，一旦找到与之匹配的方法，El表达式就会认为这就是要访问的属性，并返回属性的值。</p><p>所以说：在Person对象里 只写一个get方法，不写类的成员变量都能使用！！</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210174324144.png" alt="image-20220210174324144"></p><p>还有一点注意：如果一个成员变量是boolean类型，自动生成的get方法 ，命名是is什么什么。 这样的话EL表达式会根据ok的类型，自动去找isOk 这个方法。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213172320778.png" alt="image-20220213172320778"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213172604194.png" alt="image-20220213172604194"></p><h3 id="3-EL表达式—运算"><a href="#3-EL表达式—运算" class="headerlink" title="3.EL表达式—运算"></a>3.EL表达式—运算</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210195649962.png" alt="image-20220210195649962"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210195955189.png" alt="image-20220210195955189"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210200724308.png" alt="image-20220210200724308"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210200701338.png" alt="image-20220210200701338"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210201550499.png" alt="image-20220210201550499"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page import="java.util.List" %>&lt;%@ page import="java.util.ArrayList" %>&lt;%@ page import="java.util.Map" %>&lt;%@ page import="java.util.HashMap" %>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    &lt;%//        1、值为null值的时候，为空        request.setAttribute("emptyNull", null);//        2、值为空串的时候，为空        request.setAttribute("emptyStr", "");//        3、值是Object类型数组，长度为零的时候        request.setAttribute("emptyArr", new Object[]&#123;&#125;);//        4、list集合，元素个数为零        List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span> list = new ArrayList&lt;>();//        list.add("abc");        request.setAttribute("emptyList", list);//        5、map集合，元素个数为零        Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">></span></span> map = new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">></span></span>();//        map.put("key1", "value1");        request.setAttribute("emptyMap", map);    %>    $&#123; empty emptyNull &#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    $&#123; empty emptyStr &#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    $&#123; empty emptyArr &#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    $&#123; empty emptyList &#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    $&#123; empty emptyMap &#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    $&#123; 12 != 12 ? "A":"B" &#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210204447469.png" alt="image-20220210204447469"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220210204757451.png" alt="image-20220210204757451"></p><p>双引号 也可以</p><h3 id="4-EL表达式的11个隐含对象"><a href="#4-EL表达式的11个隐含对象" class="headerlink" title="4.EL表达式的11个隐含对象"></a>4.EL表达式的11个隐含对象</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211095636235.png" alt="image-20220211095636235"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211095738603.png" alt="image-20220211095738603"></p><p>pageContext的使用：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211105004035.png" alt="image-20220211105004035"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211110210557.png" alt="image-20220211110210557"></p><p>两个一样：</p><p>为什么.scheme 就相当于.getScheme。因为输出数据时 会默认的找这个的get+首字母大写的那个方法</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211105233173.png" alt="image-20220211105233173"></p><p>4个域的使用：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211103504695.png" alt="image-20220211103504695"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211103439001.png" alt="image-20220211103439001"></p><p>param：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211111359671.png" alt="image-20220211111359671"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211111454217.png" alt="image-20220211111454217"></p><p>key 是String V是String[]</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211111941409.png" alt="image-20220211111941409"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211112221622.png" alt="image-20220211112221622"></p><p>输出  wzg168</p><p>当遇到要获取复选框中的数据的场景时可以使用这个参数</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211112837572.png" alt="image-20220211112837572"></p><p>header:</p><p>取请求头的某一个  因为User-Agent有特殊字符 所以用大括号</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220211152502223.png" alt="image-20220211152502223"></p><p>cookie:</p><p>键是String类型。cookie.JSESSIONID就是找到了JSESSIONID的值，.name就是getName</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220212103118098.png" alt="image-20220212103118098"></p><p>initparam:</p><p>读取配置文件<img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220212103035573.png" alt="image-20220212103035573"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220212102843543.png" alt="image-20220212102843543"></p><h2 id="十一-JSTL标签库"><a href="#十一-JSTL标签库" class="headerlink" title="十一.JSTL标签库"></a>十一.JSTL标签库</h2><p><strong>el替换jsp的 &lt;%= %&gt;，jstl替换jsp的 &lt;% %&gt;</strong></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220212173324558.png" alt="image-20220212173324558"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220212173913950.png" alt="image-20220212173913950"></p><p>使用前先引入</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220212174037801.png" alt="image-20220212174037801"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220212194122164.png" alt="image-20220212194122164"></p><h3 id="1-set标签"><a href="#1-set标签" class="headerlink" title="1.set标签"></a>1.set标签</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213114027584.png" alt="image-20220213114027584"></p><h3 id="2-if标签"><a href="#2-if标签" class="headerlink" title="2.if标签"></a>2.if标签</h3><p>如果成立，则中间的输出</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213114401952.png" alt="image-20220213114401952"></p><h3 id="3-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#3-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="3. &lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签"></a>3. <code>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;</code>标签</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213114910476.png" alt="image-20220213114910476"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213150811117.png" alt="image-20220213150811117"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213154008854.png" alt="image-20220213154008854"></p><h3 id="4-forEach标签"><a href="#4-forEach标签" class="headerlink" title="4.forEach标签"></a>4.forEach标签</h3><h4 id="遍历1到10"><a href="#遍历1到10" class="headerlink" title="遍历1到10"></a>遍历1到10</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213154711117.png" alt="image-20220213154711117"></p><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213155619437.png" alt="image-20220213155619437"></p><h4 id="遍历Map集合"><a href="#遍历Map集合" class="headerlink" title="遍历Map集合"></a>遍历Map集合</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213160251066.png" alt="image-20220213160251066"></p><h4 id="遍历List集合"><a href="#遍历List集合" class="headerlink" title="遍历List集合"></a>遍历List集合</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213160747881.png" alt="image-20220213160747881"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213162540691.png" alt="image-20220213162540691"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213162801597.png" alt="image-20220213162801597"></p><h4 id="forEach标签所有属性组合使用介绍"><a href="#forEach标签所有属性组合使用介绍" class="headerlink" title="forEach标签所有属性组合使用介绍"></a>forEach标签所有属性组合使用介绍</h4><p>begin和end:</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213163344406.png" alt="image-20220213163344406"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213163403622.png" alt="image-20220213163403622"></p><p>step:</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213163553238.png" alt="image-20220213163553238"></p><p>varStatus: 变量状态</p><p>分析源码可得：</p><p>可以使用的方法和作用：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213172757823.png" alt="image-20220213172757823"></p><p>使用：status.Current …………………………..</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220213171444418.png" alt="image-20220213171444418"></p><p>如果一个成员变量是boolean类型，自动生成的get方法 ，命名是is什么什么。 这样的话EL表达式会根据first的类型，自动去找isFirst这个方法。</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习—2</title>
      <link href="/2022/01/29/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%942/"/>
      <url>/2022/01/29/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%942/</url>
      
        <content type="html"><![CDATA[<h1 id="代码随想录学习笔记"><a href="#代码随想录学习笔记" class="headerlink" title="代码随想录学习笔记"></a><a href="https://programmercarl.com/">代码随想录</a>学习笔记</h1><p>结合自身需求，本篇主要偏重java</p><p><a href="https://github.com/youngyangyang04/leetcode-master">学习地址</a></p><h2 id="三-哈希表"><a href="#三-哈希表" class="headerlink" title="三.哈希表"></a>三.哈希表</h2><h3 id="1-理论"><a href="#1-理论" class="headerlink" title="1.理论"></a>1.理论</h3><h3 id="2-有效的字母异位词"><a href="#2-有效的字母异位词" class="headerlink" title="2. 有效的字母异位词"></a>2. <a href="https://leetcode-cn.com/problems/valid-anagram/">有效的字母异位词</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">boolean</span> bool<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tt<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tt<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> c <span class="token operator">=</span> tt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ss<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> c <span class="token operator">=</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>bool<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bool<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>哈希的应用:把 每一个字母 对应  数组中每一个位置。位置是数是字母的个数。</p><p>时间复杂度降到了O(n)。 </p><h3 id="3-两个数组的交集"><a href="#3-两个数组的交集" class="headerlink" title="3.两个数组的交集"></a>3.<a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">两个数组的交集</a></h3><p>计算数组的交集 数组里有重复的元素， 放入hashset 去除重复元素 然后遍历第二个数组 是否包含在set里 如果包含就加入结果数组中；</p><p>实际写代码调试的时候发现 两个数组都要去除重复元素，因为在确定返回数组的个数时，遍历第二个数组 是否包含在set里时会重复计算相同元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> re <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token operator">:</span>set2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        re<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token operator">:</span>set2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>re<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> re<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的题解属于暴力算法 两个数组去重后 遍历两次，一次确定重复的个数，一个添加进放回的数组。</p><h3 id="4-快乐数"><a href="#4-快乐数" class="headerlink" title="4.快乐数"></a>4.<a href="https://leetcode-cn.com/problems/happy-number/">快乐数</a></h3><p>重点：题目中说了会 <strong>无限循环</strong>，那么也就是说<strong>求和的过程中，sum会重复出现</strong></p><p>判断重复出现要使用set</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">=</span> <span class="token function">nextN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextN</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> re<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span> re<span class="token operator">+=</span>a<span class="token operator">*</span>a<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-两数之和"><a href="#5-两数之和" class="headerlink" title="5.两数之和"></a>5.<a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></h3><p><a href="https://www.programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242. 有效的字母异位词 (opens new window)</a>这道题目是用数组作为哈希表来解决哈希问题，<a href="https://www.programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html">349. 两个数组的交集 (opens new window)</a>这道题目是通过set作为哈希表来解决哈希问题。</p><p>本题呢，则要使用map，那么来看一下使用数组和set来做哈希法的局限。</p><ul><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li></ul><p>此时就要选择另一种数据结构：map ，map是一种key value的存储结构，可以用key保存数值，用value在保存数值所在的下标。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              ints<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ints<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个数相加 符合条件的 一定是一个在前 一个在后，并且同一个元素不能使用两遍。所有要先判断前面是不是有需要的，没有的话再把它加进去，</p><p>我们想要的这两个数 在循环中会都会经过。前面的是加进去的，后面的确认。 两个数一前一后 后面的肯定很找到前面的。</p><h3 id="6-四数相加-II"><a href="#6-四数相加-II" class="headerlink" title="6.四数相加 II"></a>6.<a href="https://leetcode-cn.com/problems/4sum-ii/">四数相加 II</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums3<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> re<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums4<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token punctuation">(</span>nums3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums4<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>re<span class="token operator">+=</span>map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token punctuation">(</span>nums3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums4<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> re<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两重循环把两个数组 和 的所有可能值和个数 统计一遍。</p><p>再来两重循环 把剩余两个数组 和的所有可能的值 匹配一次</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220119120339780.png" alt="image-20220119120339780"></p><h3 id="7-赎金信"><a href="#7-赎金信" class="headerlink" title="7.赎金信"></a>7.<a href="https://leetcode-cn.com/problems/ransom-note/">赎金信</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canConstruct</span><span class="token punctuation">(</span><span class="token class-name">String</span> ransomNote<span class="token punctuation">,</span> <span class="token class-name">String</span> magazine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span>magazine<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span>ransomNote<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与  2. [有效的字母异位词] 相似 利用数组作为哈希表来解决问题</p><p>arr[i]&lt;0 时说明ransomnote里的字母在magazine没有或不够。</p><h3 id="8-三数之和"><a href="#8-三数之和" class="headerlink" title="8.三数之和"></a>8.<a href="https://leetcode-cn.com/problems/3sum/">三数之和</a></h3><p> 双指针法，使用的是map的包含方法。</p><p>如果使用双指针一定是可以排序的数组，排序后不影响结果的题目</p><p>两数之和 如果使用双指针，排序后索引改变，影响返回结果；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> LK015 <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//满足条件，说明后面的都是大于0的，相加不可能是0</span>                <span class="token comment">//这个if 可以省略</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果它和前面的数一样。那么最后放回的值一样  可以跳过。主要是达到去重，完成题目要求；</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//去除重复</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>                                        right<span class="token operator">--</span><span class="token punctuation">;</span>                     left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-四数之和"><a href="#9-四数之和" class="headerlink" title="9.四数之和"></a>9.<a href="https://leetcode-cn.com/problems/4sum/">四数之和</a></h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220121193849422.png" alt="image-20220121193849422"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span>  <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//j>i+1 第一个是需要的 如果后面还有是重复的</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">></span>i<span class="token operator">+</span><span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> left<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> rigth<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>rigth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>rigth<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">></span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rigth<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>rigth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里记得写：left&lt;rigth </span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>rigth <span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>rigth <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>rigth<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>rigth<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rigth<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>left<span class="token operator">++</span><span class="token punctuation">;</span>rigth<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> list<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220121193806281.png" alt="image-20220121193806281">案例思考：</p><h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10.总结"></a>10.总结</h3><ul><li>数组：2，7</li><li>set：3，4</li><li>map：5，6</li><li>双指针：8，9</li></ul><h2 id="四-字符串"><a href="#四-字符串" class="headerlink" title="四.字符串"></a>四.字符串</h2><h3 id="1-反转字符串"><a href="#1-反转字符串" class="headerlink" title="1. 反转字符串"></a>1.<a href="https://leetcode-cn.com/problems/reverse-string/"> 反转字符串</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> temp<span class="token punctuation">;</span>temp<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-反转字符串-II"><a href="#2-反转字符串-II" class="headerlink" title="2.反转字符串 II"></a>2.<a href="https://leetcode-cn.com/problems/reverse-string-ii/">反转字符串 II</a></h3><p>我的，太复杂了 不好</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token operator">></span>chars<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> i<span class="token punctuation">,</span>r<span class="token operator">=</span>chars<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">,</span>r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> temp<span class="token operator">=</span>chars<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> i<span class="token punctuation">,</span>r<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token punctuation">;</span> l <span class="token operator">&lt;</span>i<span class="token operator">+</span>k<span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">,</span>r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> temp<span class="token operator">=</span>chars<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> ch<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符 或正常情况。 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">&lt;=</span> ch<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reverse</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> k <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 3. 剩余字符少于 k 个，则将剩余字符全部反转</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义翻转函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> temp  <span class="token operator">=</span> ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-剑指-Offer-05-替换空格"><a href="#3-剑指-Offer-05-替换空格" class="headerlink" title="3.剑指 Offer 05. 替换空格"></a>3.<a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//瞎搞</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></p><p>java字符串长度增加原理（体外话：本质，通过StringBuilder走中间过程，通过append方法实现）：String1=String1+String2; </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//StringBuffer是线程安全的，而StringBuilder则没有实现线程安全功能，所以性能略高。</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//原来的长度</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token operator">+=</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> left<span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> rigth<span class="token operator">=</span>chars<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>rigth<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>rigth<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>rigth<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>rigth<span class="token punctuation">]</span><span class="token operator">=</span>chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>rigth<span class="token operator">--</span><span class="token punctuation">;</span>left<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//StringBuffer是线程安全的，而StringBuilder则没有实现线程安全功能，所以性能略高。</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token operator">+=</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> left<span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> rigth<span class="token operator">=</span>chars<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>rigth<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>rigth<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>rigth<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>rigth<span class="token punctuation">]</span><span class="token operator">=</span>chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>rigth<span class="token operator">--</span><span class="token punctuation">;</span>left<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-翻转字符串里的单词"><a href="#4-翻转字符串里的单词" class="headerlink" title="4.翻转字符串里的单词"></a>4.<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/">翻转字符串里的单词</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//trim()的作用是去掉字符串两端的多余的空格</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ss<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//空格大量存在时 有的元素是空的。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token operator">+=</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s<span class="token operator">+=</span><span class="token string">" "</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**     * 不使用Java内置方法实现     * 1.去除首尾以及中间多余空格     * 2.反转整个字符串     * 3.反转各个单词     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// System.out.println("ReverseWords.reverseWords2() called with: s = [" + s + "]");</span>        <span class="token comment">// 1.去除首尾以及中间多余空格</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token function">removeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.反转整个字符串</span>        <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.反转各个单词</span>        <span class="token function">reverseEachWord</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">StringBuilder</span> <span class="token function">removeSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// System.out.println("ReverseWords.removeSpace() called with: s = [" + s + "]");</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token operator">||</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// System.out.println("ReverseWords.removeSpace returned: sb = [" + sb + "]");</span>        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 反转字符串指定区间[start, end]的字符     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// System.out.println("ReverseWords.reverseString() called with: sb = [" + sb + "], start = [" + start + "], end = [" + end + "]");</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// System.out.println("ReverseWords.reverseString returned: sb = [" + sb + "]");</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverseEachWord</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                end<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            end <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-剑指-Offer-58-II-左旋转字符串"><a href="#5-剑指-Offer-58-II-左旋转字符串" class="headerlink" title="5.剑指 Offer 58 - II. 左旋转字符串"></a>5.<a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></h3><pre class="line-numbers language-jav" data-language="jav"><code class="language-jav">class Solution &#123;    public String reverseLeftWords(String s, int n) &#123;StringBuilder sBuilder &#x3D;new StringBuilder();for (int i &#x3D; n; i &lt; s.length(); i++) &#123;sBuilder.append(s.charAt(i));&#125;for(int i &#x3D; 0;i&lt;n;i++) &#123;sBuilder.append(s.charAt(i));&#125;return sBuilder.toString();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-KMP"><a href="#6-KMP" class="headerlink" title="6.KMP"></a>6.KMP</h3><ul><li>前缀：包含第一个 不包含最后一个 的所有子串（有多个</li><li>后缀</li><li>最长相等前后缀 eg：<img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220124213751578.png" alt="image-20220124213751578"></li></ul><p>那么模式串 aabaaf 的前缀表（那么也就是next数组）是0 1 0 1 2 0</p><p>求next数组代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> next<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 注意i从1开始</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 前后缀不相同了</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 向前回退</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 找到相同的前后缀</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 将j（前缀的长度）赋给next[i]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求next数组：1.初始化，2循环i，3. 不相同循环回退 相同j++  最后赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">getNext</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">,</span>  <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 当 needle 是空字符串时我们应当返回 0</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 找到首字母相等</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 没有首字母相等的</span>              <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// 遍历后续字符，判断是否相等</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>          j<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 找到</span>              <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 未找到</span>              i <span class="token operator">-=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>              j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-栈与队列"><a href="#五-栈与队列" class="headerlink" title="五.栈与队列"></a>五.栈与队列</h2><h3 id="1-理论-1"><a href="#1-理论-1" class="headerlink" title="1.理论"></a>1.理论</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//队列和栈 都可以用它</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//相当于 1 2 3</span>deque<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token keyword">int</span> i <span class="token operator">=</span>deque<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">=</span>deque<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">=</span>deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">=</span>deque<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">4</span><span class="token number">3</span><span class="token number">3</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-用栈实现队列"><a href="#2-用栈实现队列" class="headerlink" title="2.用栈实现队列"></a>2.<a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">用栈实现队列</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack_in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack_out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack_in<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//一个空的队列不会调用 pop 或者 peek 操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack_out<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack_in<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>stack_out<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>stack_in<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> stack_out<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> stack_out<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack_out<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack_in<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>stack_out<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>stack_in<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> stack_out<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> stack_out<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> stack_in<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> stack_out<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-用队列实现栈"><a href="#3-用队列实现栈" class="headerlink" title="3.用队列实现栈"></a>3.<a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">用队列实现栈</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-有效的括号"><a href="#4-有效的括号" class="headerlink" title="4.有效的括号"></a>4.<a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'('</span><span class="token operator">||</span>c<span class="token operator">==</span> <span class="token string">'&#123;'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">')'</span><span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'&#125;'</span><span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'&#123;'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">']'</span><span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'['</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除字符串中的所有相邻重复项"><a href="#5-删除字符串中的所有相邻重复项" class="headerlink" title="5.删除字符串中的所有相邻重复项"></a>5.<a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">删除字符串中的所有相邻重复项</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>deque<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-逆波兰表达式求值"><a href="#6-逆波兰表达式求值" class="headerlink" title="6.逆波兰表达式求值"></a>6.<a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">逆波兰表达式求值</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num<span class="token operator">=</span>b<span class="token operator">+</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num<span class="token operator">=</span>b<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num<span class="token operator">=</span>b<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里要注意 不是a/b哦</span>num<span class="token operator">=</span>b<span class="token operator">/</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>deque<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>deque<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-滑动窗口最大值"><a href="#7-滑动窗口最大值" class="headerlink" title="7.滑动窗口最大值"></a>7.<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">滑动窗口最大值</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//一共窗口的次数</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//进入队列</span>            <span class="token comment">// 如果队列不为空且当前考察元素大于等于队尾元素，则将队尾元素移除。</span>            <span class="token comment">// 直到，队列为空或当前考察元素小于新的队尾元素</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>deque<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存储元素下标</span>deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> left <span class="token operator">=</span> right <span class="token operator">-</span> k <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 当队首元素的下标小于滑动窗口左侧边界left时</span>            <span class="token comment">// 表示队首元素已经不再滑动窗口内，因此将其从队首移除 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 由于数组下标从0开始，因此当窗口右边界right+1大于等于窗口大小k时</span>            <span class="token comment">// 意味着窗口形成。此时，队首元素就是该窗口内的最大值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">+</span><span class="token number">1</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>deque<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-前-K-个高频元素"><a href="#8-前-K-个高频元素" class="headerlink" title="8.前 K 个高频元素"></a>8.<a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">前 K 个高频元素</a></h3><p>先用map统计 然后用优先队列统计前K个大的。  重点：优先队列统计前K个大 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token operator">-</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优先级队列PriorityQueue</strong></p><p>我们都知道队列，队列的核心思想就是先进先出，这个优先级队列有点不太一样。优先级队列中，数据按关键词有序排列，插入新数据的时候，会自动插入到合适的位置保证队列有序。（顺序有两种形式：升序或者是降序）</p><p>优先级队列底层的数据结构其实是一颗二叉堆（一个完全二叉树）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习—1</title>
      <link href="/2022/01/18/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%941/"/>
      <url>/2022/01/18/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%941/</url>
      
        <content type="html"><![CDATA[<h1 id="代码随想录学习笔记"><a href="#代码随想录学习笔记" class="headerlink" title="代码随想录学习笔记"></a><a href="https://programmercarl.com/">代码随想录</a>学习笔记</h1><p>结合自身需求，本篇主要偏重java</p><p><a href="https://github.com/youngyangyang04/leetcode-master">学习地址</a></p><h2 id="一-数组"><a href="#一-数组" class="headerlink" title="一.数组"></a>一.数组</h2><h3 id="1-理论"><a href="#1-理论" class="headerlink" title="1.理论"></a>1.理论</h3><ul><li><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong></li></ul><ul><li><strong>数组下标都是从0开始的。</strong></li><li><strong>数组内存空间的地址是连续的。</strong></li><li>java内存图：</li></ul><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20201214111631844.png" alt="算法通关数组3"></p><h3 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h3><p>二分查找也称折半查找（Binary Search）,是一个高效的查找算法。</p><pre class="line-numbers language-none"><code class="language-none">首先，假设数组中的元素是按升序排列；将数组中间位置记录的元素值与要查找的元素值比较，如果两者相等，则查找成功；否则利用中间位置的记录将数组分成前、后两个子数组；如果中间位置记录的元素值大于要查找元素值，则进一步查找前一子数组，否则进一步查找后一子数组。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在java的集合对象中也提供了二分查找的算法，如下面的java api接口：</p><p>如果返回值&gt;=0 说明存在key,否则不存在该key(不存在返回-(low + 1);)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Comparator</span><span class="token punctuation">)</span>     <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重点：*<u>**折半查找要求查询的数组的元素是      1.有序排列的  2.无重复的 *<em>。</u></em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> t_binarySearch <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引下标是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//索引下标是-3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引下标是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//索引下标是1</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-移除元素"><a href="#3-移除元素" class="headerlink" title="3.移除元素"></a>3.移除元素</h3><p><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。</strong></p><p>我的理解：快指针是在前面进行预先处理的，慢指针保存我们最后需要的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 快慢指针</span>        <span class="token keyword">int</span> fastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slowIndex<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>slowIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fastIndex <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fastIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nums<span class="token punctuation">[</span>slowIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                slowIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slowIndex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例题1：<a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> fastIndex<span class="token punctuation">;</span>        <span class="token keyword">int</span> slowIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>fastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fastIndex<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>fastIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>slowIndex<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            slowIndex<span class="token operator">++</span><span class="token punctuation">;</span>            c<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>c<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先移动不是0的元素在前面，后面的补零即可。</p><h3 id="4-有序数组的平方"><a href="#4-有序数组的平方" class="headerlink" title="4. 有序数组的平方"></a>4.<a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/"> 有序数组的平方</a></h3><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p>解读：给你一个递增序列，返回每个元素平方后的递增序列。</p><p>java.api暴力解答：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220115112659380.png" alt="image-20220115112659380"></p><p>观察最大值每次存在左右两端。</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220115112915801.png" alt="image-20220115112915801"></p><p>使用双指针</p><pre class="line-numbers language-none"><code class="language-none">import java.util.Arrays;class Solution &#123;    public int[] sortedSquares(int[] nums) &#123;        int right&#x3D;nums.length-1;        int left&#x3D;0;        &#x2F;&#x2F;每次比较两端的值 放入数组的最后        int[] ints&#x3D;new int[nums.length];        int wz&#x3D;nums.length;        while(left&lt;&#x3D;right)&#123;            if(nums[left]*nums[left]&gt;nums[right]*nums[right])&#123;                ints[--wz]&#x3D;nums[left]*nums[left];                left++;            &#125;else&#123;                ints[--wz]&#x3D;nums[right]*nums[right];                right--;            &#125;        &#125;        return ints;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-长度最小的子数组"><a href="#5-长度最小的子数组" class="headerlink" title="5.长度最小的子数组"></a>5.<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">长度最小的子数组</a></h3><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><p>输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。</p><p><u>无论是暴力还是使用“滑动窗口”（双指针的方法）都是为了确定子序列的起始位置和结束位置</u></p><p>暴力：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> qswz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> jswz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> jg<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>qswz<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>qswz<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>jswz<span class="token operator">=</span>qswz<span class="token punctuation">;</span>jswz<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>jswz<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>jswz<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    jg<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>jswz<span class="token operator">-</span>qswz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> jg <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> jg<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是从每一个位置开始先后计算到满足条件后跳出。</p><p>所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> qswz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> jswz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> jg<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>jswz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>jswz<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>jswz<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>jswz<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">int</span> l<span class="token operator">=</span>jswz<span class="token operator">-</span>qswz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>               jg<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>jg<span class="token punctuation">)</span><span class="token punctuation">;</span>               sum<span class="token operator">-=</span>nums<span class="token punctuation">[</span>qswz<span class="token punctuation">]</span><span class="token punctuation">;</span>               qswz<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> jg <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> jg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解：当子序列和大于等于 值 时就减去前面的，增加起始位置，子序列和小于时就加后面的元素，增加结束位置。一个循环解决问题。</p><h3 id="6-螺旋矩阵-II"><a href="#6-螺旋矩阵-II" class="headerlink" title="6.螺旋矩阵 II"></a>6.<a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">螺旋矩阵 II</a></h3><p>n=3，4和5 为例.</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220115203028062.png" alt="image-20220115203028062"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220115203035670.png" alt="image-20220115203035670"><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20220115205313285.png" alt="image-20220115205313285"></p><p>本题在于找到合适的模拟过程；</p><p>分析：</p><ul><li>一圈一圈的转 转一圈减少2行和两列；n=3，转1圈，n=4，5，转2圈；</li></ul><p>圈数=n/2；</p><ul><li><p>n=5，每一行一列走4个 碰到拐角停止 每次走n-1个，走4次。刚好走完一圈。</p></li><li><p>第二圈 改变起始位置，每次走n-3个 如果n-3=0 说明到最后一个了</p></li><li><p>第三圈 改变起始位置，每次走n-5个 如果n-5=0 说明到最后一个了 &lt;0 说明走完了</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qs<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> startX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> startY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> zodeshu<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>qs<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>zodeshu<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ints<span class="token punctuation">[</span>startX<span class="token punctuation">]</span><span class="token punctuation">[</span>startY<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>z<span class="token operator">&lt;</span>zodeshu<span class="token punctuation">;</span>z<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ints<span class="token punctuation">[</span>startX<span class="token operator">+</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>startY<span class="token operator">+</span>zodeshu<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>z<span class="token operator">&lt;</span>zodeshu<span class="token punctuation">;</span>z<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ints<span class="token punctuation">[</span>startX<span class="token operator">+</span>zodeshu<span class="token punctuation">]</span><span class="token punctuation">[</span>startY<span class="token operator">+</span>zodeshu<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>z<span class="token operator">&lt;</span>zodeshu<span class="token punctuation">;</span>z<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ints<span class="token punctuation">[</span>startX<span class="token operator">+</span>zodeshu<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>startY<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        zodeshu<span class="token operator">=</span>zodeshu<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        startX<span class="token operator">++</span><span class="token punctuation">;</span>        startY<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ints<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ints<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与教程中大致相同。</p><h2 id="二-链表"><a href="#二-链表" class="headerlink" title="二.链表"></a>二.链表</h2><h3 id="1-理论-1"><a href="#1-理论-1" class="headerlink" title="1.理论"></a>1.理论</h3><ul><li><p>单链表</p></li><li><p>双链表</p></li><li><p>循环链表</p></li><li><p>虚拟头结点</p><p>链表的一大问题就是操作当前节点必须要找前一个节点才能操作。这就造成了，头结点的尴尬，因为头结点没有前一个节点了。</p><p>因为本次针对Java来学习。java中有大量的链表API 因此 有一部分略过。</p></li></ul><h3 id="2-反转链表"><a href="#2-反转链表" class="headerlink" title="2.反转链表"></a>2.<a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></h3><p>双指针法 与 递归法思想一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ListNode</span> temp<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>temp 保存cur后面的 防止改动cur指针后丢失后面的。</p><h3 id="3-删除链表的倒数第-N-个结点"><a href="#3-删除链表的倒数第-N-个结点" class="headerlink" title="3.删除链表的倒数第 N 个结点"></a>3.<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第 N 个结点</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双指针的经典应用，如果要删除倒数第n个节点，让fast移动n步，然后让fast和slow同时移动，直到fast指向链表末尾。删掉slow所指向的节点就可以了。</p><p>梳理：</p><ul><li><p>控制好 pre 和 cur 保持的距离和n的关系，确保能删除倒是第n的</p></li><li><p>考虑 使用虚拟头结点 可能会删除真头结点</p></li><li><p>考虑 只有一个结点并要删除</p></li></ul><h3 id="4-链表相交"><a href="#4-链表相交" class="headerlink" title="4.链表相交"></a>4.<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">链表相交</a></h3> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> la<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lb<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> re<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pa<span class="token operator">=</span>headA<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pb<span class="token operator">=</span>headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pa<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pa<span class="token operator">=</span>pa<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            la<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pb<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pb<span class="token operator">=</span>pb<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            lb<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>la<span class="token operator">></span>lb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cha<span class="token operator">=</span>la<span class="token operator">-</span>lb<span class="token punctuation">;</span>         pa<span class="token operator">=</span>headA<span class="token punctuation">;</span>         pb<span class="token operator">=</span>headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cha<span class="token operator">--</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pa<span class="token operator">=</span>pa<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pb<span class="token operator">!=</span>pa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pb<span class="token operator">=</span>pb<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pa<span class="token operator">=</span>pa<span class="token punctuation">.</span>next<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        re<span class="token operator">=</span>pa<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>la<span class="token operator">&lt;=</span>lb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cha<span class="token operator">=</span>lb<span class="token operator">-</span>la<span class="token punctuation">;</span>         pa<span class="token operator">=</span>headA<span class="token punctuation">;</span>         pb<span class="token operator">=</span>headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cha<span class="token operator">--</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pb<span class="token operator">=</span>pb<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pb<span class="token operator">!=</span>pa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pb<span class="token operator">=</span>pb<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pa<span class="token operator">=</span>pa<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        re<span class="token operator">=</span>pa<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> re<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>梳理：</p><ul><li><p>主要可以想到后面的如果想交个数总是相同的；</p><p>根据个数的差值来来跳过一部分， 寻找后面可能相交的</p></li></ul><h3 id="5-环形链表-II"><a href="#5-环形链表-II" class="headerlink" title="5.环形链表 II"></a>5.<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">环形链表 II</a></h3><p>先使用快慢指针来确定是不是有环，和确定相遇的位置。再使用相遇位置和起始位置确定环的入口。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 有环</span>                <span class="token class-name">ListNode</span> index1 <span class="token operator">=</span> fast<span class="token punctuation">;</span>                <span class="token class-name">ListNode</span> index2 <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token comment">// 两个指针，从头结点和相遇结点，各走一步，直到相遇，相遇点即为环入口</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>index1 <span class="token operator">!=</span> index2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    index1 <span class="token operator">=</span> index1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    index2 <span class="token operator">=</span> index2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> index1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="/2021/12/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/12/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h2><ul><li>地球村</li><li>信件：包{对方的信息，对方的地址，自己的地址}</li><li>打电话<del>连接</del>接了~通话  TCP</li><li>发短信<del>发了就完事了</del>接收 UDP<br>计算机网络：利用通信设备和线路  将<strong>地理位置不同</strong>、功能独立的<strong>多个计算机系统互联起来</strong>，以功能完善的网络软件实现网络中资源共享和信息传递的系统。通过<strong>网络协议</strong>计算机的互联，实现计算机之间的通信，从而实现计算机系统之间的信息、软件和<strong>设备资源的共享</strong>以及协同工作等功能</li></ul><p> 网络编程的目的: 传播交流信息 数据交换 通信</p><p>达到这个效果需要什么： </p><ol><li>怎么准确定位网络上的一台主机  192.168.16.124：  端口 定位到某个计算机上的某个资源</li><li>找到主机怎么传输数据</li></ol><p>Javaweb： 网页编程      B/S结构<br>网络编程 TCP/IP       C/S结构</p><h2 id="二-网络通信的要素"><a href="#二-网络通信的要素" class="headerlink" title="二.网络通信的要素"></a>二.网络通信的要素</h2><p>通信双方的地址：</p><ul><li>ip</li><li>端口号<br>eg:192.168.16.124:5900<br>网络通信的协议：<br>七层模型：<br>传输层<br>定义传输数据的协议端口号，以及流控和差错校验。<br>协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层<h2 id="三-IP"><a href="#三-IP" class="headerlink" title="三.IP"></a>三.IP</h2>ip 地址：InetAddress</li><li>唯一定位一台网络上的计算机</li><li>本机 127.0.01<br>+IP地址的分类<ul><li>ipv4/ipv6<br>  ** IPV4 127.0.01，4个字节0到255 42亿 30亿在北美 </li></ul>  ** IPV6 128位，8个无符号整数<ul><li>公网和私网<br>  ** ABCD类地址</li></ul>  ** 192.168.xx.xx <ul><li>域名 </li></ul></li></ul><h2 id="四-端口"><a href="#四-端口" class="headerlink" title="四.端口"></a>四.端口</h2><p>表示一个计算机上一个程序的进程</p><ol><li>不同的进程有不同的端口号，用来区分软件</li><li>被规定0~65535</li><li>TCP.UDP：6535*2   tcp：80  udp：80 &lt;–这样可以. 单个协议下端口号不能冲突</li><li>端口分类<ul><li>公有端口0-1023 （尽量不要占用公有端口） 比如  HTTP的默认端口：80，HTTPS：443 Telent：23</li><li>程序注册端口1024-49151<br>Tomcat： 8080<br>MySQL：3306<br>Oracle： 1521</li><li>动态，私有端口49152-65535（尽量不用）<br>cmd 输入netstat -ano  查看所以端口<br>netstat -ano |findstr  # 查看指定端口<h2 id="五-通信协议"><a href="#五-通信协议" class="headerlink" title="五.通信协议"></a>五.通信协议</h2>网络通信协议 速率，码率，代码结构，传输控制，等等<br>大事化小 ：分层<br>TCP/IP协议簇（实际上是一组协议）中重要的协议：</li></ul></li><li>TCP：用户传输控制协议</li></ol><ul><li>连接 稳定</li><li>三次握手 四次挥手<pre class="line-numbers language-none"><code class="language-none">a-&gt;b-&gt;a 最少三次 保证稳定连接a-&gt;b-&gt;b-&gt;a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>客户端 服务端</li><li>传输完成释放连接 效率低</li></ul><ol start="2"><li>UDP：用户数据报协议</li></ol><ul><li>不连接 不稳定</li><li>客户端 服务端 没有明确界限</li><li>随时发送</li><li>DDOS：饱和攻击<h2 id="六-TCP"><a href="#六-TCP" class="headerlink" title="六.TCP"></a>六.TCP</h2><h3 id="1-信息"><a href="#1-信息" class="headerlink" title="1.信息"></a>1.信息</h3>客户端</li></ul><ol><li>连接服务器 socket</li><li>发信息<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InetAddress</span> sererIP <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//端口</span>           <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>           <span class="token comment">//2.创建一个socket连接</span>           socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>sererIP<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//3.发消息</span>           os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好0001"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>省略了 try catch 和close<br>服务端</li><li>建立端口</li><li>等待连接 accept</li><li>接受用户信息 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.我得有一个地址</span>         <span class="token comment">//Socket 插座</span>         serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token comment">//等待客户端连接</span>             socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//Socket accept = serverSocket.accept(); //侦听 这个accept 就是客户端socket</span>             <span class="token comment">// 读取客户端信息</span>             is <span class="token operator">=</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//管道流</span>             <span class="token comment">// 字节数组输出流在内存中创建一个字节数组缓冲区，所有发送到输出流的数据保存在该字节数组缓冲区中。</span>             <span class="token comment">//</span>             <span class="token comment">//下面的构造方法创建一个32字节（默认大小）的缓冲区。</span>             <span class="token comment">//此类实现一个输出流，其中数据被写入字节数组。 缓冲区会在数据写入时自动增长</span>             baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> len<span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2.文件上传"></a>2.文件上传</h3></li></ol><p>客户端</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210804161720121.png" alt="image-20210804161720121"></p><p>服务端</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210804161900574.png" alt="image-20210804161900574"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210804162014349.png" alt="image-20210804162014349"></p><h3 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3.Tomcat"></a>3.Tomcat</h3><p>服务端</p><ul><li>自定义 S</li><li> Tocmat服务器S<br>客户端</li><li>自定义 C</li><li>浏览器 B<h2 id="七-UDP"><a href="#七-UDP" class="headerlink" title="七.UDP"></a>七.UDP</h2>发短信：不用连接 但是到知道地址</li></ul><h3 id="1-发送信息"><a href="#1-发送信息" class="headerlink" title="1.发送信息"></a>1.发送信息</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210804170458709.png" alt="image-20210804170458709"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPclient</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> msg<span class="token operator">=</span><span class="token string">"你好 服务器"</span><span class="token punctuation">;</span>        <span class="token class-name">InetAddress</span> inetAddress <span class="token operator">=</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port<span class="token operator">=</span><span class="token number">9090</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> inetAddress<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPservre</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-循环接受"><a href="#2-循环接受" class="headerlink" title="2.循环接受"></a>2.循环接受</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpSeceiveDemo01</span>   <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//准备接受包裹的数组</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//数据程序包</span>            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞式接受包裹</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> receivedata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>receivedata<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出bye  断开连接</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//单纯的s.equals("bye") s里面有1021个0 无法停止</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-多线程在线咨询"><a href="#3-多线程在线咨询" class="headerlink" title="3.多线程在线咨询"></a>3.多线程在线咨询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TalkReceive</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msgFrom<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DatagramSocket</span> socket<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TalkReceive</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> msgFrom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msgFrom <span class="token operator">=</span> msgFrom<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//准备接受包裹的数组</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//数据程序包</span>            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞式接受包裹</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> receivedata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msgFrom<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>receivedata<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出bye  断开连接</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//单纯的s.equals("bye") s里面有1021个0 无法停止</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TalkSend</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> fromPort <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> toIP<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> toPort<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> reader<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TalkSend</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromPort<span class="token punctuation">,</span> <span class="token class-name">String</span> toIP<span class="token punctuation">,</span> <span class="token keyword">int</span> toPort<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fromPort <span class="token operator">=</span> fromPort<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>toIP <span class="token operator">=</span> toIP<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>toPort <span class="token operator">=</span> toPort<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span>fromPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>toIP<span class="token punctuation">,</span> toPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_二叉树（复习）</title>
      <link href="/2021/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%A4%8D%E4%B9%A0%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2021/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%A4%8D%E4%B9%A0%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="数据结构-二叉树（复习）"><a href="#数据结构-二叉树（复习）" class="headerlink" title="数据结构_二叉树（复习）"></a>数据结构_二叉树（复习）</h4><p>（）内为理解方法和注释</p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>​    每个节点的度最大为2（最多拥有两个子树）</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>树的深度：也称为树的高度</p><p>结点的度：一个结点拥有子树的数目称为结点的度</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li><p>满二叉树： 深度为k的二叉树 其结点总数最多为2^k－1</p></li><li><p>完全二叉树：最后一层 从左到右 连续缺少若干个结点</p></li></ul><p>*注：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。</p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ol><li>在二叉树中第 i 层的结点数最多为2^(i-1)（i ≥ 1）</li><li>高度为k的二叉树其结点总数最多为2^k－1（ k ≥ 1）</li></ol> <!--          一个  i减一次      --><!--           一个  K次减一      --><ol start="3"><li><p>n0 = n2 + 1 </p><p>（叶结点为 n0，而其度为 2 的结点数为 n2）</p></li><li><ul><li><p>n=n0+n1+n2</p><p>​    （ n是总结点数，因为度的数一共就这3种情况 ）</p></li><li><p>n0=n2+1= （n/2 向上取整）</p></li><li><p>n=1+n1+2n2</p><p>​    （1代表根，然后统计各个子树的数目。不断加进去）</p></li></ul></li></ol><h3 id="二叉树的先序遍历（Java）"><a href="#二叉树的先序遍历（Java）" class="headerlink" title="二叉树的先序遍历（Java）"></a>二叉树的先序遍历（Java）</h3><p>数组储存二叉树对于索引为K的节点，其左孩子为（2<em>K） 右孩子为（ 2</em>K+1）</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class TreeNode &#123;    int value;    TreeNode left;    TreeNode right;    TreeNode(int value, TreeNode right, TreeNode left)    &#123;        this.value &#x3D; value;        this.right &#x3D; right;        this.left &#x3D; left;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class PreOrderTest &#123;    public static void main(String[] args) &#123;        TreeNode[] nodes &#x3D; new TreeNode[10];        &#x2F;&#x2F;初始化了这个类型的数组        for (int i &#x3D; 0; i &lt; 10; i++) &#123;   &#x2F;&#x2F;初始化这个数组里的给个对象            nodes[i] &#x3D; new TreeNode(i, null, null);        &#125;        for (int i &#x3D; 0; i &lt; 10; i++) &#123;            &#x2F;&#x2F;对于索引为K&#x3D;1 开始的节点，其左孩子为（2*K） 右孩子为（ 2*K+1）            &#x2F;&#x2F;i&#x3D;0 开始            if (i * 2 + 1 &lt; 10) &#123;                &#x2F;&#x2F;如果有左孩子                nodes[i].left &#x3D; nodes[i * 2 + 1];            &#125;            if (i * 2+2 &lt; 10) &#123;                &#x2F;&#x2F; 如果有右孩子                nodes[i].right &#x3D; nodes[i * 2+2];            &#125;        &#125;        preOrderRe(nodes[0]);    &#125;    public static void preOrderRe(TreeNode treeNode) &#123;        System.out.print(treeNode.value);        if (treeNode.left !&#x3D; null) &#123;            preOrderRe(treeNode.left);        &#125;        if (treeNode.right !&#x3D; null) &#123;            preOrderRe(treeNode.right);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构_二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java—SWing及贪吃蛇应用</title>
      <link href="/2021/12/07/GUI%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/12/07/GUI%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li>窗口</li><li>弹窗</li><li>面板</li><li>文本框</li><li>按钮</li><li>图片</li><li>监听事件</li><li>鼠标</li><li>键盘事件</li><li>破解工具<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h1><h2 id="Gui核心技术：Swing-AWT，"><a href="#Gui核心技术：Swing-AWT，" class="headerlink" title="Gui核心技术：Swing AWT，"></a>Gui核心技术：Swing AWT，</h2><h3 id="不流行原因："><a href="#不流行原因：" class="headerlink" title="不流行原因："></a>不流行原因：</h3></li><li>界面不美观</li><li>需要jre环境<h3 id="为什么学？"><a href="#为什么学？" class="headerlink" title="为什么学？"></a>为什么学？</h3></li><li>写小工具  </li><li>工作可能维护swing界面，概率极小！！</li><li>了解mvc架构</li></ol><h1 id="二-AWT"><a href="#二-AWT" class="headerlink" title="二.AWT"></a>二.AWT</h1><h2 id="1-组件和容器"><a href="#1-组件和容器" class="headerlink" title="1.组件和容器"></a>1.组件和容器</h2><h2 id="1-Frame"><a href="#1-Frame" class="headerlink" title="1. Frame"></a>1. Frame</h2><h2 id="2-面板Panel"><a href="#2-面板Panel" class="headerlink" title="2. 面板Panel"></a>2. 面板Panel</h2><h2 id="3-布局管理器"><a href="#3-布局管理器" class="headerlink" title="3. 布局管理器"></a>3. 布局管理器</h2><p> 流式布局<br>东西南北中<br>表格布局   </p><h2 id="4-事件监听"><a href="#4-事件监听" class="headerlink" title="4.事件监听"></a>4.事件监听</h2><h2 id="5-输入框TextField监听"><a href="#5-输入框TextField监听" class="headerlink" title="5.输入框TextField监听"></a>5.输入框TextField监听</h2><h2 id="6-简易计数器（组合-内部类复习）"><a href="#6-简易计数器（组合-内部类复习）" class="headerlink" title="6.简易计数器（组合+内部类复习）"></a>6.简易计数器（组合+内部类复习）</h2><p>oop原则：组合大于继承<br>（1. 组合：一个类的成员变量是另一个类，把一个对象直接直接传到类里 ，然后直接使用传进类的成员<br>比较继承 减低了耦合性<br>（2. 内部类：把一个类写在另一个类里方便直接使用外部类中的成员 </p><h2 id="7-画笔"><a href="#7-画笔" class="headerlink" title="7. 画笔"></a>7. 画笔</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson02</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPaint</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Mypaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Mypaint</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// 画笔</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//画笔 颜色 画画</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 画笔用完 还原到最初的颜色</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>paint方法是applet继承自awt中的Component的方法，<br>会在对象加载时自动调用，用来绘制该组件内部的所有内容。<br>如果想重新调用该方法中执行的操作可以使用repaint()方法。</p><h2 id="8-鼠标监听"><a href="#8-鼠标监听" class="headerlink" title="8.鼠标监听"></a>8.鼠标监听</h2><h2 id="9-窗口监听"><a href="#9-窗口监听" class="headerlink" title="9.窗口监听"></a>9.窗口监听</h2><pre class="line-numbers language-jave" data-language="jave"><code class="language-jave">package com.kuang.lesson03;import java.awt.*;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;public class TestWindow &#123;&#125;class WindowFrame extends Frame &#123;    public WindowFrame()  &#123;        setBounds(200,200,300,300);        setVisible(true);        addWindowListener(new WindowAdapter() &#123;            @Override            public void windowClosing(WindowEvent e) &#123;                System.out.println(&quot;windowOpened&quot;);            &#125;            @Override&#x2F;&#x2F;窗口激活            public void windowActivated(WindowEvent e) &#123;                WindowFrame windowFrame &#x3D; (WindowFrame) e.getSource();                windowFrame.setTitle(&quot;被激活&quot;);            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-键盘监听"><a href="#10-键盘监听" class="headerlink" title="10.键盘监听"></a>10.键盘监听</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">KeyAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">KeyEvent</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestKeylistener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token function">keyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> keyFrame <span class="token keyword">extends</span> <span class="token class-name">Frame</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">keyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//键盘按下的是哪一个</span>                <span class="token comment">// 获得当前键盘的码</span>                <span class="token keyword">int</span> keyCode <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你按下了上键"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三-Swing"><a href="#三-Swing" class="headerlink" title="三.Swing"></a>三.Swing</h1><h2 id="1-窗口-JFrame"><a href="#1-窗口-JFrame" class="headerlink" title="1.窗口 (JFrame)"></a>1.窗口 (JFrame)</h2><p>frame的子类<br>如果没有容器实例化 窗口是没有背景色的</p><p>注意点：<br> JFrame的层次结构<br>Java窗口是指JFrame或者Frame</p><p>其次，窗口背景颜色是指直接调用JFrame或者Frame的setBackground(Color color)方法设置后显示出来的颜色。<u>其实,JFrame在你直接调用这个方法后，你的确设置了背景颜色，而你看到的却不是直接的JFrame或者Frame，而是JFrame.getContentPane()</u>.而JFrame上的contentPane默认是Color.WHITE的，所以，无论你对JFrame或者Frame怎么设置背景颜色，你看到的都只是contentPane.</p><p>最后，讲解决办法：</p><p>办法A:在完成初始化，调用getContentPane()方法得到一个contentPane容器，然后将其设置为不可见，即setVisible(false)。这样，你就可以看到JFrame的庐山真面貌啦！</p><p>核心代码this.getContentPane().setVisible(false);//得到contentPane容器，设置为不可见</p><p>方法B:将contentPane的颜色设置为你想要的颜色，而不搜索是对JFrame本身设置，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson04</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JFrameDeom</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//init初始化</span>        <span class="token comment">//JFrame是一个顶级窗口</span>        <span class="token class-name">JFrame</span> jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"这是一个JFrame窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置文字 Jlabet 标签</span>        <span class="token class-name">JLabel</span> jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"欢迎来到对抗路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置水平居中</span>        jLabel<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                jf<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//容器实例化</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> jf<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭事件</span>       jf<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//建立窗口</span>        <span class="token keyword">new</span> <span class="token class-name">JFrameDeom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-弹窗JDialog"><a href="#2-弹窗JDialog" class="headerlink" title="2.弹窗JDialog"></a>2.弹窗JDialog</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseEvent</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DialogDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">DialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fy:设置默认关闭操作 窗口常量</span>        <span class="token comment">//Jframe 放东西 需要容器</span>        <span class="token class-name">Container</span> contentPane <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绝对定位</span>        contentPane<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按钮</span>        <span class="token class-name">JButton</span> jButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"点击出现弹窗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jButton<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jButton<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//点击按钮 弹出事件</span>        jButton<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">MyDialogdemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发现上下效果一样</span><span class="token comment">//        jButton.addActionListener(new ActionListener()&#123;</span><span class="token comment">//            @Override</span><span class="token comment">//            public void actionPerformed(ActionEvent e) &#123;</span><span class="token comment">//               new MyDialogdemo();</span><span class="token comment">//            &#125;</span><span class="token comment">//        &#125;);</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">DialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//弹窗</span><span class="token keyword">class</span> <span class="token class-name">MyDialogdemo</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyDialogdemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); 默认有关闭操作</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//子类没有重写 会调父类的</span>        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"王者"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-标签label"><a href="#3-标签label" class="headerlink" title="3.标签label"></a>3.标签label</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">JLable</span><span class="token punctuation">(</span><span class="token string">"文字"</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.）图标Icon</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson04</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">//图标接口 需要实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> iconDemo <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Icon</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> heigth<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">iconDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">iconDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> heigth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heigth <span class="token operator">=</span> heigth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        iconDemo iconDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">iconDemo</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//图标 可以放在 标签 按钮等等上</span>        <span class="token class-name">JLabel</span> jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"adc"</span><span class="token punctuation">,</span>iconDemo<span class="token punctuation">,</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Container</span> contentPane <span class="token operator">=</span> iconDemo<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//容器</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>        iconDemo<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token function">iconDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">,</span> <span class="token class-name">Graphics</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heigth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.）图片icon</p><h2 id="4-面板（Jpanel）"><a href="#4-面板（Jpanel）" class="headerlink" title="4.面板（Jpanel）"></a>4.面板（Jpanel）</h2><p>滚动框(JScrollPanel)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson05</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JScrollPanelDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">JScrollPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文本域</span>        <span class="token class-name">JTextArea</span> textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//行列字数</span>        textArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abcdefgh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Scroll面板</span>        <span class="token class-name">JScrollPane</span> scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollPane<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">JScrollPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-按钮-jbutton"><a href="#5-按钮-jbutton" class="headerlink" title="5.按钮(jbutton)"></a>5.按钮(jbutton)</h2><ol><li>图片按钮<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>lesson05</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JbttonDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">JbttonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//图片变图标</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token class-name">JbttonDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"eyykl8.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//url路径</span>        <span class="token class-name">ImageIcon</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//图标放在按钮上</span>        <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"这是一个图标按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">JbttonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>单选按钮JRadioButton</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">mport javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JbttonDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">JbttonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//单选框</span>        <span class="token class-name">JRadioButton</span> radioButton01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JRadioButton</span> radioButton02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JRadioButton</span> radioButton03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 由于单选框 只能选一个 要分组 一个组只能选一个</span>        <span class="token class-name">ButtonGroup</span> buttonGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radioButton01<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radioButton02<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radioButton03<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radioButton01<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radioButton02<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radioButton03<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">JbttonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>复选按钮JCheckBox<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JbttonDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">JbttonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多选框</span>        <span class="token class-name">JCheckBox</span> checkBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JCheckBox</span> checkBox2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JCheckBox</span> checkBox3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox1<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox2<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox3<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">JbttonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-列表"><a href="#6-列表" class="headerlink" title="6. 列表"></a>6. 列表</h2></li></ol><p>1）下拉框</p><p>2）列表框</p><h2 id="7-文本框"><a href="#7-文本框" class="headerlink" title="7.文本框"></a>7.文本框</h2><h1 id="四-贪吃蛇说明"><a href="#四-贪吃蛇说明" class="headerlink" title="四.贪吃蛇说明"></a>四.贪吃蛇说明</h1><p>实现思想：帧 1秒30帧够 60帧足够，图片连起来是动画！</p><p>信息储存在了服务器数据库，使用了DBCP连接池</p><h4 id="结构目录"><a href="#结构目录" class="headerlink" title="结构目录"></a>结构目录</h4><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211206222620358.png"></p><h3 id="Snack类"><a href="#Snack类" class="headerlink" title="Snack类"></a>Snack类</h3><ul><li><h5 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h5></li></ul><p>实现键盘监听接口 并重写方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SnackPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">KeyListener</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h5 id="定时器Timer"><a href="#定时器Timer" class="headerlink" title="定时器Timer"></a>定时器Timer</h5></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> delay<span class="token punctuation">,</span> <span class="token class-name">ActionListener</span> listener<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>listener 是实现ActionListener接口的类 并且重写了actionPerformed方法（implements  ActionListener）</p><p>Timer timer = new Timer 是固定时间自动相当于发出一次动作  收到动作会调一次actionPerformed</p><h4 id="加新功能的思路"><a href="#加新功能的思路" class="headerlink" title="加新功能的思路"></a>加新功能的思路</h4><ol><li>定义数据</li><li>画上去</li><li>监听：键盘监听和事件监听</li></ol><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><p>下载源码 注释特别清晰</p><p><a href="https://gitee.com/dong2645981073/javaSwing">源码</a></p><p>数据库两个表结构：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211206221112216.png"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211206221138449.png"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>paintComponent什么时候被调用</p><ol><li>当java认为需要重新绘制组件的时候由java调用。<br> 例如在程序中repaint();或者程序窗口最小化，然后恢复。或者程序窗口被遮挡，又显现的时候。<br> 注意观察，这个方法是个受保护的方法，这就是说平常并不用管这个方法，这个方法只在需要继承paintComponent(一般是JFrame)的时候，重写方法，（也可以不重新方法，如果不需要改变绘制组件动作的话）。</li><li>paintComponent()是swing的一个方法，相当于图形版的main()，是会自执行的。如果一个class中有构造函数，则执行顺序是先执行构造函数，再执行这个。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客说明</title>
      <link href="/2021/12/05/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
      <url>/2021/12/05/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-HEXO"><a href="#hello-HEXO" class="headerlink" title="hello HEXO"></a>hello HEXO</h2><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211201084843190.png" alt="image-20211201084843190"></p><p><strong>天空</strong></p><p><em><u>天空</u></em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//天空</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211201085525739.png" alt="image-20211201085525739"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java—MySQL</title>
      <link href="/2021/12/04/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/04/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一-MySQL介绍"><a href="#一-MySQL介绍" class="headerlink" title="一.MySQL介绍"></a>一.MySQL介绍</h1><p>javaEE：企业级Java开发 Web<br>前端（页面） 后端（连接数据库JDBC，连接前端：控制视图跳转，给前端传数据） 数据库（存数据 txt.excel，word）</p><h2 id="1-1什么是数据库"><a href="#1-1什么是数据库" class="headerlink" title="1.1什么是数据库"></a>1.1什么是数据库</h2><p>数据库（DB，DataBase）</p><p>概念：数据仓库，软件，安装在操作系统上</p><p>作用：存数据，管理数据</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-2数据库分类"><a href="#1-2数据库分类" class="headerlink" title="1.2数据库分类"></a>1.2数据库分类</h2><p>关系型：</p><ul><li>MySQL，Oracle，SqL Server，DB2，SQLlite</li><li>通过表与表之间，行和列之间的关系进行数据的存储</li></ul><p>非关系型 ：</p><ul><li>Redis，MongDB</li><li>非关系型数据库，对象存储，通过对象自身的属性来决定</li></ul><h2 id="1-3-DBMS"><a href="#1-3-DBMS" class="headerlink" title="1.3 DBMS"></a>1.3 DBMS</h2><p>数据库管理软件，科学管理我们的数据。维护和获取数据</p><ul><li>MySQL</li></ul><h2 id="1-4连接数据库"><a href="#1-4连接数据库" class="headerlink" title="1.4连接数据库"></a>1.4连接数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">net <span class="token keyword">start</span> mysql  <span class="token comment">--启动MySQL服务</span>mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p123456mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p <span class="token comment">--连接数据库</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token comment">--查看所有的数据库</span><span class="token keyword">use</span> school <span class="token comment">--切换数据库</span><span class="token keyword">Database</span> changed<span class="token comment">--代表切换成功</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>  <span class="token comment">--查看切换数据库所有的表</span><span class="token keyword">desc</span> student<span class="token punctuation">;</span> <span class="token comment">--查看表中信息 desc+表名</span><span class="token keyword">create</span> <span class="token keyword">database</span> westos<span class="token punctuation">;</span> <span class="token comment">--创建一个数据库</span><span class="token keyword">exit</span>；<span class="token comment">--退出连接</span><span class="token comment">--单行注释</span><span class="token comment">/*多行注释*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库 XXX语言</p><p>DDL   定义</p><p>DML    操作</p><p>DQL    查询</p><p>DCL     控制</p><h1 id="二-操作数据库"><a href="#二-操作数据库" class="headerlink" title="二.操作数据库"></a>二.操作数据库</h1><p>1.操作数据库—-》2.操作数据库中的表—-》3.操作表中数据</p><h2 id="2-1操作数据库（了解）"><a href="#2-1操作数据库（了解）" class="headerlink" title="2.1操作数据库（了解）"></a>2.1操作数据库（了解）</h2><p>MySQL 关键字不区分大小写</p><ul><li><p>创建数据库</p></li><li><p>```sql</p><p>CREATE [IF NOT EXISTS] DATABASE +名称 –如果不存在才创建，【】里的是表示可选的</p><pre class="line-numbers language-none"><code class="language-none">+ 删除数据库+ &#96;&#96;&#96;sql  DROP DATABASE [IF EXISTS] westos  -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">use</span> <span class="token operator">+</span>名称 <span class="token keyword">use</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token comment">--查看所有的数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果表名或者字段是特殊字段 加``</p></li></ul><h2 id="2-2数据库的列类型"><a href="#2-2数据库的列类型" class="headerlink" title="2.2数据库的列类型"></a>2.2数据库的列类型</h2><p>数值 INT(4)</p><ul><li>tinyint        1个字节 非常小的数据</li><li>smallint        2个字节 较小的数据</li><li>mediumint     3个字节 中等的</li><li><strong>int            4个字节 标准的整数</strong></li><li>bigint        8个字节 较大的数据</li><li>float          4      浮点数</li><li>double        8        浮点数</li><li>decimal         字符串的浮点数  金融计算<br>字符串    </li><li>char             大小固定字符串 0~255</li><li><strong>varchar       可变字符串 0~65535</strong>     对应String</li><li>tinytext         微型文本 2^8 -1</li><li><strong>text          文本串   2^16 -1  保存大文本</strong></li></ul><p>时间日期</p><ul><li>data             YYYY-MM-DD</li><li>time             HH:mm:ss</li><li><strong>datatime     YYYY-MM-DD HH:mm:ss  最长用的时间格式</strong></li><li><strong>timetamp      时间戳 1970.1.1到现在的毫秒数</strong></li><li>year             年份表示</li></ul><p>null</p><ul><li>没有值 空置</li><li>不要使用null运算</li></ul><h2 id="2-3数据库的字段属性（重点）"><a href="#2-3数据库的字段属性（重点）" class="headerlink" title="2.3数据库的字段属性（重点）"></a>2.3数据库的字段属性（重点）</h2><p>unsigned:</p><ul><li>无符号整数</li><li>作用就是 该列不能为负数</li></ul><p>zerofill:</p><ul><li>o填充的</li><li>不足的位数用0来填充</li></ul><p>自增 AUTO_INCREMENT</p><ul><li>自动在上一条记录上加1（默认）</li><li>可以用来设置主键 必须是整数类型</li><li>可以自定义设计主键的起始值和步长</li></ul><p>非空 NOT NULL</p><ul><li>设置为not null ，如果不给它赋值 就会报错</li><li>如果不填值 默认为null（与这个字段无关）</li></ul><p>默认</p><ul><li>设置默认值</li><li>eg:sex 默认为 男</li></ul><h2 id="2-4操作数据库中的表"><a href="#2-4操作数据库中的表" class="headerlink" title="2.4操作数据库中的表"></a>2.4操作数据库中的表</h2><ul><li><p>表的名称和字段尽量使用``括起来</p></li><li><p>字符串使用单引号括起来!</p></li><li><p>所有的语句后而加，( 英文的)，最后一个不用加</p></li><li><p>PRIMARYKEY主键，–般一个表只有一个唯一-的主键!</p></li><li><p>ENGINE=INNODB  是表类型</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'匿名'</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'123456'</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'男'</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'出生日期'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'家庭住址'</span><span class="token punctuation">,</span>   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SHOW CREATE TABLE student –查看创建表的语句</p><p>SHOW CREATE DATABASE school–查看创建数据库的语句</p><p>DESC student –查看表的结构</p><h3 id="1）关于数据库引擎"><a href="#1）关于数据库引擎" class="headerlink" title="1）关于数据库引擎"></a>1）关于数据库引擎</h3><p>默认使用 INNODB</p><p>早些年使用 MyISAM</p><table><thead><tr><th></th><th>MyISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持（最新貌似支持）</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持（最新貌似支持）</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大</td></tr></tbody></table><p>MyISAM 节约空间 速度快</p><p>INNODB 安全行高 事物处理 多表多用户操作</p><ul><li>物理存在空间</li></ul><p>所有数据文件都在data目录</p><p>数据库引擎在文件上的区别</p><ul><li>  INNODB MySQL-8.0没有.frm表结构文件，并入.ibd文件中了</li></ul><p>.frm  表结构定义文件</p><ul><li> MyISAM<br>  .MYD 数据文件<br>  .mYI 索引文件</li><li>设置数据库字符集编码</li></ul><p>默认的字符集编码不支持中文</p><p>可以在创表时设置</p><p>也可以在my.ini 里配置</p><h2 id="2-5修改删除表"><a href="#2-5修改删除表" class="headerlink" title="2.5修改删除表"></a>2.5修改删除表</h2><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">rename</span> stu <span class="token comment">--修改表名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段名  列属性 <span class="token comment">--增加表字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 列属性  <span class="token comment">--修改表的字段的类型和约束 ，不能重命名</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> age1 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 字段名 新字段名 列属性<span class="token comment">--字段重命名</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu CHANGE age1 age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> age <span class="token comment">--删除表的字段</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 表名 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建删除 操作 尽量加上判断</li></ul><h1 id="三-mysql数据管理"><a href="#三-mysql数据管理" class="headerlink" title="三.mysql数据管理"></a>三.mysql数据管理</h1><h2 id="3-1外键（了解即可）"><a href="#3-1外键（了解即可）" class="headerlink" title="3.1外键（了解即可）"></a>3.1外键（了解即可）</h2><p>数据库层面 物理外键 不推荐使用</p><p>应该在应用层实现 否则维护麻烦</p><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。</p><p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(foreign key)。</p><p>外键作用</p><p>保持数据一致性，完整性，主要目的是控制存储在外键表中的数据,约束。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p><h2 id="3-2-DML语言（要记住）"><a href="#3-2-DML语言（要记住）" class="headerlink" title="3.2 DML语言（要记住）"></a>3.2 DML语言（要记住）</h2><p><strong>管理数据库数据方法：</strong></p><ul><li>通过SQLyog等管理工具管理数据库数据</li><li>通过<strong>DML语句</strong>管理数据库数据</li><li><strong>DML语言</strong>  ：数据操作语言<ul><li>用于操作数据库对象中所包含的数据</li><li>包括 :<ul><li>INSERT (添加数据语句)</li><li>UPDATE (更新数据语句)</li><li>DELETE (删除数据语句)</li></ul></li></ul></li></ul><h2 id="3-3添加"><a href="#3-3添加" class="headerlink" title="3.3添加"></a>3.3添加</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">[</span><span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span>字段<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'值1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'值2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'值3'</span><span class="token punctuation">)</span> <span class="token comment">--多行插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'李雷'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">[</span><span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span>字段<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'值1'</span><span class="token punctuation">,</span><span class="token string">'值2'</span><span class="token punctuation">,</span><span class="token string">'值3'</span><span class="token punctuation">)</span> <span class="token comment">--多列插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李雷'</span><span class="token punctuation">,</span><span class="token string">'山西'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'李雷'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'李雷'</span><span class="token punctuation">)</span><span class="token comment">--如果不写表的字段 会自动从第一个一一匹配 </span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李一'</span><span class="token punctuation">,</span><span class="token string">'山西'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'李二'</span><span class="token punctuation">,</span><span class="token string">'山西'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'李三'</span><span class="token punctuation">,</span><span class="token string">'山西'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4修改"><a href="#3-4修改" class="headerlink" title="3.4修改"></a>3.4修改</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span><span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'王五'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">-- id为1的name设置为王五</span><span class="token keyword">UPDATE</span><span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'王五'</span> <span class="token comment">-- 不指定条件会改掉所有的name</span><span class="token keyword">UPDATE</span><span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'王六'</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token operator">=</span><span class="token string">'女'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件：where条件子句</p><ul><li><p>&lt;</p></li><li><blockquote></blockquote></li><li><p>&lt;&gt; 就是!=  </p></li><li><p>between 2 and 4    2到4之间的 闭区间</p></li></ul><p>eg:WHERE id between 2 and 4 </p><ul><li>and      用来增加多个条件</li><li>or</li></ul><h2 id="3-5删除"><a href="#3-5删除" class="headerlink" title="3.5删除"></a>3.5删除</h2><p>DELETE命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token comment">-- 删除全部（避免这样）</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">-- 删除表中指定数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>TRUNCATE命令 truncate</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token punctuation">`</span>student1<span class="token punctuation">`</span><span class="token comment">-- 删除表的全部数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>区别</strong></p><ul><li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p></li><li><p>不同 :</p><ul><li><p>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</p><p>计数器会归零  DELETE再加数据会从以前的计数开始</p></li><li><p>使用TRUNCATE TABLE不会对事务有影响 </p></li></ul><p>了解：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">同样使用<span class="token keyword">DELETE</span>清空不同引擎的数据库表数据<span class="token punctuation">.</span>重启数据库服务后<span class="token comment">-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)</span><span class="token comment">-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四-DQL（查询语言）"><a href="#四-DQL（查询语言）" class="headerlink" title="四.DQL（查询语言）"></a>四.DQL（查询语言）</h1></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">]</span>&#123;<span class="token operator">*</span> <span class="token operator">|</span> <span class="token keyword">table</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token keyword">table</span><span class="token punctuation">.</span>field1<span class="token punctuation">[</span><span class="token keyword">as</span> alias1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token keyword">table</span><span class="token punctuation">.</span>field2<span class="token punctuation">[</span><span class="token keyword">as</span> alias2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>&#125;<span class="token keyword">FROM</span> table_name <span class="token punctuation">[</span><span class="token keyword">as</span> table_alias<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">left</span> <span class="token operator">|</span> <span class="token keyword">right</span> <span class="token operator">|</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> table_name2<span class="token punctuation">]</span>  <span class="token comment">-- 联合查询</span>    <span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  <span class="token comment">-- 指定结果需满足的条件</span>    <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  <span class="token comment">-- 指定结果按照哪几个字段来分组 </span>    <span class="token punctuation">[</span><span class="token keyword">HAVING</span><span class="token punctuation">]</span>  <span class="token comment">-- 过滤分组的记录必须满足的次要条件</span>    <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  <span class="token comment">-- 指定查询记录按一个或多个条件排序</span>    <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> &#123;<span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span>row_count <span class="token operator">|</span> row_countOFFSET <span class="token keyword">offset</span>&#125;<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">--  指定查询的记录从哪条至哪条</span>原文链接：https:<span class="token comment">//blog.csdn.net/qq_33369905/article/details/105872921</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**<u>需要遵循 上面的顺序格式</u>**！！</p><h2 id="4-1查询指定字段"><a href="#4-1查询指定字段" class="headerlink" title="4.1查询指定字段"></a>4.1<strong>查询指定字段</strong></h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询指定字段</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span class="token comment">--别名，给结果起一个名字AS 也可以给字段起别名 也可以给表起别名</span>方便阅读<span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>学号<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>学生姓名<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> <span class="token punctuation">`</span>s<span class="token punctuation">`</span><span class="token comment">--函数 CONCAT(a,b) 给查询结构连接一个固定字符串  </span><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'姓名: '</span><span class="token punctuation">,</span>studentname<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>新名字<span class="token punctuation">`</span> <span class="token keyword">FROM</span> student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2去重"><a href="#4-2去重" class="headerlink" title="4.2去重"></a>4.2<strong>去重</strong></h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询一下有哪些同学参加了考试成绩</span><span class="token keyword">SELECT</span>  <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token comment">--去除重复数据 </span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3数据库中的表达式-文本值-列-null-函数-表达式"><a href="#4-3数据库中的表达式-文本值-列-null-函数-表达式" class="headerlink" title="4.3数据库中的表达式 文本值 列 null 函数 表达式"></a>4.3<strong>数据库中的表达式 文本值 列 null 函数 表达式</strong></h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询系统版本</span><span class="token keyword">SELECT</span> VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--用来计算</span><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">100</span> <span class="token keyword">AS</span> 计算<span class="token comment">--查询自增的步长</span><span class="token keyword">SELECT</span> @<span class="token variable">@auto_increment_increment</span><span class="token comment">--学员考试成绩 </span><span class="token keyword">SELECT</span>  <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>提分后<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select 表达式 from 表</p><h2 id="4-4where-条件子句"><a href="#4-4where-条件子句" class="headerlink" title="4.4where 条件子句"></a>4.4<strong>where 条件子句</strong></h2><p><strong>作用：检索数据中 符合条件 的检索数据</strong></p><p><strong>逻辑运算符</strong>  </p><p>and &amp;&amp;   逻辑与</p><p>or ||     逻辑或</p><p>not !      逻辑取反</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询考试成绩在95到100分之间</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>stUdentno<span class="token punctuation">`</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token operator">>=</span><span class="token number">95</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token operator">&lt;=</span><span class="token number">100</span><span class="token comment">--模糊查询(区间)</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token operator">BETWEEN</span> <span class="token number">80</span> <span class="token operator">AND</span> <span class="token number">100</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">!=</span><span class="token number">1000</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>模糊查询：比较运算符</strong></p><p>运算符              语法            描述<br>is null               a is null        如果为null 结果为真<br>is not null        a is not null        如果操作符为not null 结果为真<br>between            a between b and c    若a在b到c之间则结果为真<br>like                    a like b            SQL匹配 如果a匹配b 则结果为真<br>in                a in(a1,a2,a3…)        假如a在a1 或者a2…其中的一个则返回为真</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--like结合 %(代表0到任意个字符) _(一个字符)   在like里使用</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'张%'</span><span class="token comment">--查询名字后面只有一个字的</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%张%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---IN (具体的一个或者多个值)====</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token string">'北京朝阳'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>like 是里面有 张 的就查出来</li><li>in   是必须是1001，1002，1003 其中之一</li></ul><h2 id="4-5联表查询"><a href="#4-5联表查询" class="headerlink" title="4.5联表查询"></a>4.5联表查询</h2><p><strong>join对比</strong></p><p>left join ：展示左表所有数据，和右边符合on条件的数据。  从左表中返回值 即使右表中没有匹配</p><p>right join： “右连接”，表1右连接表2，以右为主，表示以表2为主，关联查询表1的数据，查出表2所有数据以及表1和表2有交集的数据</p><p>inner join :展示左右所有 。  如果表中至少有一个匹配，就返回行  ，</p><p>两个是表示一个的，内连接，表示以两个表的交集为主，查出来是两个表有交集的部分，其余没有关联就不额外显示出来，这个用的情况也是挺多的</p><p>– join(连接表名) on(判断条件) 连接查询  (联表查询一般用on)</p><p>where 是查出来 再筛选 不太好</p><p>– where 等值查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析需求 分析查询的字段来自哪些表确定使用哪种链接查询确定交叉点(这两个表中哪个数据是相同的)判断的条件 :学生表中的 studentno=成绩表 studentno*/</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">AS</span> s <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token comment">-- on s.`studentno`=r.`studentno`    </span><span class="token comment">-- Right join</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">AS</span> s<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token comment">-- left join</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">AS</span> s<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token comment">--多表查询   把一部分看作一个表 再连接其他表</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span>su<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">AS</span> s<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">AS</span> su<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>su<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">WHERE</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>————————————————<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-6自连接"><a href="#4-6自连接" class="headerlink" title="4.6自连接"></a>4.6自连接</h2><p>把一张表 看出两张表</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210816195720753.png" alt="image-20210816195720753">1代表没有父类</p><p><img src="C:\Users\DONG\AppData\Roaming\Typora\typora-user-images\image-20210816195802337.png" alt="image-20210816195802337"></p><p><img src="C:\Users\DONG\AppData\Roaming\Typora\typora-user-images\image-20210816195821291.png" alt="image-20210816195821291"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询父子信息</span><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span><span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>父栏目<span class="token punctuation">`</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>子栏目<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token keyword">AS</span> a<span class="token punctuation">,</span><span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token keyword">AS</span> b<span class="token keyword">WHERE</span> a<span class="token punctuation">.</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-7分页和排序"><a href="#4-7分页和排序" class="headerlink" title="4.7分页和排序"></a>4.7分页和排序</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--order by</span><span class="token comment">-- 排序 升序 asc 降序 desc</span><span class="token comment">--降序</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">,</span>sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">AS</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">AS</span> sub<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token keyword">WHERE</span> sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'数据库结构%'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">DESC</span>————————————————<span class="token comment">--limmit</span><span class="token comment">--分页 缓解数据库压力 给人的体验更好（现在图片展示多用瀑布流）</span><span class="token comment">-- 分页，每页只显示五条数据</span><span class="token comment">-- limit(起始位置,最大数量)   --一个条是0   </span><span class="token comment">-- limmit 0,5--第1行到第5行</span><span class="token comment">-- limmit 5,5--第6行到第10行</span><span class="token comment">-- limmit 10,5--第11行到第15行</span><span class="token comment">-- 网页浏览时起始位置 (n-1) *pagesize  </span><span class="token comment">-- limmit (当前页-1) *页面大小  pagesize  --网页显示的规律</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">,</span>sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">AS</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">AS</span> sub<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span><span class="token keyword">WHERE</span> sub<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'数据库结构%'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span> <span class="token keyword">ASC</span><span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法：limt(查询起始下标，页面大小)</p><h2 id="4-8-子查询"><a href="#4-8-子查询" class="headerlink" title="4.8 子查询"></a>4.8 子查询</h2><p>本质：在where嵌套一个子查询语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 方法二:使用子查询(执行顺序:由里及外)</span><span class="token keyword">SELECT</span> studentno<span class="token punctuation">,</span>subjectno<span class="token punctuation">,</span>StudentResult<span class="token keyword">FROM</span> result<span class="token keyword">WHERE</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span>    <span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">'数据库结构-1'</span><span class="token comment">--子查询返回的结果一般都是集合,故而建议使用IN关键字(4.4比较运算符);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">什么是子查询?    在查询语句中的<span class="token keyword">WHERE</span>条件子句中<span class="token punctuation">,</span>又嵌套了另一个查询语句    嵌套查询可由多个子查询组成<span class="token punctuation">,</span>求解的方式是由里及外<span class="token punctuation">;</span>    子查询返回的结果一般都是集合<span class="token punctuation">,</span>故而建议使用<span class="token operator">IN</span>关键字<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span><span class="token comment">-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span><span class="token comment">-- 方法一:使用连接查询</span><span class="token keyword">SELECT</span> studentno<span class="token punctuation">,</span>r<span class="token punctuation">.</span>subjectno<span class="token punctuation">,</span>StudentResult<span class="token keyword">FROM</span> result r<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> sub<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>SubjectNo<span class="token punctuation">`</span><span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token punctuation">`</span>SubjectNo<span class="token punctuation">`</span><span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">'数据库结构-1'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> studentresult <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 方法二:使用子查询(执行顺序:由里及外)</span><span class="token keyword">SELECT</span> studentno<span class="token punctuation">,</span>subjectno<span class="token punctuation">,</span>StudentResult<span class="token keyword">FROM</span> result<span class="token keyword">WHERE</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span>    <span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">'数据库结构-1'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> studentresult <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span><span class="token comment">-- 方法一:使用连接查询</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span>studentname<span class="token keyword">FROM</span> student s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> result r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>StudentNo<span class="token punctuation">`</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>StudentNo<span class="token punctuation">`</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> sub<span class="token keyword">ON</span> sub<span class="token punctuation">.</span><span class="token punctuation">`</span>SubjectNo<span class="token punctuation">`</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>SubjectNo<span class="token punctuation">`</span><span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">'高等数学-2'</span> <span class="token operator">AND</span> StudentResult<span class="token operator">>=</span><span class="token number">80</span><span class="token comment">-- 方法二:使用连接查询+子查询</span><span class="token comment">-- 分数不小于80分的学生的学号和姓名</span><span class="token keyword">SELECT</span> r<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span>studentname <span class="token keyword">FROM</span> student s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> result r <span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>StudentNo<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>StudentNo<span class="token punctuation">`</span><span class="token keyword">WHERE</span> StudentResult<span class="token operator">>=</span><span class="token number">80</span><span class="token comment">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span><span class="token keyword">SELECT</span> r<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span>studentname <span class="token keyword">FROM</span> student s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> result r <span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>StudentNo<span class="token punctuation">`</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>StudentNo<span class="token punctuation">`</span><span class="token keyword">WHERE</span> StudentResult<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">AND</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span>    <span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">'高等数学-2'</span><span class="token punctuation">)</span><span class="token comment">-- 方法三:使用子查询</span><span class="token comment">-- 分步写简单sql语句,然后将其嵌套起来</span><span class="token comment">-- 由里及外</span><span class="token keyword">SELECT</span> studentno<span class="token punctuation">,</span>studentname <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> studentno <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> studentno <span class="token keyword">FROM</span> result <span class="token keyword">WHERE</span> StudentResult<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">AND</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">'高等数学-2'</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-9-分组和过滤"><a href="#4-9-分组和过滤" class="headerlink" title="4.9 分组和过滤"></a>4.9 分组和过滤</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询不同课程的平均分，最高分，最低分</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均分<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 最大分<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 最低分<span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">AS</span> s<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span> <span class="token comment">-- group by 通过什么字段来分组</span><span class="token keyword">HAVING</span> 平均分<span class="token operator">></span><span class="token number">80</span>  <span class="token comment">-- having 分组后必须满足的次要条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全文参考原文链接：<a href="https://blog.csdn.net/a951273629/article/details/107094285/">https://blog.csdn.net/a951273629/article/details/107094285/</a>,<br><a href="https://blog.csdn.net/qq_33369905/article/details/105872921">https://blog.csdn.net/qq_33369905/article/details/105872921</a></p><h1 id="五-MySQL函数"><a href="#五-MySQL函数" class="headerlink" title="五.MySQL函数"></a>五.MySQL函数</h1><p>参考</p><p>原文链接：<a href="https://blog.csdn.net/a951273629/article/details/107094285/">https://blog.csdn.net/a951273629/article/details/107094285/</a></p><p><a href="https://blog.csdn.net/qq_33369905/article/details/105872921">https://blog.csdn.net/qq_33369905/article/details/105872921</a></p><h2 id="5-1常用函数（不常用）"><a href="#5-1常用函数（不常用）" class="headerlink" title="5.1常用函数（不常用）"></a>5.1常用函数（不常用）</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--  =============常用函数=========================</span><span class="token comment">-- 数学运算</span><span class="token keyword">SELECT</span> ABS<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment">-- 绝对值</span><span class="token keyword">SELECT</span> CEILING<span class="token punctuation">(</span><span class="token number">9.4</span><span class="token punctuation">)</span> <span class="token comment">-- 向上取整</span><span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span><span class="token number">9.4</span><span class="token punctuation">)</span> <span class="token comment">-- 向下取整</span><span class="token keyword">SELECT</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 返回0-1 随机数</span><span class="token keyword">SELECT</span> SIGN<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">-- 判断一个数的符号 负数返回-1 整数返回1</span><span class="token comment">-- 字符串函数</span><span class="token keyword">SELECT</span> CHAR_LENGTH<span class="token punctuation">(</span><span class="token string">'字符串长度'</span><span class="token punctuation">)</span> <span class="token comment">-- 字符串长度</span><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'李'</span><span class="token punctuation">,</span><span class="token string">'是一个'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span> <span class="token comment">-- 拼接字符串</span><span class="token keyword">SELECT</span> <span class="token keyword">INSERT</span><span class="token punctuation">(</span><span class="token string">'超级人'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'我是一个'</span><span class="token punctuation">)</span> <span class="token comment">-- 替换字符串,insert("原字符",'开始位置','替换长度','用作替换的字符')</span>我是一个人<span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span><span class="token string">'WuDiMengNan'</span><span class="token punctuation">)</span> <span class="token comment">-- 小写字母</span><span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span><span class="token string">'WuDiMengNan'</span><span class="token punctuation">)</span> <span class="token comment">-- 大写字母</span><span class="token keyword">SELECT</span> INSTR<span class="token punctuation">(</span><span class="token string">'chaojiwudimengnan'</span><span class="token punctuation">,</span><span class="token string">'wudi'</span><span class="token punctuation">)</span> <span class="token comment">-- 指定字符第一次出现的位置</span><span class="token keyword">SELECT</span> <span class="token keyword">REPLACE</span><span class="token punctuation">(</span><span class="token string">'ccccc'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'mengnan'</span><span class="token punctuation">)</span> <span class="token comment">-- 替换指定的字符串</span><span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span><span class="token string">'超级猛男无人能挡'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">-- 返回指定的子字符串(源字符串,起始位置,截取长度)</span><span class="token keyword">SELECT</span> REVERSE<span class="token punctuation">(</span><span class="token string">'超级猛男'</span><span class="token punctuation">)</span> <span class="token comment">-- 翻转字符串</span> <span class="token comment">-- 查询姓周的同学,改成邹</span> <span class="token keyword">SELECT</span> <span class="token keyword">REPLACE</span><span class="token punctuation">(</span>studentname<span class="token punctuation">,</span><span class="token string">'周'</span><span class="token punctuation">,</span><span class="token string">'邹'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 新名字 <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> studentname <span class="token operator">LIKE</span> <span class="token string">'周%'</span><span class="token punctuation">;</span><span class="token comment">-- 时间和日期函数 （记一下）</span><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 获取当前日期</span><span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 获取当前日期</span><span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 获取当前的时间</span><span class="token keyword">SELECT</span> LOCALTIME<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 本地时间</span><span class="token keyword">SELECT</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 系统时间</span><span class="token keyword">SELECT</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 年</span><span class="token keyword">SELECT</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 月</span><span class="token keyword">SELECT</span> <span class="token keyword">DAY</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 日</span><span class="token keyword">SELECT</span> <span class="token keyword">HOUR</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 时</span><span class="token keyword">SELECT</span> <span class="token keyword">MINUTE</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 分</span><span class="token keyword">SELECT</span> <span class="token keyword">SECOND</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 秒</span><span class="token comment">-- 系统</span><span class="token keyword">SELECT</span> <span class="token keyword">SYSTEM_USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-聚合函数（常用）"><a href="#5-2-聚合函数（常用）" class="headerlink" title="5.2 聚合函数（常用）"></a>5.2 聚合函数（常用）</h2><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 统计表中的数 (想查询一个表中有多少个记录就是用count)</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">;</span> <span class="token comment">-- count(字段),会忽略所有的null值 --指定列 </span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">;</span> <span class="token comment">-- count(*) 不会忽略null值</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">-- count(1) 本质 计算行数</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 总和 <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均分 <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 最大分 <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 最低分 <span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span><span class="token comment">-- 分组</span><span class="token comment">-- 查询不同课程的平均分，最高分，最低分</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均分<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 最大分<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 最低分<span class="token keyword">FROM</span> <span class="token punctuation">`</span>result<span class="token punctuation">`</span> <span class="token keyword">AS</span> r<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">AS</span> s<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span> <span class="token comment">-- group by 通过什么字段来分组</span><span class="token keyword">HAVING</span> 平均分<span class="token operator">></span><span class="token number">80</span>  <span class="token comment">-- having 分组后必须满足的次要条件</span><span class="token comment">--where条件里不能有聚合函数 ，要使用HAVING..</span><span class="token keyword">where</span>写在<span class="token keyword">group</span> <span class="token keyword">by</span>前面<span class="token punctuation">.</span> 要是放在分组后面的筛选 要使用<span class="token keyword">HAVING</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 因为<span class="token keyword">having</span>是从前面筛选的字段再筛选，而<span class="token keyword">where</span>是从数据表中的字段直接进行的筛选的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六-事务"><a href="#六-事务" class="headerlink" title="六.事务"></a>六.事务</h1><p><strong>事务原则 : ACID 原子性 一致性 隔离性 持久性</strong></p><p>原子性(Atomic)</p><pre><code>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</code></pre><p>一致性(Consist)</p><pre><code>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。~~守恒原理~~</code></pre><p>隔离性(Isolated)</p><pre><code>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</code></pre><p>持久性(Durable)</p><pre class="line-numbers language-none"><code class="language-none">在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。 commit之后就不能回滚了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基本语法 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 使用set语句来改变自动提交模式</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">/*关闭*/</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">/*开启*/</span><span class="token comment">-- 注意:</span><span class="token comment">---  1.MySQL中默认是自动提交</span><span class="token comment">---  2.使用事务时应先关闭自动提交</span><span class="token comment">-- 开始一个事务,标记事务的起始点</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span>  <span class="token comment">-- 提交一个事务给数据库</span><span class="token keyword">COMMIT</span><span class="token comment">-- 将事务回滚,数据回到本次事务的初始状态</span><span class="token keyword">ROLLBACK</span><span class="token comment">-- 还原MySQL数据库的自动提交</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 保存点</span><span class="token keyword">SAVEPOINT</span> 保存点名称 <span class="token comment">-- 设置一个事务保存点</span><span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token keyword">SAVEPOINT</span> 保存点名称 <span class="token comment">-- 回滚到保存点</span><span class="token keyword">RELEASE</span> <span class="token keyword">SAVEPOINT</span> 保存点名称 <span class="token comment">-- 删除保存点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*课堂测试题目A在线买一款价格为500元商品,网上银行转账.A的银行卡余额为2000,然后给商家B支付500.商家B一开始的银行卡余额为10000创建数据库shop和创建表account并插入2条数据*/</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>shop<span class="token punctuation">`</span><span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>shop<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>cash<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cash<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token comment">-- 转账实现-- 一条一条执行</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">-- 关闭自动提交</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>  <span class="token comment">-- 开始一个事务,标记事务的起始点</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> cash<span class="token operator">=</span>cash<span class="token operator">-</span><span class="token number">500</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> cash<span class="token operator">=</span>cash<span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">-- 提交事务</span><span class="token comment"># rollback;</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 恢复自动提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隔离导致的一些问题</p><pre><code> 脏读: 指一个事务读取了另一个事务未提交的数据不可重复读: 在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）虚读(幻读): 是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。（一般是行影响，多了一行）</code></pre><h1 id="七-索引"><a href="#七-索引" class="headerlink" title="七.索引"></a>七.索引</h1><p> 定义：索引（index）是帮助MySQL高效获取数据的数据结构（有序）  </p><p>索引就是数据结构  提高获取数据的速度</p><h2 id="7-1-索引分类介绍"><a href="#7-1-索引分类介绍" class="headerlink" title="7.1 索引分类介绍"></a>7.1 索引分类介绍</h2><blockquote><p>主键索引</p></blockquote><p>主键 : 某一个属性组能唯一标识一条记录</p><p>特点 :</p><ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><blockquote><p>唯一索引 (unique key)   </p></blockquote><ul><li>避免重复的列出现，唯一索引可以重复，多个列都可以标识唯一索引</li></ul><blockquote><p>常规索引(key / index)   </p></blockquote><ul><li>默认的 index key 关键字来设置</li></ul><blockquote><p>全文索引(fulltext)   </p></blockquote><ul><li>在特定的数据库引擎下</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 索引</span><span class="token comment">-- 1 在创建表的时候给字段增加索引</span><span class="token comment">-- 2 创建完毕后，增加索引</span><span class="token comment">-- 显示所有的索引信息</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token comment">-- 增加一个索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">ADD</span> FULLTEXT <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token comment">-- explain 分析sql执行的状况</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token comment">-- 非全文索引</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">'张'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>索引在大数据量的时候效率高</strong></p><h2 id="7-2索引原则"><a href="#7-2索引原则" class="headerlink" title="7.2索引原则"></a>7.2索引原则</h2><ul><li>索引不是越多越好</li><li>不要对经常变得数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常用来查询的字段上</li></ul><p><strong>索引的数据结构</strong></p><p>hash 类型的索引</p><p>Btree: innoDB 的默认数据结构</p><h1 id="八-权限管理和备份"><a href="#八-权限管理和备份" class="headerlink" title="八.权限管理和备份"></a>八.权限管理和备份</h1><h2 id="8-1-权限管理"><a href="#8-1-权限管理" class="headerlink" title="8.1 权限管理"></a>8.1 权限管理</h2><ul><li><p>可视化管理工具（SQLyog ）</p></li><li><p>命令行</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ================权限管理</span><span class="token comment">-- 创建用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> dong  IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token comment">-- 修改密码(修改当前用户密码)</span><span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span>新版本：<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'dong'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span>只可以在上面的创建方式基础上使用<span class="token comment">-- 修改密码(修改指定 用户密码)</span><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> dong <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token comment">-- 重命名</span><span class="token keyword">RENAME</span> <span class="token keyword">USER</span> dong <span class="token keyword">TO</span> menmen<span class="token comment">-- 用户授权 all privileges 全部权限 库 表</span><span class="token comment">-- all privileges 除了给别人授权，其他都能干</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> dong<span class="token comment">-- 查询权限</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> dong  <span class="token comment">-- 查看指定用户的权限</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> root<span class="token variable">@localhost</span> <span class="token comment">-- 撤销权限 </span><span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> dong<span class="token comment">-- 删除用户</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> dong<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2MySQL-备份"><a href="#8-2MySQL-备份" class="headerlink" title="8.2MySQL 备份"></a>8.2MySQL 备份</h2><p>数据库备份必要性</p><ul><li>保证重要数据不丢失</li><li>数据转移</li></ul><p><strong>mysql数据库备份的方式</strong></p><ul><li>直接拷贝物理文件</li><li>在sqlyog这种可视化工具中手动导出<ul><li>在想要导出的表或者库中，右键，选择备份或导出</li></ul></li></ul><ul><li>使用命令行导出 mysqldump 命令行使用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># mysqldump -h主机名 -u用户名 -p密码 数据库 表名 >导出到的 物理磁盘路径/文件名 </span>mysqldump <span class="token operator">-</span>hlocalhost <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 school student <span class="token operator">></span>D:<span class="token operator">/</span><span class="token number">1.</span><span class="token keyword">sql</span><span class="token comment"># mysqldump -h主机名 -u用户名 -p密码 数据库 表名1 表名2 表名3 >物理磁盘路径/文件名 </span><span class="token comment"># 导出多张表</span>mysqldump <span class="token operator">-</span>hlocalhost <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 school student result<span class="token operator">></span>D:<span class="token operator">/</span><span class="token number">2.</span><span class="token keyword">sql</span><span class="token comment"># mysqldump -h主机名 -u用户名 -p密码 数据库>导出到的 物理磁盘路径/文件名 </span>mysqldump <span class="token operator">-</span>hlocalhost <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 school  <span class="token operator">></span>D:<span class="token operator">/</span><span class="token number">1.</span><span class="token keyword">sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 导入 </span><span class="token comment"># 先登陆 </span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456<span class="token comment">#登陆的情况下</span><span class="token comment">#切换到指定数据库</span> <span class="token keyword">use</span> school  <span class="token comment">#导入命令</span> source d:<span class="token operator">/</span><span class="token number">1.</span><span class="token keyword">sql</span> <span class="token comment">--将要导入文件的地址</span>  <span class="token comment">#未登录（不推荐）</span> mysql <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p密码 库名<span class="token operator">&lt;</span> 备份文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="九-规范数据库设计"><a href="#九-规范数据库设计" class="headerlink" title="九.规范数据库设计"></a>九.规范数据库设计</h1><h2 id="9-1为什么要需要设计"><a href="#9-1为什么要需要设计" class="headerlink" title="9.1为什么要需要设计"></a>9.1为什么要需要设计</h2><p>当数据库比较复杂的时候，我们就需要设计了</p><p>糟糕的数据库设计</p><pre><code>数据冗余，浪费空间数据库插入和删除都会麻烦，[屏蔽使用物理外键]</code></pre><p>良好的数据设计</p><pre><code>节省内存空间保证数据库的完整性方便我们开发系统</code></pre><p>软件开发中，关于数据库的设计</p><pre><code>分析需求概要设计:设计关系图E-R图</code></pre><p>设计数据库的步骤(个人博客)</p><pre><code>收集信息，分析需求    用户表(用户名登陆注销，用户的个人信息，写博客，创建分类)    分类表(文章分类,谁创建的)    文章表(文章的信息)    有链表(友链信息)    自定义表(系统信息，某个关键的字，或者一些字段)标识实体()</code></pre><h2 id="9-2数据库设计的三大范式"><a href="#9-2数据库设计的三大范式" class="headerlink" title="9.2数据库设计的三大范式"></a>9.2数据库设计的三大范式</h2><p>三大范式</p><p><strong>第一范式（1NF）</strong></p><p>原子性 ：保证每一列不可再分</p><p><strong>第二范式（2NF）</strong></p><p>前提:满足第一范式</p><p>每张表只描述一件事情</p><p><strong>第三范式（3NF）</strong></p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关</p><p>规范数据库的设计</p><p><strong>规范性和性能的问题</strong></p><p>关联查询的表不能超过三张表</p><ul><li>考虑商业化的需求和目标 数据库性能更加重要</li><li>在规范性能的问题的时候，需要适当的考虑一下 规范性</li><li>故意给某表增加一些冗余的字段(从多表查询中变为单表查询)</li><li>故意增加一些计算列(从大数据量降低为小数据量的查询)</li></ul><h1 id="十-JDBC-重点"><a href="#十-JDBC-重点" class="headerlink" title="十.JDBC(重点)"></a>十.JDBC(重点)</h1><h2 id="10-1数据库驱动"><a href="#10-1数据库驱动" class="headerlink" title="10.1数据库驱动"></a>10.1数据库驱动</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20200702221255656.png" alt="在这里插入图片描述"></p><p>我们的程序会通过数据库驱动 和数据库打交道</p><h2 id="10-2JDBC"><a href="#10-2JDBC" class="headerlink" title="10.2JDBC"></a><strong>10.2JDBC</strong></h2><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。</p><p>对于开发人员只需要使用jdbc即可</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20200702221304720.png" alt="在这里插入图片描述"></p><p>默认就有的两个包：</p><p>java.sql</p><p>javax.sql</p><p>还需要到导入一个数据库驱动包</p><p>第一个JDBC程序</p><p>1.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--  jdbc测试数据 (提前准备的测试数据)</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> jdbcStudy <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span><span class="token keyword">USE</span> jdbcStudy<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span><span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>birthday <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">,</span>email<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhansan'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'zs@sina.com'</span><span class="token punctuation">,</span><span class="token string">'1980-12-04'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'lisi@sina.com'</span><span class="token punctuation">,</span><span class="token string">'1981-12-04'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'wangwu@sina.com'</span><span class="token punctuation">,</span><span class="token string">'1979-12-04'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.导入jar包添加到项目中 mysql-connector-java-5.1.49.jar</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dong<span class="token punctuation">.</span>lesson01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcFirstDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.加载驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//固定写法 //反射调用默认进行类的初始化</span>        <span class="token comment">//2.连接 用户 密码 和url</span>        <span class="token class-name">String</span> url <span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSl=true&amp;serverTimezone=GMT%2B8"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment">//3.连接成功，数据库对象 //connection 代表数据库</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.执行sql的对象// statement 执行sql的</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.执行sql的对象  去执行sql 查看</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"SELECT * FROM users"</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回一个结果集,结果集封装了所有查询结果</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"email="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"birthday="</span><span class="token operator">+</span>resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//6.释放连接</span>        resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>加载驱动</p></li><li><p>连接数据库DriverManager</p></li><li><p>获取执行sql的对象statement</p></li><li><p>获得返回的结果集</p></li><li><p>释放连接</p><p>以后可能会写成一个工具类 直接传进去sql语句就可以了</p></li></ul><p><strong>JDBC 对象解释</strong></p><ul><li><p>DriverManager</p><p>   // 加载驱动</p><pre><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //固定写法 Connection connection = DriverManager.getConnection(url, username, password); //connection 代表数据库 数据库写的代码 这个对象都可以         connection.commit();      connection.setAutoCommit();      connection.rollback();</code></pre></li></ul><ul><li>URL</li></ul><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;协议:&#x2F;&#x2F;主机名:端口号&#x2F;数据库名?参数1&amp;参数2String url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbcstudy?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&quot;;&#x2F;&#x2F;mysql 默认3306&#x2F;&#x2F;oralce 默认1521   &quot;jdbc:oralce:think:@localhost:1521:sid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>statement 执行sql的对象；prepareStatement 执行sql的对象</li></ul><pre class="line-numbers language-none"><code class="language-none">Statement statement &#x3D; connection.createStatement();PreparedStatement preparedStatement &#x3D; connection.prepareStatement();（暂时没讲）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>    statement.executeQuery();  // 查询    statement.execute(); //执行任何sql //有判断的过程 相对来说效率会低一点    statement.executeUpdate(); //更新 插入 删除都用这个，返回一个受影响行数    statement.executeBatch()--多个sql执行</code></pre><ul><li><p>ResultSet 查询结果集,封装了所有的查询结果</p><p>   //和数据库中的类型一一匹配</p><pre><code>  resultSet.getObject(); // 不知道列类型的情况下使用  // 如果知道列的类型就使用指定的类型  resultSet.getString();   resultSet.getDate();  resultSet.getInt();  resultSet.getDouble();</code></pre></li><li><p>遍历指针</p><p>  resultSet.beforeFirst(); //移动到最前面<br>  resultSet.afterLast();  //移动到最后面<br>  resultSet.next()  // 移动到下一个 《——-最常用<br>  resultSet.previous(); // 移动到上一个<br>  resultSet.absolute(row); // 移动到指定行</p></li></ul><ul><li>释放资源</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 释放连接 十分耗费资源</span>       resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-3-statement对象"><a href="#10-3-statement对象" class="headerlink" title="10.3 statement对象"></a>10.3 statement对象</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210824201123584.png" alt="image-20210824201123584"></p><p><img src="C:\Users\DONG\AppData\Roaming\Typora\typora-user-images\image-20210824203344290.png" alt="image-20210824203344290"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210824203427698.png" alt="image-20210824203427698"></p><p>提取工具类</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dong<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//提升作用域</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> driver <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//这里是通过类获取反射对象，然后获取反射对象的类加载器，调用类加载器的获取资源的方法。一步一步来的</span>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加载只需一次 所有放在static下</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// Connection connection = DriverManager.getConnection(url, username, password);</span>        <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//释放连接资源</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增删改 测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dong<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDelete</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//try 里面的外面拿不到 提升作用域,try里面的作用域在&#123;&#125;里</span>        <span class="token class-name">Statement</span> st <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> re <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            conn<span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"DELETE FROM `users` WHERE id=4 "</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dong<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInsert</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//try 里面的外面拿不到 提升作用域,try里面的作用域在&#123;&#125;里</span>        <span class="token class-name">Statement</span> st <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> re <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            conn<span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"INSERT INTO `users`(`id`,`NAME`,`PASSWORD`,`email`,`birthday`)"</span> <span class="token operator">+</span>                    <span class="token string">"VALUES(5,'dong','123465','264598@qq.com','2002-01-01')"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span>改没有写 类似<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 查询  测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dong<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSelect</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> st<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> re<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             conn <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token operator">=</span><span class="token string">"select * from `users` where id=1"</span><span class="token punctuation">;</span>            re <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果集 ResultSet对象维护指向其当前数据行的游标。 最初，光标位于第一行之前</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-4-SQL注入问题"><a href="#10-4-SQL注入问题" class="headerlink" title="10.4 SQL注入问题"></a>10.4 SQL注入问题</h2><p> 比如登入业务中 用户名和密码匹配的登入成功 </p><p>正常传进去正确的 用户名和密码</p><p>不正常 eg: 用户名输入“    ‘or’ 1=1    ” 密码输入 ‘or’ 1=1   所有用户被查出</p><p>sql存在漏洞   本质：sql会被拼接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SQLinject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>             <span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"'' or 1=1"</span><span class="token punctuation">,</span><span class="token string">"'' or 1=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//SELECT * FROM `users` WHERE `NAME`='' or 1=1 AND `PASSWORD`='' or 1=1 ;</span>            <span class="token comment">//获取连接</span>            connection <span class="token operator">=</span> jdbcutils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取sql对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//sql</span>            <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"SELECT * FROM `users` WHERE `NAME`= "</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"'"</span><span class="token operator">+</span><span class="token string">" AND `PASSWORD`="</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>            <span class="token comment">//查询获取返回集合</span>            <span class="token class-name">ResultSet</span> query <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            jdbcutils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>statement<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-5-PreparedStatement对象"><a href="#10-5-PreparedStatement对象" class="headerlink" title="10.5 PreparedStatement对象"></a>10.5 PreparedStatement对象</h2><p>它可以防止sql注入,并且效率高</p><p>增删改查</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.dong.lesson03;import com.dong.lesson02.utils.JdbcUtils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.util.Date;public class TestInsert2 &#123;    public static void main(String[] args) &#123;        Connection conn &#x3D;null;        PreparedStatement st &#x3D;null;        try &#123;            conn &#x3D; JdbcUtils.getConnection();            &#x2F;&#x2F;?是占位符 代替参数            String sql &#x3D;&quot;INSERT INTO &#96;users&#96;(&#96;id&#96;,&#96;NAME&#96;,&#96;PASSWORD&#96;,&#96;email&#96;,&#96;birthday&#96;) VALUES(?,?,?,?,?)&quot;;            st &#x3D;conn.prepareStatement(sql);&#x2F;&#x2F;预编译sql 先写sql 但是不执行            &#x2F;&#x2F;手动给参数赋值            st.setInt(1,4);            st.setString(2,&quot;abc&quot;);            st.setString(3,&quot;123456&quot;);            st.setString(4,&quot;264598@qq.com&quot;);            &#x2F;&#x2F;sql.Date            &#x2F;&#x2F;java.util.Date  &#x2F;&#x2F;获得时间戳 然后传给sql.Date            st.setDate(5,new java.sql.Date(new Date().getTime()));            &#x2F;&#x2F;以上填充完毕 然后执行            int i &#x3D; st.executeUpdate();            if (i&gt;0)&#123;                System.out.println(&quot;插入成功&quot;);            &#125;        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.release(conn,st,null);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.dong.lesson03;import com.dong.lesson02.utils.JdbcUtils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;public class TestDelete2 &#123;    public static void main(String[] args) &#123;        Connection conn &#x3D;null;        PreparedStatement st &#x3D;null;        try &#123;            conn &#x3D; JdbcUtils.getConnection();            &#x2F;&#x2F;?是占位符 代替参数            String sql &#x3D;&quot;delete  from users where id&#x3D;?&quot;;            st &#x3D;conn.prepareStatement(sql);&#x2F;&#x2F;预编译sql 先写sql 但是不执行            &#x2F;&#x2F;手动给参数赋值            st.setInt(1,4);            &#x2F;&#x2F;以上填充完毕 然后执行            int i &#x3D; st.executeUpdate();            if (i&gt;0)&#123;                System.out.println(&quot;删除成功&quot;);            &#125;        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.release(conn,st,null);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.dong.lesson03;import com.dong.lesson02.utils.JdbcUtils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.util.Date;public class TextUpdata &#123;    public static void main(String[] args) &#123;        Connection conn &#x3D;null;        PreparedStatement st &#x3D;null;        try &#123;            conn &#x3D; JdbcUtils.getConnection();            &#x2F;&#x2F;?是占位符 代替参数            String sql &#x3D;&quot;update users set &#96;name&#96; &#x3D; ?  where id&#x3D;? ;&quot;;            st &#x3D;conn.prepareStatement(sql);&#x2F;&#x2F;预编译sql 先写sql 但是不执行            &#x2F;&#x2F;手动给参数赋值           st.setString(1,&quot;东&quot;);           st.setInt(2,1);            &#x2F;&#x2F;以上填充完毕 然后执行            int i &#x3D; st.executeUpdate();            if (i&gt;0)&#123;                System.out.println(&quot;更新成功&quot;);            &#125;        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.release(conn,st,null);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.dong.lesson03;import com.dong.lesson02.utils.JdbcUtils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class testSelect &#123;    public static void main(String[] args) &#123;        Connection conn&#x3D;null;        PreparedStatement st&#x3D;null;        ResultSet re &#x3D;null;        try &#123;            conn &#x3D; JdbcUtils.getConnection();            String sql&#x3D;&quot;Select * from users where id &#x3D;?&quot;;            st &#x3D; conn.prepareStatement(sql);            st.setInt(1,1);             re &#x3D; st.executeQuery();             while (re.next())&#123;                 System.out.println(re.getString(&quot;NAME&quot;));                 System.out.println(re.getString(&quot;email&quot;));             &#125;        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.release(conn,st,re);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dong<span class="token punctuation">.</span>lesson02<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JdbcUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> statement<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//SELECT * FROM `users` WHERE `NAME`='' or 1=1 AND `PASSWORD`='' or 1=1 ;</span>            <span class="token comment">//获取连接</span>            connection <span class="token operator">=</span> jdbcutils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取sql对象</span>            <span class="token comment">//PreparedStatement 防止sql注入的本质，把传递进来的参数当做字符</span>            <span class="token comment">// 假设其中存在转义字符,比如说' 会被忽略掉, '会被转义</span>            <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"SELECT * FROM `users` WHERE `NAME`=? AND `PASSWORD`= ?"</span><span class="token punctuation">;</span>           statement<span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            statement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            statement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs<span class="token operator">=</span>statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//sql</span>            <span class="token comment">//查询获取返回集合</span>            <span class="token comment">//遍历</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            jdbcutils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>statement<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-6-IDEA-连接数据库"><a href="#10-6-IDEA-连接数据库" class="headerlink" title="10.6 IDEA 连接数据库"></a>10.6 IDEA 连接数据库</h2><h2 id="10-7-事务"><a href="#10-7-事务" class="headerlink" title="10.7 事务"></a>10.7 事务</h2><p>​       </p><p>事务</p><p>ACID原则</p><p>原子性: 要么全都成功，要么全都失败</p><p>一致性: 结果不变，总数一直</p><p>隔离性: 多个进程互不干扰</p><p>持久性: 一旦提交不可逆，持久化到数据库了</p><p>隔离性的问题:</p><p>脏读 ：一个事务读取了另一个没有提交的事务</p><p>不可重复读：在同一个事务内，重复读取表中的数据，表数据发生了改变</p><p>虚读(幻读):在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致（数据变多了）</p><blockquote><p>代码实现</p></blockquote><ol><li><p>开启事务</p></li><li><p>一组业务完毕，提交事务</p></li><li><p>可以在catch 中显示回滚语句 默认失败回滚可以不写</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransaction</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> st <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> re <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            conn <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭数据库的自动提交且开启事务 开启事务是自动的</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">" update account set money=money-100 where name ='A'"</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// int x=1/0  测试报错</span>            <span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">" update account set money=money+100 where name ='B'"</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//业务完毕，提交事务</span>            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果失败会回滚</span>                <span class="token comment">//这句话是默认就有的  可以不写</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>st<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-9-数据库连接池"><a href="#10-9-数据库连接池" class="headerlink" title="10.9 数据库连接池"></a>10.9 数据库连接池</h2><ol><li>数据库连接–执行完毕–释放 </li></ol><p>连接 ，释放  十分浪费系统资源</p><p>池化技术:准备一些预先的资源,过来就连接预先准备好的</p><p>（服务员准备好了 过来就进行服务 直接扔sql）</p><p>假设 常用连接数是10</p><p>假设 有15个员工</p><p>**最小连接数: **10（常用连接数 可以是100，10等等）</p><p>**最大连接数:**15（业务最高重载上限）</p><p>超过15个的排队等待</p><p><strong>等待超时:100ms</strong></p><ol start="2"><li>编写连接池  需要实现DataSource接口</li></ol><p><strong>开源数据源实现</strong>（DataSource接口的实现类）</p><p>DBCP</p><p>C3P0</p><p>Druid:阿里巴巴</p><h3 id="1-DBCP"><a href="#1-DBCP" class="headerlink" title="1. DBCP"></a>1. DBCP</h3><p><strong>DBCP连接池配置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#连接设置driverClassName<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>jdbcstudy<span class="token operator">?</span>userUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>uesSSL<span class="token operator">=</span><span class="token boolean">true</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span><span class="token number">123456</span>#<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 初始化连接 <span class="token operator">--</span><span class="token operator">></span>initialSize<span class="token operator">=</span><span class="token number">10</span>#最大连接数量maxActive<span class="token operator">=</span><span class="token number">50</span>#<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 最大空闲连接 <span class="token operator">--</span><span class="token operator">></span>maxIdle<span class="token operator">=</span><span class="token number">20</span>#<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 最小空闲连接 <span class="token operator">--</span><span class="token operator">></span>minIdle<span class="token operator">=</span><span class="token number">5</span>#<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 超时等待时间以毫秒为单位 <span class="token number">6000</span>毫秒<span class="token operator">/</span><span class="token number">1000</span>等于<span class="token number">60</span>秒 <span class="token operator">--</span><span class="token operator">></span>maxWait<span class="token operator">=</span><span class="token number">60000</span>#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名<span class="token operator">=</span>property<span class="token punctuation">;</span>】#注意：<span class="token string">"user"</span> 与 <span class="token string">"password"</span> 两个属性会被明确地传递，因此这里不需要包含他们。connectionProperties<span class="token operator">=</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>characterEncoding<span class="token operator">=</span>utf8#指定由连接池所创建的连接的自动提交（auto<span class="token operator">-</span>commit）状态。defaultAutoCommit<span class="token operator">=</span><span class="token boolean">true</span>#driver <span class="token keyword">default</span> 指定由连接池所创建的连接的只读（read<span class="token operator">-</span>only）状态。#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：<span class="token class-name">Informix</span>）defaultReadOnly<span class="token operator">=</span>#driver <span class="token keyword">default</span> 指定由连接池所创建的连接的事务级别（<span class="token class-name">TransactionIsolation</span>）。#可用值为下列之一：（详情可见javadoc。）NONE<span class="token punctuation">,</span>READ_UNCOMMITTED<span class="token punctuation">,</span> READ_COMMITTED<span class="token punctuation">,</span> REPEATABLE_READ<span class="token punctuation">,</span> <span class="token class-name">SERIALIZABLE</span>defaultTransactionIsolation<span class="token operator">=</span>READ_COMMITTED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>从数据源中获取连接</strong></p><pre class="line-numbers language-none"><code class="language-none">import org.apache.commons.dbcp.BasicDataSourceFactory;import javax.sql.DataSource;import java.io.InputStream;import java.sql.*;import java.util.Properties;public class jdbcutils_dbcp &#123;   private static   DataSource source&#x3D;null;    static &#123;        try &#123;            InputStream in &#x3D;jdbcutils_dbcp.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;);            Properties properties &#x3D; new Properties();            properties.load(in);          &#x2F;&#x2F;创建数据源 工厂模式--&gt; 创建对象             source &#x3D; BasicDataSourceFactory.createDataSource(properties);        &#125;catch (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    &#x2F;&#x2F; 获取连接    public static Connection getConnection() throws SQLException &#123;        &#x2F;&#x2F;从数据源中获取连接        return source.getConnection();    &#125;    &#x2F;&#x2F;释放连接资源    public static void  release(Connection conn, Statement st, ResultSet rs) throws SQLException &#123;        if(conn!&#x3D;null) conn.close();        if(st!&#x3D;null) st.close();        if(rs!&#x3D;null) rs.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试连接和查询</strong></p><pre class="line-numbers language-none"><code class="language-none">import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class testdbcp &#123;    public static void main(String[] args) throws SQLException &#123;        Connection connection&#x3D;null;        PreparedStatement statement&#x3D;null;        ResultSet rs&#x3D;null;        try &#123;            &#x2F;&#x2F;获取连接            connection &#x3D; jdbcutils_dbcp.getConnection();            &#x2F;&#x2F;sql            String sql&#x3D;&quot;SELECT * from users WHERE id&gt;?&quot;;            &#x2F;&#x2F;预编译sql            statement&#x3D; connection.prepareStatement(sql);            &#x2F;&#x2F;设置参数            statement.setObject(1,1);            &#x2F;&#x2F;执行sql            rs&#x3D;statement.executeQuery();            &#x2F;&#x2F;遍历结果            while (rs.next())&#123;                System.out.println(rs.getObject(&quot;NAME&quot;));            &#125;        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;finally &#123;            jdbcutils_dbcp.release(connection,statement,rs);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-C3p0"><a href="#2-C3p0" class="headerlink" title="2. C3p0"></a>2. C3p0</h3><p><strong>DBCP连接池配置</strong></p><p>c3p0-config.xml</p><p>xml 不用读取，加载会自动匹配</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>c3p0<span class="token operator">-</span>config<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    c3p0的缺省（默认）配置    如果在代码中<span class="token string">"ComboPooledDataSource ds=new ComboPooledDataSource();"</span>这样写就表示使用的是c3p0的缺省（默认）<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">default</span><span class="token operator">-</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span><span class="token operator">></span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>jdbcstudy<span class="token operator">?</span>userUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>uesSSL<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>serverTimezone<span class="token operator">=</span>UTC<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"acquiredIncrement"</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"initialPoolSize"</span><span class="token operator">></span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"minPoolSize"</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxPoolSize"</span><span class="token operator">></span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">-</span>config<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    c3p0的命名配置    如果在代码中<span class="token string">"ComboPooledDataSource ds=new ComboPooledDataSource("</span><span class="token class-name">MySQL</span><span class="token string">");"</span>这样写就表示使用的是mysql的缺省（默认）<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>named<span class="token operator">-</span>config name<span class="token operator">=</span><span class="token string">"MySQL"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span><span class="token operator">></span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>jdbcstudy<span class="token operator">?</span>userUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>uesSSL<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>serverTimezone<span class="token operator">=</span>UTC<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"acquiredIncrement"</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"initialPoolSize"</span><span class="token operator">></span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"minPoolSize"</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxPoolSize"</span><span class="token operator">></span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>named<span class="token operator">-</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>c3p0<span class="token operator">-</span>config<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>c3p0连接数据库</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span></span><span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> jdbcutils_c3p0 <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ComboPooledDataSource</span> source<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             source<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token string">"MySQL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//创建数据源 工厂模式--> 创建对象</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//从数据源中获取连接</span>        <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//释放连接资源</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">,</span> <span class="token class-name">Statement</span> st<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">无论使用什么数据源 本质还是一样 <span class="token punctuation">,</span><span class="token class-name">DataSource</span> 接口不会变<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title="***"></a>***</h3><p>BETWEEN  AND  包含边界</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页设计了解</title>
      <link href="/2021/12/03/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/03/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="十天总结"><a href="#十天总结" class="headerlink" title="十天总结"></a>十天总结</h1><p>思考：这10天我有没有一点进步？<br>目标：要把UOLab的网页界面做出来（文字的需求，编程图形化的界面）<br>技术：HTML、CSS、JavaScript、Bootstrap，分别能做什么？ 我们学单一技术不行，要学N种技术，整合使用，才能做出项目。<br>工具：Chrome（调试JS）、HBuider9（Mac用户，下载HBuilderX）<br>自己每天投入学习技术和做东西的时间，几个小时？进步情况如何？<br>哪些东西不懂？问老师；哪些不熟练？在家里多动手做。<br>能够对企业做法有所了解、岗位、行业、职业发展等等、大学规划有所启发。<br>后期学习建议<br>定目标，做规划，行动<br>前端技术未涉及的<br>JSON **<br>Layui **<br>ECharts **<br>jQuery **<br>WebStorm **<br>Vue.js **<br>Node.js<br>LESS<br>SASS<br>Flex布局<br>HTML5<br>CSS3<br>后端：前后端分离微服务架构开发 按发过去的路线图和清单来学习即可。需要提前学。<br>走安全方向的 学习安全相关知识，很多，需要提前学。</p><h1 id="Lesson10—周四（7-22）"><a href="#Lesson10—周四（7-22）" class="headerlink" title="Lesson10—周四（7.22）"></a>Lesson10—周四（7.22）</h1><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>1）打开Chrome的控制台console，看里面有没有自己代码报错(点一点，动一动网页)<br>2）如果有报错，根据错误提示，排错<br>3）如果没有报错，还是代码有问题，一行一行检查代码  </p><h2 id="导出Excel和ECharts怎么弄"><a href="#导出Excel和ECharts怎么弄" class="headerlink" title="导出Excel和ECharts怎么弄"></a>导出Excel和ECharts怎么弄</h2><p>导出需要Java后端支持；需要专门学习ECharts的使用</p><h1 id="Lesson9—周三（7-21）"><a href="#Lesson9—周三（7-21）" class="headerlink" title="Lesson9—周三（7.21）"></a>Lesson9—周三（7.21）</h1><h2 id="任务：按需求，完成原型的开发（复制-粘贴）"><a href="#任务：按需求，完成原型的开发（复制-粘贴）" class="headerlink" title="任务：按需求，完成原型的开发（复制 粘贴）"></a>任务：按需求，完成原型的开发（复制 粘贴）</h2><h2 id="学会知识点"><a href="#学会知识点" class="headerlink" title="学会知识点"></a>学会知识点</h2><ol><li>HTML表单（文本框、下拉列表、单选按钮、按钮  </li><li>HTML表格  </li><li>HTML图片  </li><li>HTML超链接  </li><li>CSS的选择器（id、class）  </li><li>什么是真正学会？<br>会用、会做。学过了，知道了，但用不起来，算是没学！  <h1 id="Lesson8—周二（7-20）"><a href="#Lesson8—周二（7-20）" class="headerlink" title="Lesson8—周二（7.20）"></a>Lesson8—周二（7.20）</h1><h2 id="工作任务：开发《UOLab联合开放实验室管理体系》项目原型（界面）"><a href="#工作任务：开发《UOLab联合开放实验室管理体系》项目原型（界面）" class="headerlink" title="工作任务：开发《UOLab联合开放实验室管理体系》项目原型（界面）"></a>工作任务：开发《UOLab联合开放实验室管理体系》项目原型（界面）</h2></li><li>提供美工做的模板  </li><li>学会如何在模板基础上改，把项目功能放在模板上</li><li>大二第2学期，做Java Web项目；一定会用到这次学的技术<br>大三第1学期，做SSM框架的项目；也会用到这次学的技术<br>做Java研发工程师、Web前端开发工程师的话，一定会用  <h1 id="Lesson7—周一（7-19）"><a href="#Lesson7—周一（7-19）" class="headerlink" title="Lesson7—周一（7.19）"></a>Lesson7—周一（7.19）</h1><h2 id="前天问题总结："><a href="#前天问题总结：" class="headerlink" title="前天问题总结："></a>前天问题总结：</h2><h3 id="一、技术问题"><a href="#一、技术问题" class="headerlink" title="一、技术问题"></a>一、技术问题</h3></li><li>计算利息的时候，得到的是小数，位数很多</li></ol><p>计算机算的时候时用的2进制；我们填的是10进制<br>在二进制转向十进制的时候会产生误差（百度解决）<br>2. 写完代码以后，点一下按钮没有反应<br>1）打开Chrome的控制台console，看看里面有无红色的报错，根据提示，排错<br>2）如果console里没有报错，只能一行行检查<br>3. 如果不输入也能算会输出NAN 使用JS表单验证</p><h3 id="二、其他问题："><a href="#二、其他问题：" class="headerlink" title="二、其他问题："></a>二、其他问题：</h3><ol><li>坚决不要排斥这个专业！</li></ol><p>1）耐心认真的一行一行查代码<br>2）找人带<br>3）学编程时，视频不能为主导，尤其是没有开发经验的人<br>4）保持自信，坚持到底  </p><ol start="2"><li>建议：下学期除了考试，一定要学习项目技术和项目的开发上</li><li>如何排错<br>1）排错没有捷径，没有秘籍<br>2）要看错误提示，根据提示改代码<br>3）看到提示不会改错，找人帮忙<h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2>在公司开发中要使用正则表达式、JS函数、DOM<br>在存款计算器中，用到了：onfoucus（获得焦点）<br>document.getElementById(“对于id的名称”).value=””;表示为释放空间<br>document.getElementById(“对于id的名称”).style=”color：black”;表示对于样式的改变<br>定义正则表达式：<br>var regExp =/^[0-9]{2,6}$/;//（定义^开头$结尾）<br>[0-9]表示是数字{2， 6}表示最小为两位最大为六位{}表示数字的位数<br>regExp.test(abc)表示两者进行匹配比较  </li></ol><h1 id="Lesson6—周六（7-17）"><a href="#Lesson6—周六（7-17）" class="headerlink" title="Lesson6—周六（7.17）"></a>Lesson6—周六（7.17）</h1><h2 id="昨天总结"><a href="#昨天总结" class="headerlink" title="昨天总结"></a>昨天总结</h2><ol><li>我的图片GitHub不显示<br>图片没上传，路径不对，GitHub较慢</li><li>GitHub访问较慢如何解决<br>解决方法在群里<h2 id="一-JavaScript重要性"><a href="#一-JavaScript重要性" class="headerlink" title="一.JavaScript重要性"></a>一.JavaScript重要性</h2></li><li>对于Java研发工程师是必须的，要熟练开发</li><li>对于Web前端开发工程师，JavaScript必须要深入、精通。这个岗位使用 开发语言就是JavaScript  </li><li>对于大数据工程、爬虫工程师等：JavaScript也是需要掌握。<h2 id="二-JavaScript语言与c语言有关系？"><a href="#二-JavaScript语言与c语言有关系？" class="headerlink" title="二.JavaScript语言与c语言有关系？"></a>二.JavaScript语言与c语言有关系？</h2></li><li>没有关系，两种独立的语言</li><li>有相似语法，不代表有关系<h2 id="三-不同的编程语言应用场景"><a href="#三-不同的编程语言应用场景" class="headerlink" title="三.不同的编程语言应用场景"></a>三.不同的编程语言应用场景</h2></li><li>c语言<br>（强调算法、数据结构） 面向过程的。主要用于：智能硬件设备上的软件开发（嵌入式）、操作系统底层开发、 算法等。安卓手机的底层就是C开发的、Windows的底层也用C开发。偏底层应用。</li><li>c++语言<br> 面向对象的。主要用于：图形界面软件开发（美图秀秀、PS、酷狗音乐等）、通信 软件（QQ、钉钉）、游戏、控制软件（带有图形界面的控制软件）、STM32开发（嵌入式）</li><li>Java语言<br>不太强调算法、数据结构，Java的数据结构是现成的。 面向对象的。主要用于：基于B/S结构的大型管理信息系统开发（12306、教务系统、四六报名系统等）、 大数据开发（Hadoop）、安卓手机应用开发、智能电子设备软件开发（数字电视机顶盒）</li><li>python语言<br>python2和python3。胶水语言，什么都能干，全能型选手。主要用于： 信息安全编程、爬虫、大数据分析、AI等。</li><li>JavaScript语言<br>JavaScript语言 面向对象的。脚本语言，运行在浏览器上。主要：网页上的动态效果、网页和用户的交互等<h2 id="四-JavaScript是什么？"><a href="#四-JavaScript是什么？" class="headerlink" title="四.JavaScript是什么？"></a>四.JavaScript是什么？</h2>脚本语言，运行在浏览器中，也就是运行在客户机中。各种浏览器都能执行JS， 但是不同的浏览器对JS的支撑程度不尽相同。进行浏览器的兼容性测试。 JavaScript不是W3C的标准，由欧洲计算机制造商协会。 HTML、CSS、JS都是由浏览器执行的。</li></ol><h2 id="六-上网的过程"><a href="#六-上网的过程" class="headerlink" title="六. 上网的过程"></a>六. 上网的过程</h2><ol><li>B/S结构：Browser/Server 浏览器/服务器，如教务系统  </li><li>C/S结构：Client/Server 客户机/服务器 ，如qq  </li><li>单机软件：如：Word，在自己电脑上安，只能自己用。</li><li>上网过程分析 以12306为例<br>输入网址，敲下回车：浏览器向12306的服务器发出请求<br>响应：服务器收到浏览器请求后，服务器会把保存在服务器上的网页源码， 发回给浏览器。<br>浏览器在收到源码后，对源码执行，产生最终的显示效果。 <h2 id="七-JavaScript学习重要提醒"><a href="#七-JavaScript学习重要提醒" class="headerlink" title="七.JavaScript学习重要提醒"></a>七.JavaScript学习重要提醒</h2>JS调试比较麻烦：JS程序的调试要利用Chrome或Firefox的控制台<br>写JS程序一定要细心，一旦写错排错真的比较难（针对初学者）<h2 id="八-JavaScript学习重点（公司开发重点）"><a href="#八-JavaScript学习重点（公司开发重点）" class="headerlink" title="八.JavaScript学习重点（公司开发重点）"></a>八.JavaScript学习重点（公司开发重点）</h2></li><li>语法（if、for、运算符等等）  </li><li>函数  </li><li>事件  </li><li>正则表达式与表单验证  </li><li>DOM  <h2 id="九-JS输出（作用：便于调试JS代码）"><a href="#九-JS输出（作用：便于调试JS代码）" class="headerlink" title="九.JS输出（作用：便于调试JS代码）"></a>九.JS输出（作用：便于调试JS代码）</h2></li><li>alert()  </li><li>console.log()<br>补充：JS代码放在什么地方？ 网页内部；单独的.js文件中  <h2 id="十-JS语法"><a href="#十-JS语法" class="headerlink" title="十. JS语法"></a>十. JS语法</h2></li><li>JS是弱类型语言（没有类型）</li><li>JS中变量定义可以用var也可不用</li><li> JS语言大小写敏感（严格区分大小写）</li><li>语句结尾分号可以写，也可不写</li><li>JS函数用function，函数名程序员自定、函数的形参由程序员自定，JS中 的函数没有返回类型6. （因为JS是弱类型语言）</li><li>编程时候，不要上来就写代码，先整理思路，确定实现步骤；<br>把实现步骤，写成代码<h2 id="十一、排错（大学学习中最麻烦的地方、开发中最重要的地方）"><a href="#十一、排错（大学学习中最麻烦的地方、开发中最重要的地方）" class="headerlink" title="十一、排错（大学学习中最麻烦的地方、开发中最重要的地方）"></a>十一、排错（大学学习中最麻烦的地方、开发中最重要的地方）</h2>写代码容易，排错费劲<br>仔细分析自己的代码，看哪里写错了，这个过程可能较长，但我们要经历！ 经历了，涨经验了，下次同样的错就容易排除了。<br>排错能力是大学生一定解决的！如何提升该能力？多写代码，多出错，累经验。 排错需要经验。公司招聘：要求有项目开发经验了。<br>大家不要放弃！缺乏经验，没人指导。借助过来人或能行的人的力量，帮自己提升。<h1 id="Lesson5—周五（7-16）"><a href="#Lesson5—周五（7-16）" class="headerlink" title="Lesson5—周五（7.16）"></a>Lesson5—周五（7.16）</h1></li></ol><h2 id="昨天问题总结"><a href="#昨天问题总结" class="headerlink" title="昨天问题总结"></a>昨天问题总结</h2><ol><li>我在原来的网页上加入Bootstrap样式以后，对不齐了。<br>如果要使用Bootstrap样式，建议所有的地方都用Bootstrap样式。<br>Bootstrap追求的是自适应，不太讲究美观</li><li>网页上传到github后，图片不显示<br>在网页代码里，src后带有目录，比如：<img src="images/weixin.png">;<br>但是在github上没有建images目录，而是把图片直接上传了，因此图片不能显示<br>理解了，再去做。解决方案：在github上建目录，把图片上传到目录里。</li><li>图片路径也对，但图片不显示<br>原来图片路径不对，但改了后又上传了，刷新网页，没变化。github滞后导致，<br>过一阵再刷新。</li><li>公司工作需要的必须的专业技能到底有哪些<br>建议：<ol><li>知道读大学（本科，硕士，博士）目的何在？</li></ol><pre><code>工作！目的：积累找到工作的资本，技术+能力；文凭</code></pre><ol start="2"><li>在这个暑假就要明确未来做什么岗位？<br>不同的岗位学习不同的技术。<br>Java研发工程师、C/C++开发工程师、Web前端开发工程师、<br>信息安全工程师、嵌入式开发工程师、UI设计工程师、<br>实施工程师、售前工程师、需求分工程师</li><li>误区：编程语言学好了，就能找工作了！错！<pre><code>应当下大功夫学的是：围绕语言的一系列技术</code></pre></li><li>zhaopin.com:招聘的岗位要什么技术，我就学什么！<h2 id="一-Bootstrap表格"><a href="#一-Bootstrap表格" class="headerlink" title="一. Bootstrap表格"></a>一. Bootstrap表格</h2>class=”table table-bordered text-center table-striped”</li></ol></li></ol><p>table-striped添加斑马线形式的条纹</p><p>二、任务：个人存款计算软件界面<br>三、任务：个人社保计算软件界面<br>为JS提供帮助,为后面去实现代码的操作</p><p>编程技术学习方法：<br>1、敢于面对问题。先思考，再百度，问同学和老师<br>2、要灵活！不能死板，不要照搬，抄写<br>3、不看书，不看老师代码，不看视频，自己写出代码<br>4、先理解，弄懂，再写；<br>5、专注并且敏锐<br>6、不要过度依赖网络视频，参考！</p><h1 id="Lesson4—周四（7-15）"><a href="#Lesson4—周四（7-15）" class="headerlink" title="Lesson4—周四（7.15）"></a>Lesson4—周四（7.15）</h1><h2 id="上一天技术总结"><a href="#上一天技术总结" class="headerlink" title="上一天技术总结"></a>上一天技术总结</h2><ol><li><p>CSS选择器  </p><p>  （标记、id、class）</p></li><li><p>CSS代码放置位置</p></li><li><p>边框样式</p></li><li><p>工作后 网页是在美工（UI）的基础上开发后端程序</p></li><li><p>怎么样把自己做的网页给其他人看（公网访问）<br>开发网页<br>购买云主机Linux系统（阿里云主机），获得一个IP地址。<br>把做好的网页远程上传到主机（此时就可以通过IP来访问了）<br>百度搜索域名注册，注册一个域名：域名在工信部通管局备案 取得备案号：把自己的域名和IP做绑定，通过主机完成：部分网站需要在公安局备案 此时，网站就可以通过域名来访问。</p><h2 id="一-CSS显示"><a href="#一-CSS显示" class="headerlink" title="一.CSS显示"></a>一.CSS显示</h2></li><li><p>display：none 隐藏后，释放区域。</p></li><li><p>visibility：hidden 隐藏后，区域不释放</p><h2 id="二-CSS浮动"><a href="#二-CSS浮动" class="headerlink" title="二.CSS浮动"></a>二.CSS浮动</h2></li><li><p>美工精通</p></li><li><p>主要用于网页布局（CSS + DIV）</p></li></ol><h2 id="三-Bootstrap技术"><a href="#三-Bootstrap技术" class="headerlink" title="三.Bootstrap技术"></a>三.Bootstrap技术</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>Twitter公司发明的技术<br>用Bootstrap做的网页，能狗自动适应屏幕大小（自适应，响应式）<br>移动优先（Bootstrap伴随着智能手机而来）<br>Bootstrap技术是基于：HTML、CSS、JavaScript<br>Bootstrap本质：写好的CSS样式库（拿来就用）<br>Bootstrap不是编程语言，是一种技术。</p><h3 id="2-Bootstrap如何使用"><a href="#2-Bootstrap如何使用" class="headerlink" title="2. Bootstrap如何使用"></a>2. Bootstrap如何使用</h3><p>第1种 把Bootstrap文件从官网下载下来，复制到自己的项目里<br>第2种 直接使用CDN（内容分发网络，其实就是放在公网上的文件） 如果使用CDN方式，电脑必须联网。</p><h3 id="3-如何学Bootstrap"><a href="#3-如何学Bootstrap" class="headerlink" title="3. 如何学Bootstrap"></a>3. 如何学Bootstrap</h3><p>看官方文档。</p><h3 id="4-Bootstrap工作原理是啥？"><a href="#4-Bootstrap工作原理是啥？" class="headerlink" title="4.Bootstrap工作原理是啥？"></a>4.Bootstrap工作原理是啥？</h3><p>网格系统（屏幕分成12列，使用者可以按自己需要组合列）<br>使用Bootstrap后，CSS样式就不用我们自己写了；直接用即可</p><h2 id="四-如何在GitHub上搭建静态网站"><a href="#四-如何在GitHub上搭建静态网站" class="headerlink" title="四. 如何在GitHub上搭建静态网站"></a>四. 如何在GitHub上搭建静态网站</h2><p>注册GitHub账号<br>创建一个项目<br>把写好的网页上传到项目里<br>在设置中找到pages，点击main，点save    </p><h1 id="Lesson3—周三（7-14）"><a href="#Lesson3—周三（7-14）" class="headerlink" title="Lesson3—周三（7.14）"></a>Lesson3—周三（7.14）</h1><h2 id="一-CSS是什么"><a href="#一-CSS是什么" class="headerlink" title="一. CSS是什么"></a>一. CSS是什么</h2><p>层叠式样式表，简称为样式。(Cascading Style Sheets)（W3C制定）<br>最新版css3</p><h2 id="二-CSS选择器（-）"><a href="#二-CSS选择器（-）" class="headerlink" title="二.CSS选择器（*****）"></a>二.CSS选择器（*****）</h2><p>标记选择器<br>id选择器<br>class选择器</p><h2 id="三-CSS放置的位置"><a href="#三-CSS放置的位置" class="headerlink" title="三.CSS放置的位置"></a>三.CSS放置的位置</h2><p>页内样式：放在head之间，用style标记<br>行内样式：放在标记的style属性里，行内样式优先级最高<br>外部样式：放在独立的.css文件中，在网页上用link标记引入</p><h2 id="四-开发常用样式"><a href="#四-开发常用样式" class="headerlink" title="四.开发常用样式"></a>四.开发常用样式</h2><ol><li>背景颜色<br> background-color</li><li>文本样式<br>color\text-align\text-decoration</li><li>字体样式<br> font-family\font-size<br>网页是默认是16px；工程上一般是12px或者14px；</li><li>链接样式<br> 细线表格border-collapse：collapse（折叠）</li><li>表格样式<br> 边框变红 border:1px solid red<h2 id="五-CSS盒子模型"><a href="#五-CSS盒子模型" class="headerlink" title="五.CSS盒子模型"></a>五.CSS盒子模型</h2>美工必须精通<br>开发工程师理解并会用<br>重要：外边距margin、内边距padding;（内外边距有参考对象 是相对的）<h2 id="六-登录网页"><a href="#六-登录网页" class="headerlink" title="六.登录网页"></a>六.登录网页</h2>用到了盒子模型（内部外部边距等）<br>HTML表单元素（用户名，密码，登录按钮）<h1 id="Lesson2—周二-7-13"><a href="#Lesson2—周二-7-13" class="headerlink" title="Lesson2—周二(7.13)"></a>Lesson2—周二(7.13)</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li>HTML只能做网页结构，大小写不区分，由浏览器执行</li><li>开发重点：表单、表格、超链接、图片、列表、iframe</li><li>学到什么程度就达标了？能把第2”写”出来</li><li>对开发人员的用途：做项目的界面<h2 id="一-html表格"><a href="#一-html表格" class="headerlink" title="一.html表格"></a>一.html表格</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>表格标记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>表格行、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>表格列在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>里放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>,在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>里放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> 合并x列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="二-html超链接"><a href="#二-html超链接" class="headerlink" title="二.html超链接"></a>二.html超链接</h2><ol><li>可以是到自己的网站,也可以到外部网站</li><li>语法<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-html-图片"><a href="#三-html-图片" class="headerlink" title="三.html 图片"></a>三.html 图片</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">heigth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四-html-列表"><a href="#四-html-列表" class="headerlink" title="四.html 列表"></a>四.html 列表</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">有序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> abc <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>一条分界线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-标题"><a href="#五-标题" class="headerlink" title="五.标题"></a>五.标题</h2>HTML中共6级标题；从h1-h6<pre><code> &lt;h1&gt;中北大学&lt;/h1&gt; &lt;h2&gt;软件学院&lt;/h2&gt; &lt;h3&gt;暑期小假期&lt;/h3&gt;  </code></pre></li></ol><h2 id="六-段落与div块"><a href="#六-段落与div块" class="headerlink" title="六.段落与div块"></a>六.段落与div块</h2><p>段落p：会自动换行<br>块div ：会自动换行<br>span:不会自动换行的<br>label：不会自动换行</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是一个块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>密码必须是6位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>用户名不为空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>这个是标签 中北大学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七-html颜色"><a href="#七-html颜色" class="headerlink" title="七.html颜色"></a>七.html颜色</h2><p>颜色表示两种：1.用颜色名；2.颜色的值（主要用它）,是16进制，以#开头<br>颜色是由3种色调配而成：RGB（red、green、blue）<br>做网页的在公司里是网页美工或UI工程师；<br>我们开发人员不去做网页，更不会去做网站。我们需要能看懂他们的。</p><h2 id="八-字符实体"><a href="#八-字符实体" class="headerlink" title="八.字符实体"></a>八.字符实体</h2><p>面试题：HTML里的空格怎么表示 &amp;nbsp；</p><h2 id="九-iframe框架-常用"><a href="#九-iframe框架-常用" class="headerlink" title="九. iframe框架(常用)"></a>九. iframe框架(常用)</h2><p>查看对应HTML文件</p><h2 id="高频面试题"><a href="#高频面试题" class="headerlink" title="高频面试题"></a>高频面试题</h2><p>post与get的区别  </p><ol><li><p>post方式提交表单，表单数据在地址栏不显示，比较安全<br>  get方式提交表单，数据会显示在地址栏上，不安全</p></li><li><p>post提交数据，数据量大小不限；get一般最大为2K， </p><pre><code>一般使用post。</code></pre><h1 id="lesson1—周一-7-12"><a href="#lesson1—周一-7-12" class="headerlink" title="lesson1—周一(7.12)"></a>lesson1—周一(7.12)</h1><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2></li><li><p>代码格式规范不清晰<br>没有了解 提交按钮和跳转按钮的区别</p><h2 id="一-htlm介绍"><a href="#一-htlm介绍" class="headerlink" title="一.htlm介绍"></a>一.htlm介绍</h2></li><li><p>htlm是什么（5w1h）<br>超文本标记语言 最新htlm5    </p></li><li><p>为什么用          why<br> web项目界面  </p></li><li><p>谁来用            who<br>后端开发人员一定要会、Web前端开发工程师、网页美工（UI）  </p></li><li><p>什么时候用       when  </p></li><li><p>用在哪里          where<br>网页上搭建网页结构或元素</p></li><li><p>怎么用         how   </p><h2 id="二-HTML表单开发"><a href="#二-HTML表单开发" class="headerlink" title="二.HTML表单开发"></a>二.HTML表单开发</h2></li><li><p>文本框怎么写      </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;text&quot; &gt;&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>密码框怎么写？    </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;password&quot;&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>单选按钮怎么写？    </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;radio&quot; &gt;&lt;input type&#x3D;&quot;radio&quot; &gt;&lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>下拉选择怎么写？   </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;select&gt;  &lt;option&gt;abc&lt;&#x2F;option&gt;  &lt;option&gt;abc&lt;&#x2F;option&gt;  &lt;option&gt;abc&lt;&#x2F;option&gt;  &lt;&#x2F;select&gt;&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>复选框怎么写？    </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;checkbox&quot;&gt;abc   (abc 为举例)&lt;input type&#x3D;&quot;checkbox&quot;&gt;abc  &lt;input type&#x3D;&quot;checkbox&quot;&gt;abc&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>文本域怎么写？    </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;textarea row&#x3D;&quot;5&quot; cols&#x3D;&quot;50&quot;&gt;  abc  &lt;&#x2F;textarea&gt;&lt;br&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>文件上传怎么写？   </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;file&quot;&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>提交按钮怎么写？</p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;abc&quot;&gt;&lt;!--acb会呈现在按钮上 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重置按钮怎么写？  </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;abc&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如何跳转网页？ </p><pre class="line-numbers language-htlm" data-language="htlm"><code class="language-htlm">&lt;form action&#x3D;&quot;receive.html&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;注册&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python入门</title>
      <link href="/2021/12/03/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/03/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="python入门"><a href="#python入门" class="headerlink" title="python入门"></a>python入门</h1><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h3><p> （标识，一个变量由标识 类型 值 组成）</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token comment">#140703780702160 &lt;class 'int'> 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-与-is"><a href="#2-与-is" class="headerlink" title="2. == 与 is"></a>2. == 与 is</h3><p>==比较的是值</p><p>is 比较的id</p><p>用法刚好的Java equals相反</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">10</span>b<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span> <span class="token comment">#T</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span> <span class="token comment">#T id一样</span>lst1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>lst2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1 <span class="token operator">==</span> lst2<span class="token punctuation">)</span><span class="token comment">#T</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst1 <span class="token keyword">is</span> lst2<span class="token punctuation">)</span> <span class="token comment">#F id不一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-布尔运算"><a href="#3-布尔运算" class="headerlink" title="3. 布尔运算"></a>3. 布尔运算</h3><ul><li><p>and 并且 两个T为T</p></li><li><p>or  或者</p></li><li><p>not 非</p></li><li><p>in 与not in</p></li></ul> <pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e"</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-运算符优先级"><a href="#4-运算符优先级" class="headerlink" title="4. 运算符优先级"></a>4. 运算符优先级</h3><p>先后顺序如图所示<br><img src="https://img-blog.csdnimg.cn/a2b05670ac9f43b3bf506c4778f7683b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAYmVnaW5uZXJEWg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h3 id="5-intput"><a href="#5-intput" class="headerlink" title="5. intput"></a>5. intput</h3><p>   intput  里面写提醒语句 返回的是str类型 需要的话 要类型转换</p><h3 id="6-对象的布尔值"><a href="#6-对象的布尔值" class="headerlink" title="6.对象的布尔值"></a>6.对象的布尔值</h3><p><img src="https://img-blog.csdnimg.cn/ccda686f2f9340c6bea20d0cf415328c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAYmVnaW5uZXJEWg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 空列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 空列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#空元组</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#空元组</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#空字典</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#空字典</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#空集合</span><span class="token comment"># 以上输出都是False</span><span class="token comment"># 其他对象都为T</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-程序的组织结构"><a href="#7-程序的组织结构" class="headerlink" title="7. 程序的组织结构"></a>7. 程序的组织结构</h3><ul><li><p>顺序结构</p><p>程序重上到下 依次执行</p></li><li><p>分支结构</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span><span class="token number">100</span><span class="token keyword">if</span> a<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入成绩判断等级"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> a<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">and</span> a<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token operator">>=</span><span class="token number">80</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> a<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入错误"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>循环结构<ul><li>while</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> a<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    a<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>for-in </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"python"</span><span class="token punctuation">:</span> <span class="token comment">#in 后面是迭代对象 eg：range，一个字符串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#输出 p y t h o n</span><span class="token keyword">for</span> _ <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#循环体中不需要使用自定义变量，可以自定义变量写为_</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"人生苦短 我用python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>break 语句</p><p>和 C 中的类似，用于跳出最近的一级 for 或 while 循环。</p></li><li><p>continue语句<br>用于结束当前循环,进入,下一次循环,通常与分支结构中的if一起使用</p></li><li><p>else 与 循环语句（for while）搭配使用</p><p>循环正常执行 没有break 时，执行else</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> a<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>    pwd<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pwd <span class="token operator">==</span><span class="token number">888</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入正确"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入错误"</span><span class="token punctuation">)</span>    a<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"三次输入错误，账号已锁定"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>条件表达式<br>中间判断为T 值为左  判断为F 值为右<br><img src="https://img-blog.csdnimg.cn/62846f17fcce4630b598fb154cc77fdb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAYmVnaW5uZXJEWg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></li></ul><h3 id="8-pass语句"><a href="#8-pass语句" class="headerlink" title="8. pass语句"></a>8. pass语句</h3><p>   用于搭建代码 </p><h3 id="9-内置函数"><a href="#9-内置函数" class="headerlink" title="9.内置函数"></a>9.内置函数</h3><p>前面不需要加前缀 直接使用的 </p><p>eg：intput print</p><ul><li>range函数</li></ul><p>返回值是一个迭代器对象<br>range类型的优点:不管range对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要存储start,stop和step，只有当用到range对象时，才会去计算序列中的相关元素<br> in与not in 判断整数序列中是否存在(不存在)指定的整数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#范围【0 10）默认从0开始 默认步长为1</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">#控制台输出range(0, 10)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#--》列表 用于查看ranf对象中的整数序列</span>r <span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 后面那个是开区间</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">in</span> r<span class="token punctuation">)</span> <span class="token comment">#False</span>r <span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#没加步长前 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>                <span class="token comment">#加步长     [1, 3, 5, 7, 9]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-列表"><a href="#10-列表" class="headerlink" title="10.列表[]"></a>10.列表[]</h3><p>相当于群体语言的数组 </p><p><strong>可以存不同的类型</strong></p><p><strong>可以存重复元素</strong></p><p><strong>根据动态分配和回收内存</strong></p><p>存储多个对象的引用</p><p>列表对象 按顺序有序储存</p><p><img src="D:\学习\截图\image-20211009111016942.png" alt="image-20211009111016942"></p><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1)创建"></a>1)创建</h4><ul><li><p> 中括号</p></li><li><p>内置函数lis= list（[‘hello’,’word’,98]）</p><p>lis[0] 和 lis[-3]就是’hello’</p><p>从右到左 -1开始  </p><p>从左到右 0 开始</p></li></ul><h4 id="2-查找-获取"><a href="#2-查找-获取" class="headerlink" title="2)查找 获取"></a>2)查找 获取</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">lis<span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'word'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出0   返回左到右第一个</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#3    在【1 4）里面找</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不包括stop 步长为负数也是 </p><p><img src="D:\学习\截图\image-20211009134717155.png" alt="image-20211009134717155"></p><ul><li> 多个元素 切片操作</li></ul><p><img src="D:\学习\截图\image-20211009135157030.png" alt="image-20211009135157030"></p><p><strong>start默认是0   stop默认是最后一个  step默认是1</strong></p><ul><li>步长是负数</li></ul><h4 id="3）添加"><a href="#3）添加" class="headerlink" title="3）添加"></a>3）添加</h4><p><img src="D:\学习\截图\image-20211009155627556.png" alt="image-20211009155627556"></p><p><img src="D:\学习\截图\image-20211009160119517.png" alt="image-20211009160119517"></p><p><img src="D:\学习\截图\image-20211009160311845.png" alt="image-20211009160311845"></p><p><img src="D:\学习\截图\image-20211009160639936.png" alt="image-20211009160639936"></p><h4 id="4）删除"><a href="#4）删除" class="headerlink" title="4）删除"></a>4）删除</h4><p><img src="D:\学习\截图\image-20211009161142374.png" alt="image-20211009161142374"></p><h4 id="5）修改"><a href="#5）修改" class="headerlink" title="5）修改"></a>5）修改</h4><p><img src="D:\学习\截图\image-20211009161647327.png" alt="image-20211009161647327"></p><p><img src="D:\学习\截图\image-20211009162512974.png" alt="image-20211009162512974"></p><h4 id="6）排序"><a href="#6）排序" class="headerlink" title="6）排序"></a>6）排序</h4><p>一种是原列表上排序</p><p>一种是使用内置函数得出新的列表 原列表不变</p><p><img src="D:\学习\截图\image-20211009162839178.png" alt="image-20211009162839178"></p><p><img src="D:\学习\截图\image-20211009163027915.png" alt="image-20211009163027915"></p><h4 id="7-列表生成式"><a href="#7-列表生成式" class="headerlink" title="7)列表生成式"></a>7)列表生成式</h4><p><img src="D:\学习\截图\image-20211009163343175.png" alt="image-20211009163343175"></p><p>i*i 是表示列表元素的表达式</p><p>i 是自定义变量</p><p>range是可迭代对象</p><h3 id="11-字典"><a href="#11-字典" class="headerlink" title="11.字典{}"></a>11.字典{}</h3><p>以键值对的方式存</p><ul><li><p>hash（key）计算存储位置 </p></li><li><p>key 应是不可变对象 eg：int str</p></li><li><p>key 不能重复 Value可以重复  <strong>重复会引起覆盖</strong></p></li><li><p>元素无序</p></li><li><p>较浪费内存</p></li><li><p>与list 一样 自动动态分配空间</p></li></ul><h4 id="1）创建"><a href="#1）创建" class="headerlink" title="1）创建"></a>1）创建</h4><p><img src="D:\学习\截图\image-20211009164722743.png" alt="image-20211009164722743"></p><p>空字典就是 d={}</p><h4 id="2-获取-判断"><a href="#2-获取-判断" class="headerlink" title="2)获取 判断"></a>2)获取 判断</h4><p><img src="D:\学习\截图\image-20211009165413881.png" alt="image-20211009165413881"></p><p>区别：</p><p>没有查到时：</p><p>第一种报错</p><p>第二种输出None or 给的值</p><p><img src="D:\学习\截图\image-20211009165830244.png" alt="image-20211009165830244"></p><h4 id="3）增加-删除-改"><a href="#3）增加-删除-改" class="headerlink" title="3）增加 删除 改"></a>3）增加 删除 改</h4><p><img src="D:\学习\截图\image-20211009165956699.png" alt="image-20211009165956699"></p><p><img src="D:\学习\截图\image-20211009170105793.png" alt="image-20211009170105793"></p><h4 id="4）视图"><a href="#4）视图" class="headerlink" title="4）视图"></a>4）视图</h4><ol><li>keys（）</li><li>values（）</li><li>items（）</li></ol><p><img src="D:\学习\截图\image-20211009170429550.png" alt="image-20211009170429550"></p><p><img src="D:\学习\截图\image-20211009170612248.png" alt="image-20211009170612248"></p><h4 id="5）遍历"><a href="#5）遍历" class="headerlink" title="5）遍历"></a>5）遍历</h4><p>for  i  in scores</p><p>i 是Key    i是有顺序的</p><h4 id="6）字典生成式"><a href="#6）字典生成式" class="headerlink" title="6）字典生成式"></a>6）字典生成式</h4><p><img src="D:\学习\截图\image-20211009175542969.png" alt="image-20211009175542969"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itmes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"book"</span><span class="token punctuation">,</span><span class="token string">"others"</span><span class="token punctuation">]</span>prices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">]</span>d<span class="token operator">=</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">:</span>price    <span class="token keyword">for</span> item <span class="token punctuation">,</span>price <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>itmes<span class="token punctuation">,</span>prices<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">#&#123;'apple': 80, 'book': 90, 'others': 85&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">itmes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"book"</span><span class="token punctuation">,</span><span class="token string">"others"</span><span class="token punctuation">]</span>prices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">]</span>d<span class="token operator">=</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>price    <span class="token keyword">for</span> item <span class="token punctuation">,</span>price <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>itmes<span class="token punctuation">,</span>prices<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">#&#123;'APPLE': 80, 'BOOK': 90, 'OTHERS': 85&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-元组"><a href="#12-元组" class="headerlink" title="12.元组()"></a>12.元组()</h3><p>元组</p><ul><li><p>Python内置的数据结构之一，是一个不可变序列</p><p><strong>不变可变序</strong>:字符串、元组<br> 不变可变序列 没有增、删,改的操作</p><p>字符串可以s=s+“a”  但是id（地址） 是会变的</p><p> <strong>可变序列</strong>:列表、字典，集合<br> 可变序列 可以对序列执行增、删、改操作，对象地址不发生更改</p></li></ul><h4 id="1-创建-1"><a href="#1-创建-1" class="headerlink" title="1).创建"></a>1).创建</h4><p>第一种创建方式，使用() 小括号可以省略</p><p>第二种创建方式，使用内置函数tuple()</p><p><img src="D:\学习\截图\image-20211009202810600.png" alt="image-20211009202810600"></p><p>元组内如果只包含一个元组的元素 需要使用<strong>逗号</strong>和小括号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment">#如果不写  ， 将会识别为str</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）获取"><a href="#2）获取" class="headerlink" title="2）获取"></a>2）获取</h4><ul><li><p>索引</p><p>t[0]  t[1] t[2]</p></li><li><p>for..in 循环</p></li></ul><p><img src="D:\学习\截图\image-20211009204249601.png" alt="image-20211009204249601"></p><h3 id="13-集合"><a href="#13-集合" class="headerlink" title="13.集合"></a>13.集合</h3><p>集合<br>Python语言提供的内置数据结构<br>与列表、字典一样都属于可变类型的序列·<strong>集合是没有value的字典</strong></p><p>可以类比数学里的集合</p><ul><li>不可重复</li><li>可变序列</li></ul><h4 id="1）创建-1"><a href="#1）创建-1" class="headerlink" title="1）创建"></a>1）创建</h4><ul><li><p>s={2,3,4,5,5,6,7,7}</p></li><li><p>s=set()</p></li><li><p>s=set(range(6))</p></li><li><p>s2=set ([1,2,4,5,5,5,6,6]) #会自动去掉重复元素</p></li><li><p>空集合 必须set()  {}默认是空字典</p></li></ul><h4 id="2）增加"><a href="#2）增加" class="headerlink" title="2）增加"></a>2）增加</h4><ul><li>add 添加一个元素</li><li>update 添加多个元素（加元组，列表…….）</li></ul><h4 id="3）删除"><a href="#3）删除" class="headerlink" title="3）删除"></a>3）删除</h4><ul><li>remove() 有则删除 没有异常</li><li>discard  不抛异常</li><li>pop() <strong>随机</strong>删除一个</li><li>clear 清空</li></ul><h4 id="4）集合之间的关系"><a href="#4）集合之间的关系" class="headerlink" title="4）集合之间的关系"></a>4）集合之间的关系</h4><pre><code>                             4种</code></pre><p><img src="D:\学习\截图\image-20211009212247222.png" alt="image-20211009212247222"></p><p><img src="D:\学习\截图\image-20211009212632256.png" alt="image-20211009212632256"></p><h4 id="5）数学操作"><a href="#5）数学操作" class="headerlink" title="5）数学操作"></a>5）数学操作</h4><p>不影响原来的集合</p><ul><li>&amp;</li><li>|</li><li>-</li><li>^</li></ul><p><img src="D:\学习\截图\image-20211009213142977.png" alt="image-20211009213142977"></p><p><img src="D:\学习\截图\image-20211009213732128.png" alt="image-20211009213732128"></p><p><img src="D:\学习\截图\20211009213709.png" alt="20211009213709"></p><h4 id="6-生成式"><a href="#6-生成式" class="headerlink" title="6)生成式"></a>6)生成式</h4><p>s={ i*i for i in range(10)}</p><h3 id="14-函数"><a href="#14-函数" class="headerlink" title="14.函数"></a>14.函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">'''创建'''</span>    c<span class="token operator">=</span>a<span class="token operator">-</span>b    <span class="token keyword">return</span> c<span class="token punctuation">;</span>calc1 <span class="token operator">=</span> calc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''调用'''</span>calc2 <span class="token operator">=</span>calc<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calc1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calc2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在函数调用过程中，进行参数的传递</strong><br>如果是不可变对象，在函数体的修改不会影响实参的值 arg1的修改为100，不会影响n1的值<br>如果是可变对象，在函数体的的修改会影响到实参的值arg2的修改，append(10)，会影响到n2的值<br><strong>函数的返回值</strong><br>(1)如果函数没有返回值【函数执行完毕之后，不需要给调用处提供数据】return可以省略不写</p><p>(2)函数的返回值，如果是1个，直接返回类型<br>(3)函数的返回值，如果是多个，返回的结果为元组</p><p><img src="D:\学习\截图\image-20211010204408434.png" alt="image-20211010204408434"></p><p><img src="D:\学习\截图\image-20211010205239791.png" alt="image-20211010205239791"></p><p>可以查看print</p><pre class="line-numbers language-none"><code class="language-none">print(self, *args, sep&#x3D;&#39; &#39;, end&#x3D;&#39;\n&#39;, file&#x3D;None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>end 默认换行</p><ul><li>个数可变的位置参数  </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment">#print(args[0]) #作为一个元组来使用</span>    p<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>p<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>p<span class="token punctuation">(</span><span class="token operator">*</span>lst<span class="token punctuation">)</span> <span class="token comment">#在函数调用时，将列表中的每个元素都转换为位置实参传入</span><span class="token comment">#(20, 20, 30)</span><span class="token comment">#(20,)</span><span class="token comment">#(10, 20, 30)</span><span class="token comment">#eg：</span><span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>位置参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>个数可变的关键字参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">**</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    fun<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">&#125;</span>fun<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token comment">#在函数调用时，将字典中的键值对都转换为关键字实参传入</span><span class="token comment">#&#123;'a': 10&#125;</span><span class="token comment">#&#123;'a': 20, 'b': 30, 'c': 60&#125;</span><span class="token comment">#&#123;'a': 111, 'b': 222, 'c': 333&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以上两个个数可变的参数一个函数只能定义一个</strong></p><p>两个<strong>同时使用时</strong>，要求 个数可变的位置参数 在  个数可变的关键字参数<strong>之前</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">```!<span class="token punctuation">[</span>image<span class="token operator">-</span><span class="token number">20211012174942005</span><span class="token punctuation">]</span><span class="token punctuation">(</span>D<span class="token punctuation">:</span>\学习\截图\image<span class="token operator">-</span><span class="token number">20211012174942005.</span>png<span class="token punctuation">)</span>如果不加<span class="token operator">*</span> 三种方法都可以<span class="token comment">### 15.类</span><span class="token comment">#### 1)创建语法</span>  ```python  <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#已经开辟空间了</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span>  <span class="token triple-quoted-string string">'''  2450633353136  &lt;class 'type'>  &lt;class '__main__.Student'>  '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 定义在类里的函数就是 </p><p><img src="D:\学习\截图\image-20211012184044381.png" alt="image-20211012184044381"></p><h4 id="2-实例调用"><a href="#2-实例调用" class="headerlink" title="2)实例调用"></a>2)实例调用</h4><p>  创建的实例对象中 会有一个<strong>类指针</strong>指向类</p><ul><li>对象名.方法名</li><li>类名.方法名（类的对象）#就是定义处的self</li></ul><p>  <img src="D:\学习\截图\image-20211012184459754.png" alt="image-20211012184459754"></p><ul><li><p>类属性</p><p><img src="D:\学习\截图\image-20211012190110090.png" alt="image-20211012190110090"></p></li><li><p>类方法</p><p><img src="D:\学习\截图\image-20211012190203684.png" alt="image-20211012190203684"></p></li></ul><p>类方法和静态调用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Studet<span class="token punctuation">.</span>cm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#cls是不需要传入的</span>Studet<span class="token punctuation">.</span>method<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-动态绑定属性与方法"><a href="#3-动态绑定属性与方法" class="headerlink" title="3)动态绑定属性与方法"></a>3)动态绑定属性与方法</h4><p>python是动态语言，创建对象后可以动态绑定属性与方法</p><ul><li>动态绑定属性<br>  eg：对象添加一个属性</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在吃饭'</span><span class="token punctuation">)</span>stu1<span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>gender<span class="token operator">=</span><span class="token string">'女'</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>stu1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:\学习\截图\image-20211012192240057.png" alt="image-20211012192240057"></p><ul><li>动态绑定方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在吃饭'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"定义在类外的 称为方法"</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>s<span class="token operator">=</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-封装，继承，多态"><a href="#4-封装，继承，多态" class="headerlink" title="4) 封装，继承，多态"></a>4) 封装，继承，多态</h4><ul><li>python没有修饰符来标识属性的<strong>私有</strong> 可以使用两个 _ </li></ul><p>​      只有内部可以访问，外部不能访问</p><p><img src="D:\学习\截图\image-20211012194625453.png" alt="image-20211012194625453"></p><p>（靠程序员的自觉）</p><ul><li><p>默认继承object类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面的括号写父类</p><p>子类和父类有同名方法时 子类覆盖父类</p><ul><li>判断一个变量是否是某个类型及父继承链</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">isinstance</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span> <span class="token comment">#与Java类似</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>开闭原则</p><ul><li><p>对扩展开放</p><p>可以新增子类继承父类，覆盖父类的方法</p></li><li><p>对修改封闭</p><p>不可以修改 <strong>依赖父类的类型</strong>（父类类型做传入参数）的方法</p></li></ul></li></ul><h3 id="16-模块"><a href="#16-模块" class="headerlink" title="16.模块"></a>16.模块</h3><p>.py结尾的文件 就可以作为模块</p><p>  包中有模块</p><ul><li>代码复用</li><li>分工合作开发</li><li>避免命名重复</li></ul><p><img src="D:\学习\截图\image-20211016111325841.png" alt="image-20211016111325841"></p><ul><li>常用内置模块<ul><li>sys</li><li>time</li><li>os</li><li>calendar（日期相关各种函数标准库）</li><li>urllib（读取服务器的数据标准库）</li><li>json</li><li>re</li><li>math</li><li>decimal</li><li>logging</li></ul></li><li>导入第三方包</li></ul><h3 id="17-包"><a href="#17-包" class="headerlink" title="17.包"></a>17.包</h3><p>Python中的包</p><ul><li><p>包是一个分层次的目录结构，它将一组功能相近的模块组织在一起</p></li><li><p> 作用</p></li></ul><p>  代码规范<br>  避免模块名称冲突·</p><ul><li><p>包与目录的区别<br>包含__init_ <em>.py文件的目录称为包·目录里通常不包含_init</em>_.py文件<br>心</p></li><li><p>包的导入<br>import包名.模块名 as 别名</p></li><li><p>使用from..import 可以导入包，模块，函数，变量</p></li></ul><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="1-isinstance"><a href="#1-isinstance" class="headerlink" title="1.isinstance"></a>1.isinstance</h4><p>有时候可以代替type() </p><p>判断它是不是 某个类的对象</p><p>判断是不是 多个类其中一个的对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-dir（）"><a href="#2-dir（）" class="headerlink" title="2.dir（）"></a>2.dir（）</h4><p>获取一个对象的所有属性和方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__add__'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'capitalize'</span><span class="token punctuation">,</span> <span class="token string">'casefold'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">'zfill'</span><span class="token punctuation">]</span><span class="token comment">#__add__  命名的是有特殊用途的 比如__len__方法返回长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token comment"># 有属性(方法和变量)'x'吗？</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> obj<span class="token punctuation">.</span>x<span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment"># 有属性'y'吗？</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">setattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token comment"># 设置一个属性'y'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment"># 有属性'y'吗？</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment"># 获取属性'y'</span><span class="token number">19</span><span class="token operator">>></span><span class="token operator">></span> obj<span class="token punctuation">.</span>y <span class="token comment"># 获取属性'y'</span><span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吴恩达机器学习课程笔记</title>
      <link href="/2021/12/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV164411b7dx?p=2&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV164411b7dx?p=2&amp;spm_id_from=pageDriver</a></p><h1 id="吴恩达机器学习课程笔记"><a href="#吴恩达机器学习课程笔记" class="headerlink" title="吴恩达机器学习课程笔记"></a>吴恩达机器学习课程笔记</h1><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>Tom Mitchell在1997年提出的“ETP定义”：A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p><p>E：Experience，经验</p><p>T：Task，任务</p><p>P：Performance measure，性能测度</p><p>从E来提高做T的P</p><p><strong>重点：学习怎么使用正确机器学习算法 来完成任务</strong></p><p>学习算法中主要的两类：</p><ul><li>supevised learning  监督学习 （教计算机学习）</li><li>unsupervised learning           （让计算机自己学习）</li></ul><p>其他类型：</p><ul><li>reinforcement learmning  强化学习</li><li>recommender systems  推荐系统</li></ul><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><p>每个例子都有正确的答案</p><ul><li><p>分类问题</p><p>告诉计算机什么是0 和 1  然后给一个数据  告诉你这个是是0还是1</p></li><li><p>回归问题</p><p>eg：分析不同地区 卖房 可以卖到多少钱</p></li></ul><h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><p>给一个数据集  它没有标签或者标签相同 其中之一 聚类算法  计算器自动分类 </p><p>eg：谷歌新闻页面 组合新闻链接 </p><p>eg：从录音中分离 不同的人声 或者分离伴奏和人声</p><p>octave—科学计算软件</p><h2 id="模型描述"><a href="#模型描述" class="headerlink" title="模型描述"></a>模型描述</h2><ul><li>一个训练集</li><li>训练数</li><li>特征 给的值</li><li>目标值</li></ul><p>预测房价的例子  ：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211108210406083.png" alt="image-20211108210406083"></p><p>预测房价的例子  ：监督学习—线性回归</p><p>一行就是一个训练样本</p><p>x^1 y^1   这里1 指的是索引</p><p>得出的结果 就是叫假设函数</p><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20211108214222.png" alt="20211108214222"></p><p>假设函数，参数，代价函数，优化目标：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211108222305107.png" alt="image-20211108222305107"></p><ol><li>简化了房价的例子的参数 只有一个斜率参数θ1</li></ol><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211108221850671.png" alt="image-20211108221850671"></p><ol start="2"><li>两个参数 都有：</li></ol><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211108223437244.png" alt="image-20211108223437244"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211108223446980.png" alt="image-20211108223446980"></p><p>（图A）一个参数 和两个参数的 代价函数</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211108223454288.png" alt="image-20211108223454288"></p><p>代价函数画成  等高线图后的样子  一个点 代表一个h（x） 假设函数</p><p>椭圆的“同心点” 拟合程度较高</p><p>我们需要软件来帮助我们找到最低点和对应的θ1和θ0</p><h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><ol><li>梯度下降法来最小化任意函数：</li></ol><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211108225451754.png" alt="image-20211108225451754"></p><p>不同的起始点 找到的最低点可能不同（一般不是这样 应该是一个<strong>凸</strong>函数  像上面图一）</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211109172655125.png" alt="image-20211109172655125"></p><ol start="2"><li>梯度下降算法</li></ol><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211109172327978.png" alt="image-20211109172327978"></p><p>“正确的梯度下降要同步更新 右侧是不正确的”</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211109175015782.png" alt="image-20211109175015782"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211109175310119.png" alt="image-20211109175310119"></p><ol start="3"><li>α是控制下降速率  </li></ol><ul><li><p>α小的话 下降比较</p></li><li><p>α大的话  可能导致找不到最小点或者发散</p></li></ul><p>算法中的导数项 通俗地说是开控制下降的方向</p><p>导数项 是慢慢减小的 最后是0  所以梯度下降将自动采取较小的幅度</p><p>整合模型和算法下·</p><ol start="4"><li><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211109183608749.png" alt="image-20211109183608749"></p><p>右的线性回归模型 带入梯度算法中  导数项和代价函数如下图</p></li></ol><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211109183657678.png" alt="image-20211109183657678"></p><p>不断重复下面</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211109185810332.png" alt="image-20211109185810332"></p><p><em>上面的方法是全览了整个训练集 的梯度下降 所以它又叫”batch“算法</em></p><p><em>(还有没有全览了整个训练集的算法）</em></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解和反射</title>
      <link href="/2021/12/02/javaSE%E2%80%94%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/12/02/javaSE%E2%80%94%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="javaSE—注解和反射"><a href="#javaSE—注解和反射" class="headerlink" title="javaSE—注解和反射"></a>javaSE—注解和反射</h1><h2 id="一-注解"><a href="#一-注解" class="headerlink" title="一.注解"></a>一.注解</h2><h3 id="1-什么是注解"><a href="#1-什么是注解" class="headerlink" title="1.什么是注解"></a>1.什么是注解</h3><p>Annotation是从JDK5.0开始引入的概念</p><p>eg：@override  重写的注解</p><ul><li>1.不是程序本身 给程序作出解释（）</li><li>2.<strong>可以被其他程序读取</strong></li><li>非必须</li><li>3.格式：@注释+注释名，还可以加一些参数值</li><li>4.有检查和约束的作用</li><li>可以放在方法或者类等等上面</li></ul><p>…..注释是给人看的,注解是给人和机器看的</p><h3 id="2-内置注解"><a href="#2-内置注解" class="headerlink" title="2.内置注解"></a>2.内置注解</h3><p>@override 指示方法声明旨在覆盖超类型中的方法声明。<br>@Deprecated 已过时 不推荐使用的代码<br>@SuppressWarnings  镇压警告（可以放入参数）</p><h3 id="3-元注解"><a href="#3-元注解" class="headerlink" title="3.元注解"></a>3.元注解</h3><p>作用：负责注解其他注解<br>4个标准的meta-annotation类型：</p><ul><li>@Target     被描述的注解可以用在什么地方<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>  说明作用域在方法上 <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span> 作用域在属性上（成员变量）<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  说明作用域在方法和类上 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>@Retention    表示需要在什么级别保存注释信息（一般都写RUNTIME）<br>表示我们的注释在什么地方还有效<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>@Documented  是否我们的注解生成在JAVAdoc中</li><li>@Inherited    表示子类能继承父类该注解<h3 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h3></li><li>使用@interface自定义注解时，自动继承注解接口</li><li>写在注解里的参数格式：参数类型 + 参数名（）；</li><li>default 设默认值<br>注解显示赋值，如果没有默认值，我们必须赋值<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotion</span><span class="token punctuation">&#123;</span>string <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span>   <span class="token comment">//一般负一代表不存在</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotion2</span><span class="token punctuation">&#123;</span>string <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@MyAnnotion2</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>  <span class="token comment">//只有一个且名字是value时 这样 等价于 (value="'abc'")</span><span class="token keyword">public</span> viod <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-反射"><a href="#二-反射" class="headerlink" title="二.反射"></a>二.反射</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3>Java（静态语言）被视为准动态语言的关键，反射机制允许程序在<strong>执行期</strong>借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。   private 里的也可以操作</li></ul><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象) ，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子， 透过这个镜子看到类的结构，所以，我们形象的称之为:反射</p><p>正常方式: 引入需要的”包类”名称一&gt; 通过new实例化—&gt;取得实例化对象<br>反射方式:实例化对象一&gt; getClass)方法—&gt;得到完整的“包类”名称</p><h3 id="2-class类的创建方式"><a href="#2-class类的创建方式" class="headerlink" title="2.class类的创建方式"></a>2.class类的创建方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test03 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个人是："</span><span class="token operator">+</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过对象获得</span>        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//forname获得</span>        <span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"lesson05.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过类名.class获得</span>        <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>                <span class="token comment">//获得父类类型</span>        <span class="token class-name">Class</span> c5 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"学生"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"老师"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-那些类型有Class对象"><a href="#3-那些类型有Class对象" class="headerlink" title="3.那些类型有Class对象"></a>3.那些类型有Class对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test04 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> objectClass <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//类</span>        <span class="token class-name">Class</span> comparableClass <span class="token operator">=</span> <span class="token class-name">Comparable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//接口</span>        <span class="token class-name">Class</span> aClass <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//一维数组</span>        <span class="token class-name">Class</span> aClass1 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">//二维数组</span>        <span class="token class-name">Class</span> overrideClass <span class="token operator">=</span> <span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//注解</span>        <span class="token class-name">Class</span> elementTypeClass <span class="token operator">=</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">//枚举</span>        <span class="token class-name">Class</span>  integerClass <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//基本数据类型</span>        <span class="token class-name">Class</span> voidClass <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//void</span>        <span class="token class-name">Class</span> classClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//Class</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-分析类初始化"><a href="#4-分析类初始化" class="headerlink" title="4.分析类初始化"></a>4.分析类初始化</h3><p>​       (1.) 类的主动引用(一定会发生类的初始化)</p><ul><li><p>当虚拟机启动，先初始化main方法所在的类</p></li><li><p>new 一个类的对象</p></li><li><p>调用类的静态成员(除了final常量)和静态方法</p></li><li><p>使用java.lang.reflect包的方法对类进行反射调用</p></li><li><p>当初始化一个类,如果其父类没有被初始化，则先会初始化它的父类<br>(2.)类的被动引用(不会发生类的初始化)</p></li><li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如:当通过子类引用父类的静态变量,不会导致子类初始化</p></li><li><p>通过数组定义类引用，不会触发此类的初始化</p></li><li><p>引用常量（final）不会触发此类的初始化(常量在链接阶段就存入调用类的常量池中了)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test05 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//(1.) 类的主动引用(一定会发生类的初始化)</span>        <span class="token comment">///zi son = new zi();</span>        <span class="token comment">//System.out.println(Fu.b);</span>      <span class="token comment">// Class.forName("lesson05.zi");</span>        <span class="token comment">//Class.forName("lesson05.Fu");</span>        <span class="token comment">//(2.)类的被动引用(不会发生类的初始化)</span>        <span class="token comment">//System.out.println(zi.b);</span>        <span class="token comment">//zi[] zis = new zi[5];</span>        <span class="token comment">//System.out.println(zi.m);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> zi <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span>   <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>补充：</p><p>1.static方法</p><p>　　static方法一般称作静态方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为它不依附于任何对象，既然都没有对象，就谈不上this了。并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法/变量都是必须依赖具体的对象才能够被调用。</p><p>　　但是要注意的是，虽然在静态方法中不能访问非静态成员方法和非静态成员变量，但是在非静态成员方法中是可以访问静态成员方法/变量的。</p><p>2.static变量</p><p>　　static变量也称作静态变量，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</p><p>　　static成员变量的初始化顺序按照定义的顺序进行初始化。</p><p>3.static代码块</p><p>　　static关键字还有一个比较关键的作用就是 用来形成静态代码块以优化程序性能。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><p>4.static作用于成员变量用来表示只保存一份副本，final的作用是用来保证变量不可变</p><h3 id="5-类加载内存分析"><a href="#5-类加载内存分析" class="headerlink" title="5.类加载内存分析"></a>5.类加载内存分析</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20211201120121.png" alt="20211201120121"></p><p>测试代码：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20211201125030.png" alt="20211201125030"></p><p>运行结果：</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20211201125036.png" alt="20211201125036"></p><p>分析：<img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20211201120508.png" alt="20211201120508"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/20211201124815.png" alt="20211201124815"></p><p><strong>注意：静态代码块和 静态变量执行的先后顺序取决于代码编写的顺序</strong> 在<clinit>时完成</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211201130716568.png" alt="image-20211201130716568"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211201132233921.png" alt="image-20211201132233921"></p><h3 id="6-类加载器"><a href="#6-类加载器" class="headerlink" title="6.类加载器"></a>6.类加载器</h3><ul><li>引导类加载器 </li></ul><pre class="line-numbers language-none"><code class="language-none">引导类加载器:用C++编写的， 是JVM自带的类加载器，负责Java平台核心库（rt.jar），用来装载核心类库。该加载器无法直接获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>扩展类加载器</li></ul><pre class="line-numbers language-none"><code class="language-none">扩展类加载器:负责jre&#x2F;ib&#x2F;ext目录下的jar包或-D java.ext.dirs指定目录下的jar包装入工作库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>系统类加载器</li></ul><pre class="line-numbers language-none"><code class="language-none">系统类加载器:负责java - classpath或-Djava.class. path所指的目录下的类与jar包装入工作库，是最常用的加载器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/Screenshot_2021-08-07-09-06-43-674_tv.danmaku.bil.jpg"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/Screenshot_2021-08-07-09-08-42-040_tv.danmaku.bil.jpg" alt=" "></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/Screenshot_2021-08-07-09-10-42-338_tv.danmaku.bil.jpg"></p><h3 id="7-获取运行时类的完整结构"><a href="#7-获取运行时类的完整结构" class="headerlink" title="7.获取运行时类的完整结构"></a>7.获取运行时类的完整结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">//获取类的信息</span><span class="token keyword">public</span> <span class="token keyword">class</span> test06 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">USer</span> uSer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">USer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> uSer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取类的名字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        //获得类的属性</span><span class="token comment">//        System.out.println("===========================================");</span><span class="token comment">//        Field[] fields = c1.getFields(); //只能找到public属性</span><span class="token comment">//        for (Field field : fields) &#123;</span><span class="token comment">//            System.out.println(field);</span><span class="token comment">//        &#125;</span><span class="token comment">//        System.out.println("===========================================");</span><span class="token comment">//        Field[] fields1 = c1.getDeclaredFields();//找到全部属性</span><span class="token comment">//        for (Field field : fields1) &#123;</span><span class="token comment">//            System.out.println(field);</span>        <span class="token comment">//获得指定属性</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得类的方法</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//本类及父类所有方法</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常的："</span><span class="token operator">+</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//本类的所有方法</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDeclaredMethods的："</span><span class="token operator">+</span>declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//获得指定方法</span>        <span class="token comment">//可能会发生重载 所以要传入参数 丢进去一个类型就可以了</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> getName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>setName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//构造方法</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//本类public构造方法</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//本类全部构造方法</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> constructor1 <span class="token operator">:</span> constructors1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">//获得指定构造器</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-动态创建对象执行方法"><a href="#7-动态创建对象执行方法" class="headerlink" title="7. 动态创建对象执行方法"></a>7. 动态创建对象执行方法</h3><p>其中没有参数的给null</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过反射，动态创建对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> test07 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获得class对象</span>        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"lesson05.USer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造对象</span>        <span class="token class-name">USer</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">USer</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//本质调用了无参构造器</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过构造器创建对象</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">USer</span> user2  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">USer</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"dongGEi"</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过反射调用普通方法</span>        <span class="token class-name">USer</span> user3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">USer</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过反射获得方法</span>        <span class="token class-name">Method</span> setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user3<span class="token punctuation">,</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//invoke 激活，给user3这个对象 参数是abcd</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过反射操作属性</span>        <span class="token class-name">USer</span> user4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">USer</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> name <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//不能直接操作私有属性，需要先关闭安全检测，属性和方法都是setAccessible(true)</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置权限</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user4<span class="token punctuation">,</span><span class="token string">"abcd222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-性能对比"><a href="#8-性能对比" class="headerlink" title="8.性能对比"></a>8.性能对比</h3><ul><li>普通方法 new User 出来的进行set get等等操作</li><li>反射方法 uesr.getClass 然后获得方法 然后invoke </li><li>关闭权限检测的反射调用 加一个setAccessible（true）</li></ul><p>速度  普通&gt;关闭权限检测的反射&gt;反射方法</p><p>需要反射时可以关闭权限检测 提高速度</p><h3 id="9-反射获取泛型信息"><a href="#9-反射获取泛型信息" class="headerlink" title="9.反射获取泛型信息"></a>9.反射获取泛型信息</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211201151837962.png" alt="image-20211201151837962"></p><p>解释上面代码：test01 是一个参数为Map和List的方法，</p><p>反射拿到这个方法 然后获得参数列表</p><p> 遍历参数列表 然后参数类型是参数化类型（加&lt;&gt;的；泛型 ）的强转成参数化类型</p><p>再遍历 拿到真真实参数  </p><p>（口语化 有点绕=.=）</p><h3 id="10-反射获取注解信息"><a href="#10-反射获取注解信息" class="headerlink" title="10. 反射获取注解信息"></a>10. 反射获取注解信息</h3><h5 id="ORM对象关系映射"><a href="#ORM对象关系映射" class="headerlink" title="ORM对象关系映射"></a>ORM对象关系映射</h5><p>◆类和表结构对应</p><p>◆属性和字段对应</p><p>◆对象和记录对应</p><p>要求:利用注解和反射完成类和表结构的映射关系</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211202082253348.png" alt="image-20211202082253348"></p><p>先看下面 再看psvm</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过反射获得注解</span>        <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//获得注解value的值</span>        <span class="token comment">//获得指定注解 传进注解的class</span>        <span class="token class-name">TableDong</span> tableDong <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableDong</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> tableDong<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得指定属性 （成员变量）</span>        <span class="token class-name">Field</span> f <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得属性上的 指定注解 取出注解的值</span>        <span class="token class-name">FieldDong</span> fieldDong <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">FieldDong</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldDong<span class="token punctuation">.</span><span class="token function">columName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldDong<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldDong<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得指定注解</span>        fieldDong <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">FieldDong</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldDong<span class="token punctuation">.</span><span class="token function">columName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldDong<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldDong<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@TableDong</span><span class="token punctuation">(</span><span class="token string">"db_student"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@FieldDong</span><span class="token punctuation">(</span>columName <span class="token operator">=</span> <span class="token string">"db_id"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"varchar"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FieldDong</span><span class="token punctuation">(</span>columName <span class="token operator">=</span> <span class="token string">"db_age"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FieldDong</span><span class="token punctuation">(</span>columName <span class="token operator">=</span> <span class="token string">"db_name"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"varchar"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//类名的注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">TableDong</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//属性的注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">FieldDong</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">columName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//列名（不是学生名）</span>    <span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20211202084133761.png" alt="image-20211202084133761"></p><p>（本篇 JVM深入部分 还是不太懂 以后再深入了解吧- . -）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 注解和反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-集合</title>
      <link href="/2021/08/01/JavaSE%E2%80%94%E9%9B%86%E5%90%88/"/>
      <url>/2021/08/01/JavaSE%E2%80%94%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="集合（进阶）"><a href="#集合（进阶）" class="headerlink" title="集合（进阶）"></a>集合（进阶）</h1><h2 id="一-集合类体系结构"><a href="#一-集合类体系结构" class="headerlink" title="一.集合类体系结构"></a>一.集合类体系结构</h2><p>1.Collection （单列）—&gt;&gt;List（可重复）—&gt;&gt;ArryList<br>                                                                        —&gt;&gt;Linklist<br>                                    —&gt;&gt;set(不可重复)—&gt;&gt;HashSet<br>                                                                    —&gt;&gt;TreeSet<br>2.Map 双列—&gt;&gt;HashAap</p><p>Collection,Map, List,set是接口，4个是实现类</p><p>后面的可以使用前面类里的方法</p><h2 id="二-collection集合"><a href="#二-collection集合" class="headerlink" title="二.collection集合"></a>二.collection集合</h2><h3 id="1-概述及常用方法"><a href="#1-概述及常用方法" class="headerlink" title="1.概述及常用方法"></a>1.概述及常用方法</h3><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/Screenshot_2021-08-07-21-29-44-495_tv.danmaku.bil.jpg" alt="Screenshot_2021-08-07-21-29-44-495_tv.danmaku.bil"><br>Arrylist重写了tosrting</p><p>add ， remove（有重复删除第一个）， clear， contains(判断是否存在指定元素)， isEmpty，size</p><h3 id="2-collection集合的遍历"><a href="#2-collection集合的遍历" class="headerlink" title="2.collection集合的遍历"></a>2.collection集合的遍历</h3><p>迭代器：iteartor 集合专用遍历<br>用.iteartor方法获得迭代器  是用了Iitearto的实现类<br>两个常用方法：</p><p><img src="D:\2645981073\FileRecv\MobileFile\Screenshot_2021-08-07-21-55-55-057_tv.danmaku.bil.jpg" alt="Screenshot_2021-08-07-21-55-55-057_tv.danmaku.bil"></p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210807220642894.png" alt="image-20210807220642894"></p><h2 id="三-List"><a href="#三-List" class="headerlink" title="三.List"></a>三.List</h2><h3 id="1-List集合概述和特点"><a href="#1-List集合概述和特点" class="headerlink" title="1.List集合概述和特点"></a>1.List集合概述和特点</h3><ul><li>有序集合，精确控制插入位置，索引访问元素 </li><li>与set不同，列表通常允许重复的元素<br>特点：有序 可重复 </li><li>特有方法：增，删，改，查，增加了索引（不能越界）<br>索引遍历<h3 id="2-并发修改异常"><a href="#2-并发修改异常" class="headerlink" title="2.并发修改异常"></a>2.并发修改异常</h3>迭代器 循环列表时 增删元素报错 可以通过for和.size方法<h3 id="3-Listiteartor"><a href="#3-Listiteartor" class="headerlink" title="3. Listiteartor"></a>3. Listiteartor</h3></li><li>前后方向都可       previous 返回上一个元素</li><li>迭代期间可以修改列表  使用列表迭代器的add方法  无并发修改异常<h3 id="4-增强for语句"><a href="#4-增强for语句" class="headerlink" title="4.增强for语句"></a>4.增强for语句</h3></li><li>内部原理是一个iteartor迭代器<h3 id="List集合子类特点"><a href="#List集合子类特点" class="headerlink" title="List集合子类特点"></a>List集合子类特点</h3></li><li>ArryList底层是数组 查找快 增删慢</li><li>LinkedList底层是链表  特有方法：增，查，删开头和末尾<h2 id="四-set"><a href="#四-set" class="headerlink" title="四.set"></a>四.set</h2></li><li>无重复元素    重复元素不会加进去</li><li>无索引，不能普通for循环遍历</li><li>对迭代顺序不作保证<h3 id="1-HashSet"><a href="#1-HashSet" class="headerlink" title="1.HashSet"></a>1.HashSet</h3>底层数据结构是哈希表 JDK8之前是数组+链表</li><li>同一对象哈希值一样 hashcode</li><li>可以通过方法重写改变哈希值</li><li>储存时先比哈希值再比内容 都相同时不会储存</li><li><em><strong>自定义的类需要重写hashcode和equals</strong></em>（自动生成） 才能保证不会重复储存</li></ul><h3 id="2-LinkedHashSet集合概述和特点"><a href="#2-LinkedHashSet集合概述和特点" class="headerlink" title="2.LinkedHashSet集合概述和特点"></a>2.LinkedHashSet集合概述和特点</h3><ul><li><p>哈希表和链表实现的set接口</p></li><li><p>元素不重复 ，<strong>迭代有次序</strong>（取和存顺序一样）</p><h3 id="3-TreeSet集合概述和特点"><a href="#3-TreeSet集合概述和特点" class="headerlink" title="3.TreeSet集合概述和特点"></a>3.TreeSet集合概述和特点</h3></li><li><p>它的元素是排序的，可以是natural ordering（自然排序） ，或Comparator（比较器排序）这取决于所使用的构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//构造一个新的空树集，根据其元素的自然顺序进行排序。  </span><span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">)</span> <span class="token comment">//构造一个新的空树集，根据指定的比较器进行排序。  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>无索引，不能普通for遍历</p></li><li><p>无重复 ，有排序</p><h4 id="自然顺序Comparable的使用"><a href="#自然顺序Comparable的使用" class="headerlink" title="自然顺序Comparable的使用"></a>自然顺序Comparable的使用</h4><p>TreeSet无参构造</p><p>自然顺序就是让元素所属的类实现Comparable&lt;类名&gt;接口</p><p>然后，重写compareTo</p><p>compareTo中return 1，就是添加的顺序排序 ；-1就是添加的倒序排序；0，只存第一个</p><p>*** 比较器里return 0时会认为是相同元素，不会储存****</p><p><em><strong>要注意主要条件和次要条件都写</strong></em></p><p>this是后面要加入的那个对象 s是传进来比较的前面那个对象</p><p><img src="https://gitee.com/dong2645981073/picture-summary/raw/master//image/image-20210808213003447.png" alt="image-20210808213003447"></p><h4 id="比较器comparator的使用"><a href="#比较器comparator的使用" class="headerlink" title="比较器comparator的使用"></a>比较器comparator的使用</h4><p>​    TreeSet带参构造</p><p>在需要参数的地方 new一个comparator（匿名内部类）直接重写compare方法</p><p>compare方法里s1是后面要加入的那个对象，s2是前面的那个对象</p></li></ul><p><img src="D:\2645981073\FileRecv\MobileFile\Screenshot_2021-08-08-21-40-10-797_tv.danmaku.bil.jpg" alt="Screenshot_2021-08-08-21-40-10-797_tv.danmaku.bil"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>成绩排序（注意要注意主要条件和次要条件都写）</li><li>不重复的随机数</li></ul><h2 id="五-泛型"><a href="#五-泛型" class="headerlink" title="五.泛型"></a>五.泛型</h2><ul><li>运行时异常提前到编译期</li><li>避免了强制类型转换<h3 id="1-泛型类"><a href="#1-泛型类" class="headerlink" title="1.泛型类"></a>1.泛型类</h3></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> g1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g1<span class="token punctuation">.</span><span class="token function">setT</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> g2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">setT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Generic&lt;T&gt; &#123;    private T t;    public T getT() &#123;        return t;    &#125;    public void setT(T t) &#123;        this.t &#x3D; t;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-泛型方法"><a href="#2-泛型方法" class="headerlink" title="2.泛型方法"></a>2.泛型方法</h3><p>与重载类似</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Generic &#123;    public&lt;T&gt; void show(T t)&#123;        System.out.println(t);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) &#123;    Generic g1 &#x3D; new Generic();    g1.show(&quot;张三&quot;);    g1.show(&quot;1324&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="3.泛型接口"></a>3.泛型接口</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) &#123;    GenreicImpl&lt;String&gt; g1 &#x3D; new GenreicImpl&lt;String&gt;();    g1.show(&quot;张三&quot;);    GenreicImpl&lt;Integer&gt; g2 &#x3D; new GenreicImpl&lt;Integer&gt;();    g2.show(123465);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class GenreicImpl&lt;T&gt; implements Generic&lt;T&gt; &#123;    @Override    public void show(T t) &#123;        System.out.println(t);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public interface Generic&lt;T&gt; &#123;    void show(T t);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-泛型通配符"><a href="#4-泛型通配符" class="headerlink" title="4.泛型通配符"></a>4.泛型通配符</h3><ul><li><p>List&lt;?&gt;:表示元素类型未知的List,它的元素可以匹配任何的类型</p></li><li><p>这种带通配符的List仅表示它是各种泛 型List的父类，并不能把元素添加到其中</p></li><li><p>类型通配符 上限: &lt;?extends 类型&gt;  List&lt;? extends Number&gt;:它表示的类型是Number或者其子类型</p></li><li><p>类型通配符下限: &lt;?super 类型&gt;  List&lt;? super Number&gt;:它表示的类型是Number或者其父类犁</p></li></ul><h3 id="5-可变参数"><a href="#5-可变参数" class="headerlink" title="5.可变参数"></a>5.可变参数</h3><p>逻辑：每个参数都封装在数组里面了<br>范例: public static int sum（int…a){ }   就是一个数组 可以传进去n个int<br>public static int sum（int b,int…a){ } //可以这样使用  多个参数 可变参数放在最后  </p><ul><li>Arrays工具类里的静态方法</li></ul><p>static <T> List<T> asList(T… a) 返回由指定数组支持的<strong>固定大小</strong>的列表。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asLIst</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>无法使用list<span class="token punctuation">.</span>add和list<span class="token punctuation">.</span>remove，因为大小已经固定，可以用set（<span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"java"</span>）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>List接口中有一个静态方法</li></ul><p>static <E> List<E> of(E… elements) 返回包含任意数量元素的不可修改列表。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>无法使用list<span class="token punctuation">.</span>add和list<span class="token punctuation">.</span>remove和list<span class="token punctuation">.</span>set<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>set接口中有一个静态方法</li></ul><p>static <E> Set<E> of(E… elements) 返回包含任意数量元素的不可修改集。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">--</span>错误  不可重复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="六-Map"><a href="#六-Map" class="headerlink" title="六.Map"></a>六.Map</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><ul><li>Interface Map&lt;K,V&gt;， K：键的类型 V:值的类型   kay和value</li><li> 地图不能包含重复的键; 每个键最多可以映射一个值。 </li><li> 举例：学号对应姓名</li></ul><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class MapDemo &#123;    public static void main(String[] args) &#123;        Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();        &#x2F;&#x2F;添加方法        map.put(&quot;001&quot;,&quot;a&quot;);        map.put(&quot;002&quot;,&quot;b&quot;);        map.put(&quot;003&quot;,&quot;c&quot;);map.put(&quot;003&quot;,&quot;d&quot;);&lt;&lt;——错误 会覆盖上一个003        System.out.println(map);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Map的基本功能"><a href="#2-Map的基本功能" class="headerlink" title="2.Map的基本功能"></a>2.Map的基本功能</h3><p>put,remove(返回V),clear,containsKey(是否包含指定键)，containsValue(是否包含指定值)，isEmpy,size,</p><h3 id="3-Map的获取功能"><a href="#3-Map的获取功能" class="headerlink" title="3.Map的获取功能"></a>3.Map的获取功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回所有键的集合<span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> 返回指定键映射到的值，如果此映射不包含键的映射，则返回 <span class="token keyword">null</span> 。  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  获取所有值的集合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-Map集合的遍历"><a href="#4-Map集合的遍历" class="headerlink" title="4.Map集合的遍历"></a>4.Map集合的遍历</h3><p>遍历直接sout也行，主要是了解方法</p><p>方式一：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的String 可以是自己创建的对象</span>        <span class="token comment">//添加方法</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keyset <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keyset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加方法</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keyset <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有键值对对象 的集合</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> me <span class="token operator">:</span>entrySet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> me<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> me<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
